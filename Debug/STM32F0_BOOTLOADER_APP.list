
STM32F0_BOOTLOADER_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ec  080058ec  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080058ec  080058ec  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058ec  080058ec  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ec  080058ec  000068ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058f0  080058f0  000068f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080058f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000068  0800595c  00007068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800595c  00007520  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b664  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221c  00000000  00000000  000126f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00014910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b7  00000000  00000000  00015318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a479  00000000  00000000  00015acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e083  00000000  00000000  0002ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f5a  00000000  00000000  0003dfcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2f25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000d2f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d565c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005298 	.word	0x08005298

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005298 	.word	0x08005298

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <bootloader_get_ver_cmd>:
#include "bootloader_command_app.h"

extern uint8_t supported_commands[];

void bootloader_get_ver_cmd(uint8_t *bl_rx_data)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
	uint8_t bl_Version = 0;
 800024c:	2413      	movs	r4, #19
 800024e:	193b      	adds	r3, r7, r4
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: Bootloaer_Get_Ver_Cmd\n");
 8000254:	4b21      	ldr	r3, [pc, #132]	@ (80002dc <bootloader_get_ver_cmd+0x98>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fe24 	bl	8000ea4 <printMessage>

	uint32_t command_packet_length = bl_rx_data[0] + 1;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
	memcpy(&host_crc, bl_rx_data + command_packet_length - 4, sizeof(host_crc));
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	3b04      	subs	r3, #4
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	18d1      	adds	r1, r2, r3
 8000270:	230c      	movs	r3, #12
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	2204      	movs	r2, #4
 8000276:	0018      	movs	r0, r3
 8000278:	f004 fbc4 	bl	8004a04 <memcpy>

	// crc control
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc))
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	1f19      	subs	r1, r3, #4
 8000280:	68fa      	ldr	r2, [r7, #12]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fbb7 	bl	80009f8 <bootloader_verify_crc>
 800028a:	1e03      	subs	r3, r0, #0
 800028c:	d11c      	bne.n	80002c8 <bootloader_get_ver_cmd+0x84>
	{
		printMessage("BL_DEBUG_MSG: Checksum success\n");
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <bootloader_get_ver_cmd+0x9c>)
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe07 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fbe6 	bl	8000a68 <bootloader_send_ack>
		bl_Version = bootloader_get_version();
 800029c:	f000 fc14 	bl	8000ac8 <bootloader_get_version>
 80002a0:	0003      	movs	r3, r0
 80002a2:	001a      	movs	r2, r3
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	701a      	strb	r2, [r3, #0]
		printMessage("BL_DEBUG_MSG: BL_VER : %d %#x  \n", bl_Version, bl_Version);
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	0019      	movs	r1, r3
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <bootloader_get_ver_cmd+0xa0>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fdf4 	bl	8000ea4 <printMessage>
		bootloader_uart_write_data(&bl_Version, 1);
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2101      	movs	r1, #1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fb85 	bl	80009d0 <bootloader_uart_write_data>
	else
	{
		printMessage("BL_DEBUG_MSG: Checsum fail \n");
		bootloader_send_nack();
	}
}
 80002c6:	e005      	b.n	80002d4 <bootloader_get_ver_cmd+0x90>
		printMessage("BL_DEBUG_MSG: Checsum fail \n");
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <bootloader_get_ver_cmd+0xa4>)
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fdea 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 80002d0:	f000 fbe6 	bl	8000aa0 <bootloader_send_nack>
}
 80002d4:	46c0      	nop			@ (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b007      	add	sp, #28
 80002da:	bd90      	pop	{r4, r7, pc}
 80002dc:	080052b0 	.word	0x080052b0
 80002e0:	080052d8 	.word	0x080052d8
 80002e4:	080052f8 	.word	0x080052f8
 80002e8:	0800531c 	.word	0x0800531c

080002ec <bootloader_get_help_cmd>:

void bootloader_get_help_cmd(uint8_t *bl_rx_data)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	printMessage("BL_DEBUG_MSG: bootloader_get_help_cmd \n");
 80002f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <bootloader_get_help_cmd+0x88>)
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fdd4 	bl	8000ea4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	60fb      	str	r3, [r7, #12]

//	uint32_t host_crc = *((uint32_t*)(bl_rx_data + command_packet_len - 4));

	uint32_t host_crc = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
	memcpy(&host_crc, bl_rx_data + command_packet_len - 4, sizeof(host_crc));
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3b04      	subs	r3, #4
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	18d1      	adds	r1, r2, r3
 8000310:	2308      	movs	r3, #8
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	2204      	movs	r2, #4
 8000316:	0018      	movs	r0, r3
 8000318:	f004 fb74 	bl	8004a04 <memcpy>


	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	1f19      	subs	r1, r3, #4
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fb67 	bl	80009f8 <bootloader_verify_crc>
 800032a:	1e03      	subs	r3, r0, #0
 800032c:	d117      	bne.n	800035e <bootloader_get_help_cmd+0x72>
	{
		printMessage("BL_DEBUG_MSG: Checksum succes \n");
 800032e:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <bootloader_get_help_cmd+0x8c>)
 8000330:	0018      	movs	r0, r3
 8000332:	f000 fdb7 	bl	8000ea4 <printMessage>
		bootloader_send_ack(strlen(supported_commands));
 8000336:	4b11      	ldr	r3, [pc, #68]	@ (800037c <bootloader_get_help_cmd+0x90>)
 8000338:	0018      	movs	r0, r3
 800033a:	f7ff fee5 	bl	8000108 <strlen>
 800033e:	0003      	movs	r3, r0
 8000340:	b2db      	uxtb	r3, r3
 8000342:	0018      	movs	r0, r3
 8000344:	f000 fb90 	bl	8000a68 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, strlen(supported_commands));
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <bootloader_get_help_cmd+0x90>)
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff fedc 	bl	8000108 <strlen>
 8000350:	0002      	movs	r2, r0
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <bootloader_get_help_cmd+0x90>)
 8000354:	0011      	movs	r1, r2
 8000356:	0018      	movs	r0, r3
 8000358:	f000 fb3a 	bl	80009d0 <bootloader_uart_write_data>
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}

}
 800035c:	e005      	b.n	800036a <bootloader_get_help_cmd+0x7e>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 800035e:	4b08      	ldr	r3, [pc, #32]	@ (8000380 <bootloader_get_help_cmd+0x94>)
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fd9f 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 8000366:	f000 fb9b 	bl	8000aa0 <bootloader_send_nack>
}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b004      	add	sp, #16
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	0800533c 	.word	0x0800533c
 8000378:	08005364 	.word	0x08005364
 800037c:	20000000 	.word	0x20000000
 8000380:	08005384 	.word	0x08005384

08000384 <bootloader_get_cid_cmd>:

void bootloader_get_cid_cmd(uint8_t *bl_rx_data)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint16_t cID = 0;
 800038c:	2412      	movs	r4, #18
 800038e:	193b      	adds	r3, r7, r4
 8000390:	2200      	movs	r2, #0
 8000392:	801a      	strh	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_get_cid_cmd \n");
 8000394:	4b21      	ldr	r3, [pc, #132]	@ (800041c <bootloader_get_cid_cmd+0x98>)
 8000396:	0018      	movs	r0, r3
 8000398:	f000 fd84 	bl	8000ea4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
	memcpy(&host_crc, bl_rx_data + command_packet_len - 4, sizeof(host_crc));
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	3b04      	subs	r3, #4
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	18d1      	adds	r1, r2, r3
 80003b0:	230c      	movs	r3, #12
 80003b2:	18fb      	adds	r3, r7, r3
 80003b4:	2204      	movs	r2, #4
 80003b6:	0018      	movs	r0, r3
 80003b8:	f004 fb24 	bl	8004a04 <memcpy>

	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	1f19      	subs	r1, r3, #4
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	0018      	movs	r0, r3
 80003c6:	f000 fb17 	bl	80009f8 <bootloader_verify_crc>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d11c      	bne.n	8000408 <bootloader_get_cid_cmd+0x84>
	{
		printMessage("BL_DEBUG_MSG: Checksum succes \n");
 80003ce:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <bootloader_get_cid_cmd+0x9c>)
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fd67 	bl	8000ea4 <printMessage>
		bootloader_send_ack(2);
 80003d6:	2002      	movs	r0, #2
 80003d8:	f000 fb46 	bl	8000a68 <bootloader_send_ack>
		cID = get_mcu_chip_id();
 80003dc:	f000 fb7a 	bl	8000ad4 <get_mcu_chip_id>
 80003e0:	0003      	movs	r3, r0
 80003e2:	001a      	movs	r2, r3
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	801a      	strh	r2, [r3, #0]
		printMessage("BL_DUBEG_MSG: STM32F072 Chip Id: %d %#x \n", cID, cID);
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	0019      	movs	r1, r3
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	001a      	movs	r2, r3
 80003f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <bootloader_get_cid_cmd+0xa0>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fd54 	bl	8000ea4 <printMessage>
		bootloader_uart_write_data((uint8_t*)&cID, 2);
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2102      	movs	r1, #2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 fae5 	bl	80009d0 <bootloader_uart_write_data>
	else
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}
}
 8000406:	e005      	b.n	8000414 <bootloader_get_cid_cmd+0x90>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <bootloader_get_cid_cmd+0xa4>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fd4a 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 8000410:	f000 fb46 	bl	8000aa0 <bootloader_send_nack>
}
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b007      	add	sp, #28
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	080053a4 	.word	0x080053a4
 8000420:	08005364 	.word	0x08005364
 8000424:	080053cc 	.word	0x080053cc
 8000428:	08005384 	.word	0x08005384

0800042c <bootloader_get_rdp_cmd>:

void bootloader_get_rdp_cmd(uint8_t *bl_rx_data)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b087      	sub	sp, #28
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uint8_t rdpLevel = 0;
 8000434:	2413      	movs	r4, #19
 8000436:	193b      	adds	r3, r7, r4
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_get_rdp_cmd \n");
 800043c:	4b21      	ldr	r3, [pc, #132]	@ (80004c4 <bootloader_get_rdp_cmd+0x98>)
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fd30 	bl	8000ea4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
	memcpy(&host_crc, bl_rx_data + command_packet_len - 4, sizeof(host_crc));
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	3b04      	subs	r3, #4
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	18d1      	adds	r1, r2, r3
 8000458:	230c      	movs	r3, #12
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	2204      	movs	r2, #4
 800045e:	0018      	movs	r0, r3
 8000460:	f004 fad0 	bl	8004a04 <memcpy>

	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1f19      	subs	r1, r3, #4
 8000468:	68fa      	ldr	r2, [r7, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fac3 	bl	80009f8 <bootloader_verify_crc>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d11c      	bne.n	80004b0 <bootloader_get_rdp_cmd+0x84>
	{
		printMessage("BL_DEBUG_MSG: Checksum succes \n");
 8000476:	4b14      	ldr	r3, [pc, #80]	@ (80004c8 <bootloader_get_rdp_cmd+0x9c>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fd13 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f000 faf2 	bl	8000a68 <bootloader_send_ack>
		rdpLevel = get_flash_rdp_level();
 8000484:	f000 fb38 	bl	8000af8 <get_flash_rdp_level>
 8000488:	0003      	movs	r3, r0
 800048a:	001a      	movs	r2, r3
 800048c:	193b      	adds	r3, r7, r4
 800048e:	701a      	strb	r2, [r3, #0]
		printMessage("BL_DEBUG_MSG: STM32F072 RDP Level: %d %#x \n", rdpLevel, rdpLevel);
 8000490:	193b      	adds	r3, r7, r4
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	0019      	movs	r1, r3
 8000496:	193b      	adds	r3, r7, r4
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	001a      	movs	r2, r3
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <bootloader_get_rdp_cmd+0xa0>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fd00 	bl	8000ea4 <printMessage>
		bootloader_uart_write_data(&rdpLevel, 1);
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2101      	movs	r1, #1
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fa91 	bl	80009d0 <bootloader_uart_write_data>
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}

}
 80004ae:	e005      	b.n	80004bc <bootloader_get_rdp_cmd+0x90>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 80004b0:	4b07      	ldr	r3, [pc, #28]	@ (80004d0 <bootloader_get_rdp_cmd+0xa4>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fcf6 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 80004b8:	f000 faf2 	bl	8000aa0 <bootloader_send_nack>
}
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b007      	add	sp, #28
 80004c2:	bd90      	pop	{r4, r7, pc}
 80004c4:	080053f8 	.word	0x080053f8
 80004c8:	08005364 	.word	0x08005364
 80004cc:	08005420 	.word	0x08005420
 80004d0:	08005384 	.word	0x08005384

080004d4 <bootloader_go_to_addr_cmd>:

void bootloader_go_to_addr_cmd(uint8_t *bl_rx_data)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b089      	sub	sp, #36	@ 0x24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	uint32_t go_to_address = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
	uint8_t addr_valid = ADDR_VALID;
 80004e0:	2413      	movs	r4, #19
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	uint8_t addr_invalid = ADDR_INVALID;
 80004e8:	2312      	movs	r3, #18
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	2201      	movs	r2, #1
 80004ee:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootlodaer_go_to_addr_cmd \n");
 80004f0:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <bootloader_go_to_addr_cmd+0xd8>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fcd6 	bl	8000ea4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	61fb      	str	r3, [r7, #28]

	uint32_t host_crc = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
	memcpy(&host_crc, bl_rx_data + command_packet_len - 4, sizeof(host_crc));
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	3b04      	subs	r3, #4
 8000508:	687a      	ldr	r2, [r7, #4]
 800050a:	18d1      	adds	r1, r2, r3
 800050c:	230c      	movs	r3, #12
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	2204      	movs	r2, #4
 8000512:	0018      	movs	r0, r3
 8000514:	f004 fa76 	bl	8004a04 <memcpy>

	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 8000518:	69fb      	ldr	r3, [r7, #28]
 800051a:	1f19      	subs	r1, r3, #4
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fa69 	bl	80009f8 <bootloader_verify_crc>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d136      	bne.n	8000598 <bootloader_go_to_addr_cmd+0xc4>
	{
		printMessage("BL_DEBUG_MSG: Checksum succes \n");
 800052a:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <bootloader_go_to_addr_cmd+0xdc>)
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fcb9 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fa98 	bl	8000a68 <bootloader_send_ack>

		memcpy(&go_to_address, &bl_rx_data[2], sizeof(go_to_address));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	1c99      	adds	r1, r3, #2
 800053c:	2314      	movs	r3, #20
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	2204      	movs	r2, #4
 8000542:	0018      	movs	r0, r3
 8000544:	f004 fa5e 	bl	8004a04 <memcpy>
		printMessage("BL_DEBUG_MSG: GO Addr: %#x \n", go_to_address);
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <bootloader_go_to_addr_cmd+0xe0>)
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fca8 	bl	8000ea4 <printMessage>

		if( bootloader_verify_address(go_to_address) == ADDR_VALID )
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fae4 	bl	8000b24 <bootloader_verify_address>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d110      	bne.n	8000582 <bootloader_go_to_addr_cmd+0xae>
		{
			bootloader_uart_write_data(&addr_valid, 1);
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2101      	movs	r1, #1
 8000564:	0018      	movs	r0, r3
 8000566:	f000 fa33 	bl	80009d0 <bootloader_uart_write_data>

			go_to_address += 1; 		// T Bit = 1
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]

			void (*lets_go_to_address)(void) = (void*) go_to_address;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	61bb      	str	r3, [r7, #24]

			printMessage("BL_DEBUG_MSG: Going to Address \n");
 8000574:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <bootloader_go_to_addr_cmd+0xe4>)
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fc94 	bl	8000ea4 <printMessage>

			lets_go_to_address();
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	4798      	blx	r3
	else
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}
}
 8000580:	e010      	b.n	80005a4 <bootloader_go_to_addr_cmd+0xd0>
			printMessage("BL_DEBUG_MSG: Go Address Invalid \n");
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <bootloader_go_to_addr_cmd+0xe8>)
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fc8d 	bl	8000ea4 <printMessage>
			bootloader_uart_write_data(&addr_invalid, 1);
 800058a:	2312      	movs	r3, #18
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	2101      	movs	r1, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fa1d 	bl	80009d0 <bootloader_uart_write_data>
}
 8000596:	e005      	b.n	80005a4 <bootloader_go_to_addr_cmd+0xd0>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <bootloader_go_to_addr_cmd+0xec>)
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fc82 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 80005a0:	f000 fa7e 	bl	8000aa0 <bootloader_send_nack>
}
 80005a4:	46c0      	nop			@ (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b009      	add	sp, #36	@ 0x24
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	0800544c 	.word	0x0800544c
 80005b0:	08005364 	.word	0x08005364
 80005b4:	08005478 	.word	0x08005478
 80005b8:	08005498 	.word	0x08005498
 80005bc:	080054bc 	.word	0x080054bc
 80005c0:	08005384 	.word	0x08005384

080005c4 <bootloader_flash_erase_cmd>:

void bootloader_flash_erase_cmd(uint8_t *bl_rx_data)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	uint8_t eraseStatus = 0;
 80005cc:	2413      	movs	r4, #19
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_flash_erase_cmd \n");
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <bootloader_flash_erase_cmd+0xbc>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fc64 	bl	8000ea4 <printMessage>

	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	617b      	str	r3, [r7, #20]

	uint32_t host_crc = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	memcpy(&host_crc, bl_rx_data + command_packet_len - 4, sizeof(host_crc));
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3b04      	subs	r3, #4
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	18d1      	adds	r1, r2, r3
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	2204      	movs	r2, #4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f004 fa04 	bl	8004a04 <memcpy>

	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	1f19      	subs	r1, r3, #4
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	0018      	movs	r0, r3
 8000606:	f000 f9f7 	bl	80009f8 <bootloader_verify_crc>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d12e      	bne.n	800066c <bootloader_flash_erase_cmd+0xa8>
	{
		printMessage("BL_DEBUG_MSG: Checksum success \n");
 800060e:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <bootloader_flash_erase_cmd+0xc0>)
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fc47 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fa26 	bl	8000a68 <bootloader_send_ack>
		printMessage("BL_DEBUG_MSG: Initial Sector: %d Nubmer Of Secotrs: %d \n", bl_rx_data[2], bl_rx_data[3]);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3302      	adds	r3, #2
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	0019      	movs	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3303      	adds	r3, #3
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	001a      	movs	r2, r3
 800062c:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <bootloader_flash_erase_cmd+0xc4>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fc38 	bl	8000ea4 <printMessage>

		eraseStatus = execute_flash_erase(bl_rx_data[2], bl_rx_data[3]);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3302      	adds	r3, #2
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3303      	adds	r3, #3
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	0019      	movs	r1, r3
 8000642:	0010      	movs	r0, r2
 8000644:	f000 fa92 	bl	8000b6c <execute_flash_erase>
 8000648:	0003      	movs	r3, r0
 800064a:	001a      	movs	r2, r3
 800064c:	193b      	adds	r3, r7, r4
 800064e:	701a      	strb	r2, [r3, #0]

		printMessage("BL_DEBUG_MSG: Flash Erase Status : %d \n", eraseStatus);
 8000650:	193b      	adds	r3, r7, r4
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	001a      	movs	r2, r3
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <bootloader_flash_erase_cmd+0xc8>)
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fc22 	bl	8000ea4 <printMessage>
		bootloader_uart_write_data(&eraseStatus, 1);
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2101      	movs	r1, #1
 8000664:	0018      	movs	r0, r3
 8000666:	f000 f9b3 	bl	80009d0 <bootloader_uart_write_data>
	else
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}
}
 800066a:	e005      	b.n	8000678 <bootloader_flash_erase_cmd+0xb4>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <bootloader_flash_erase_cmd+0xcc>)
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fc18 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 8000674:	f000 fa14 	bl	8000aa0 <bootloader_send_nack>
}
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	b007      	add	sp, #28
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	080054e0 	.word	0x080054e0
 8000684:	0800550c 	.word	0x0800550c
 8000688:	08005530 	.word	0x08005530
 800068c:	0800556c 	.word	0x0800556c
 8000690:	08005384 	.word	0x08005384

08000694 <bootloader_mem_write_cmd>:

void bootloader_mem_write_cmd(uint8_t* bl_rx_data)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b089      	sub	sp, #36	@ 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint8_t addrValid = ADDR_VALID;
 800069c:	231f      	movs	r3, #31
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	uint8_t writeStatus = 0x00;
 80006a4:	2417      	movs	r4, #23
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	uint8_t checkSum = 0;
 80006ac:	261e      	movs	r6, #30
 80006ae:	19bb      	adds	r3, r7, r6
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	uint8_t length = 0;
 80006b4:	251d      	movs	r5, #29
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]

	length = bl_rx_data[0];
 80006bc:	197b      	adds	r3, r7, r5
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	7812      	ldrb	r2, [r2, #0]
 80006c2:	701a      	strb	r2, [r3, #0]

	uint8_t payloadLength = bl_rx_data[6];
 80006c4:	231c      	movs	r3, #28
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7992      	ldrb	r2, [r2, #6]
 80006cc:	701a      	strb	r2, [r3, #0]

//	uint32_t memAddress = *((uint32_t *) ( &bl_rx_data[2]) );
	uint32_t memAddress;

	memcpy(&memAddress, &bl_rx_data[2], sizeof(memAddress));
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	1c99      	adds	r1, r3, #2
 80006d2:	2210      	movs	r2, #16
 80006d4:	18bb      	adds	r3, r7, r2
 80006d6:	2204      	movs	r2, #4
 80006d8:	0018      	movs	r0, r3
 80006da:	f004 f993 	bl	8004a04 <memcpy>
	checkSum = bl_rx_data[length];
 80006de:	197b      	adds	r3, r7, r5
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d2      	adds	r2, r2, r3
 80006e6:	19bb      	adds	r3, r7, r6
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_mem_write_cmd \n");
 80006ec:	4b2f      	ldr	r3, [pc, #188]	@ (80007ac <bootloader_mem_write_cmd+0x118>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fbd8 	bl	8000ea4 <printMessage>

//	uint32_t command_packet_len = bl_rx_data[0] + 1;

//	uint32_t host_crc = *((uint32_t*)(bl_rx_data + command_packet_len - 4));
	uint32_t host_crc = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]

	memcpy(&host_crc, &bl_rx_data[command_packet_len - 4], sizeof(uint32_t));
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	3b04      	subs	r3, #4
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	220c      	movs	r2, #12
 800070a:	18bb      	adds	r3, r7, r2
 800070c:	2204      	movs	r2, #4
 800070e:	0018      	movs	r0, r3
 8000710:	f004 f978 	bl	8004a04 <memcpy>


	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	1f19      	subs	r1, r3, #4
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	0018      	movs	r0, r3
 800071e:	f000 f96b 	bl	80009f8 <bootloader_verify_crc>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d137      	bne.n	8000796 <bootloader_mem_write_cmd+0x102>
	{
		printMessage("BL_DEBUG_MSG: Checksum success \n");
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <bootloader_mem_write_cmd+0x11c>)
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fbbb 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f000 f99a 	bl	8000a68 <bootloader_send_ack>

		printMessage("BL_DEBUG_MSG: Memory Write Address: %#x \n", memAddress);
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <bootloader_mem_write_cmd+0x120>)
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fbb2 	bl	8000ea4 <printMessage>

		if(bootloader_verify_address(memAddress) == ADDR_VALID)
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f9ee 	bl	8000b24 <bootloader_verify_address>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d116      	bne.n	800077a <bootloader_mem_write_cmd+0xe6>
		{
			printMessage("BL_DEBUG_MSG: Valid Memory Write Address \n");
 800074c:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <bootloader_mem_write_cmd+0x124>)
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fba8 	bl	8000ea4 <printMessage>

			writeStatus = execute_memory_write(&bl_rx_data[7], memAddress, payloadLength);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	1dd8      	adds	r0, r3, #7
 8000758:	6939      	ldr	r1, [r7, #16]
 800075a:	231c      	movs	r3, #28
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	001a      	movs	r2, r3
 8000762:	f000 fa4c 	bl	8000bfe <execute_memory_write>
 8000766:	0003      	movs	r3, r0
 8000768:	001a      	movs	r2, r3
 800076a:	193b      	adds	r3, r7, r4
 800076c:	701a      	strb	r2, [r3, #0]

			bootloader_uart_write_data(&writeStatus, 1);
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2101      	movs	r1, #1
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f92c 	bl	80009d0 <bootloader_uart_write_data>
	else
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}
}
 8000778:	e013      	b.n	80007a2 <bootloader_mem_write_cmd+0x10e>
			printMessage("BL_DEBUG_MSG: Invalid Memory Write Address \n");
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <bootloader_mem_write_cmd+0x128>)
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fb91 	bl	8000ea4 <printMessage>
			writeStatus = ADDR_INVALID;
 8000782:	2117      	movs	r1, #23
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
			bootloader_uart_write_data(&writeStatus, 1);
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2101      	movs	r1, #1
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f91e 	bl	80009d0 <bootloader_uart_write_data>
}
 8000794:	e005      	b.n	80007a2 <bootloader_mem_write_cmd+0x10e>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <bootloader_mem_write_cmd+0x12c>)
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fb83 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 800079e:	f000 f97f 	bl	8000aa0 <bootloader_send_nack>
}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b009      	add	sp, #36	@ 0x24
 80007a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	08005594 	.word	0x08005594
 80007b0:	0800550c 	.word	0x0800550c
 80007b4:	080055c0 	.word	0x080055c0
 80007b8:	080055ec 	.word	0x080055ec
 80007bc:	08005618 	.word	0x08005618
 80007c0:	08005384 	.word	0x08005384

080007c4 <bootloader_enable_read_write_protect_cmd>:

void bootloader_enable_read_write_protect_cmd(uint8_t* bl_rx_data)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80007cc:	2413      	movs	r4, #19
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_enable_read_write_protect_cmd \n");
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <bootloader_enable_read_write_protect_cmd+0xa8>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fb64 	bl	8000ea4 <printMessage>

	uint32_t host_crc = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]

	memcpy(&host_crc, &bl_rx_data[command_packet_len - 4], sizeof(uint32_t));
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3b04      	subs	r3, #4
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	18d1      	adds	r1, r2, r3
 80007f0:	230c      	movs	r3, #12
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	2204      	movs	r2, #4
 80007f6:	0018      	movs	r0, r3
 80007f8:	f004 f904 	bl	8004a04 <memcpy>


	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	1f19      	subs	r1, r3, #4
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	f000 f8f7 	bl	80009f8 <bootloader_verify_crc>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d124      	bne.n	8000858 <bootloader_enable_read_write_protect_cmd+0x94>
	{
		printMessage("BL_DEBUG_MSG: Checksum success \n");
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <bootloader_enable_read_write_protect_cmd+0xac>)
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fb47 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f926 	bl	8000a68 <bootloader_send_ack>

		status = configure_flash_sector_r_w_protection(bl_rx_data[2], bl_rx_data[3], 0);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3302      	adds	r3, #2
 8000820:	7818      	ldrb	r0, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3303      	adds	r3, #3
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	0019      	movs	r1, r3
 800082c:	f000 fa50 	bl	8000cd0 <configure_flash_sector_r_w_protection>
 8000830:	0003      	movs	r3, r0
 8000832:	001a      	movs	r2, r3
 8000834:	193b      	adds	r3, r7, r4
 8000836:	701a      	strb	r2, [r3, #0]

		printMessage("BL_DEBUG_MSG: Status: %d\n", status);
 8000838:	193b      	adds	r3, r7, r4
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	001a      	movs	r2, r3
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <bootloader_enable_read_write_protect_cmd+0xb0>)
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fb2e 	bl	8000ea4 <printMessage>

		bootloader_uart_write_data(&status, 1);
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2101      	movs	r1, #1
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f8bf 	bl	80009d0 <bootloader_uart_write_data>
		HAL_FLASH_OB_Launch(); //  yaptığın option byte (OB) değişikliklerini etkinleştirir ve mikrodenetleyiciyi resetler.
 8000852:	f001 fe41 	bl	80024d8 <HAL_FLASH_OB_Launch>
	else
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}
}
 8000856:	e005      	b.n	8000864 <bootloader_enable_read_write_protect_cmd+0xa0>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <bootloader_enable_read_write_protect_cmd+0xb4>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fb22 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 8000860:	f000 f91e 	bl	8000aa0 <bootloader_send_nack>
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b007      	add	sp, #28
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	08005648 	.word	0x08005648
 8000870:	0800550c 	.word	0x0800550c
 8000874:	08005684 	.word	0x08005684
 8000878:	08005384 	.word	0x08005384

0800087c <bootloader_read_sector_protection_status_cmd>:

void bootloader_read_sector_protection_status_cmd(uint8_t *bl_rx_data)
{
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint16_t status = 0;
 8000884:	2412      	movs	r4, #18
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2200      	movs	r2, #0
 800088a:	801a      	strh	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_read_sector_protection_status_cmd \n");
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <bootloader_read_sector_protection_status_cmd+0x98>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fb08 	bl	8000ea4 <printMessage>

	uint32_t host_crc = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]

	memcpy(&host_crc, &bl_rx_data[command_packet_len - 4], sizeof(uint32_t));
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	3b04      	subs	r3, #4
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	18d1      	adds	r1, r2, r3
 80008a8:	230c      	movs	r3, #12
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2204      	movs	r2, #4
 80008ae:	0018      	movs	r0, r3
 80008b0:	f004 f8a8 	bl	8004a04 <memcpy>

	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	1f19      	subs	r1, r3, #4
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 f89b 	bl	80009f8 <bootloader_verify_crc>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d11b      	bne.n	80008fe <bootloader_read_sector_protection_status_cmd+0x82>
	{
		printMessage("BL_DEBUG_MSG: Checksum success \n");
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <bootloader_read_sector_protection_status_cmd+0x9c>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 faeb 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 f8ca 	bl	8000a68 <bootloader_send_ack>

		status = read_OB_r_w_protection_status();
 80008d4:	f000 fa88 	bl	8000de8 <read_OB_r_w_protection_status>
 80008d8:	0002      	movs	r2, r0
 80008da:	000b      	movs	r3, r1
 80008dc:	b292      	uxth	r2, r2
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	801a      	strh	r2, [r3, #0]

		printMessage("BL_DEBUG_MSG: nWRP status: %#\n", status);
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	001a      	movs	r2, r3
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <bootloader_read_sector_protection_status_cmd+0xa0>)
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fad9 	bl	8000ea4 <printMessage>
		bootloader_uart_write_data((uint8_t*)&status, 2);
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2102      	movs	r1, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f86a 	bl	80009d0 <bootloader_uart_write_data>
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}

}
 80008fc:	e005      	b.n	800090a <bootloader_read_sector_protection_status_cmd+0x8e>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <bootloader_read_sector_protection_status_cmd+0xa4>)
 8000900:	0018      	movs	r0, r3
 8000902:	f000 facf 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 8000906:	f000 f8cb 	bl	8000aa0 <bootloader_send_nack>
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b007      	add	sp, #28
 8000910:	bd90      	pop	{r4, r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	080056a0 	.word	0x080056a0
 8000918:	0800550c 	.word	0x0800550c
 800091c:	080056e0 	.word	0x080056e0
 8000920:	08005384 	.word	0x08005384

08000924 <bootloader_disable_read_write_protect_cmd>:

void bootloader_disable_read_write_protect_cmd(uint8_t *bl_rx_data)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 800092c:	2413      	movs	r4, #19
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]

	printMessage("BL_DEBUG_MSG: bootloader_disable_read_write_protect_cmd \n");
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <bootloader_disable_read_write_protect_cmd+0x9c>)
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fab4 	bl	8000ea4 <printMessage>

	uint32_t host_crc = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]

	memcpy(&host_crc, &bl_rx_data[command_packet_len - 4], sizeof(uint32_t));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	3b04      	subs	r3, #4
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	18d1      	adds	r1, r2, r3
 8000950:	230c      	movs	r3, #12
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	2204      	movs	r2, #4
 8000956:	0018      	movs	r0, r3
 8000958:	f004 f854 	bl	8004a04 <memcpy>

	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc))
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	1f19      	subs	r1, r3, #4
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	0018      	movs	r0, r3
 8000966:	f000 f847 	bl	80009f8 <bootloader_verify_crc>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d11d      	bne.n	80009aa <bootloader_disable_read_write_protect_cmd+0x86>
	{
		printMessage("BL_DEBUG_MSG: Checksum success \n");
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <bootloader_disable_read_write_protect_cmd+0xa0>)
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fa97 	bl	8000ea4 <printMessage>
		bootloader_send_ack(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f000 f876 	bl	8000a68 <bootloader_send_ack>

		status = configure_flash_sector_r_w_protection(0, 0, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	2100      	movs	r1, #0
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f9a5 	bl	8000cd0 <configure_flash_sector_r_w_protection>
 8000986:	0003      	movs	r3, r0
 8000988:	001a      	movs	r2, r3
 800098a:	193b      	adds	r3, r7, r4
 800098c:	701a      	strb	r2, [r3, #0]

		printMessage("BL_DEBUG_MSG: Status: %d", status);
 800098e:	193b      	adds	r3, r7, r4
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	001a      	movs	r2, r3
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <bootloader_disable_read_write_protect_cmd+0xa4>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fa83 	bl	8000ea4 <printMessage>

		bootloader_uart_write_data(&status, 1);
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2101      	movs	r1, #1
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f814 	bl	80009d0 <bootloader_uart_write_data>
	else
	{
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
		bootloader_send_nack();
	}
}
 80009a8:	e005      	b.n	80009b6 <bootloader_disable_read_write_protect_cmd+0x92>
		printMessage("BL_DEBUG_MSG: Checksum fail \n");
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <bootloader_disable_read_write_protect_cmd+0xa8>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fa79 	bl	8000ea4 <printMessage>
		bootloader_send_nack();
 80009b2:	f000 f875 	bl	8000aa0 <bootloader_send_nack>
}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b007      	add	sp, #28
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	08005700 	.word	0x08005700
 80009c4:	0800550c 	.word	0x0800550c
 80009c8:	0800573c 	.word	0x0800573c
 80009cc:	08005384 	.word	0x08005384

080009d0 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *Buffer, uint32_t len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, Buffer, len, HAL_MAX_DELAY);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	2301      	movs	r3, #1
 80009e0:	425b      	negs	r3, r3
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <bootloader_uart_write_data+0x24>)
 80009e6:	f003 fa77 	bl	8003ed8 <HAL_UART_Transmit>
}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	20000214 	.word	0x20000214

080009f8 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc(uint8_t *Buffer, uint32_t len, uint32_t crcHost)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	uint32_t crcValue = 0xFF;
 8000a04:	23ff      	movs	r3, #255	@ 0xff
 8000a06:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

	for(uint32_t i = 0; i < len; i++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	e010      	b.n	8000a34 <bootloader_verify_crc+0x3c>
	{
			data = Buffer[i];
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	18d3      	adds	r3, r2, r3
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	617b      	str	r3, [r7, #20]
			crcValue = HAL_CRC_Accumulate(&hcrc, &data, 1);
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	18f9      	adds	r1, r7, r3
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <bootloader_verify_crc+0x6c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	0018      	movs	r0, r3
 8000a26:	f001 fadf 	bl	8001fe8 <HAL_CRC_Accumulate>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	61fb      	str	r3, [r7, #28]
	for(uint32_t i = 0; i < len; i++)
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	3301      	adds	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d3ea      	bcc.n	8000a12 <bootloader_verify_crc+0x1a>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <bootloader_verify_crc+0x6c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <bootloader_verify_crc+0x6c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2101      	movs	r1, #1
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	609a      	str	r2, [r3, #8]

	if(crcValue == crcHost)
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d101      	bne.n	8000a58 <bootloader_verify_crc+0x60>
	{
		return CRC_SUCCESS;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e000      	b.n	8000a5a <bootloader_verify_crc+0x62>
	}

	return CRC_FAIL;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b008      	add	sp, #32
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	200001f0 	.word	0x200001f0

08000a68 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t followLength)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
	uint8_t ackBuffer[2];
	ackBuffer[0] = BL_ACK_VALUE;
 8000a74:	210c      	movs	r1, #12
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	22a5      	movs	r2, #165	@ 0xa5
 8000a7a:	701a      	strb	r2, [r3, #0]
	ackBuffer[1] = followLength;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	705a      	strb	r2, [r3, #1]

	HAL_UART_Transmit(&huart1, ackBuffer, 2, HAL_MAX_DELAY);
 8000a84:	2301      	movs	r3, #1
 8000a86:	425b      	negs	r3, r3
 8000a88:	1879      	adds	r1, r7, r1
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <bootloader_send_ack+0x34>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	f003 fa23 	bl	8003ed8 <HAL_UART_Transmit>
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b004      	add	sp, #16
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	20000214 	.word	0x20000214

08000aa0 <bootloader_send_nack>:

void bootloader_send_nack()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
	uint8_t nackValue = BL_NACK_VALUE;
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	227f      	movs	r2, #127	@ 0x7f
 8000aaa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, &nackValue, 1, HAL_MAX_DELAY);
 8000aac:	2301      	movs	r3, #1
 8000aae:	425b      	negs	r3, r3
 8000ab0:	1df9      	adds	r1, r7, #7
 8000ab2:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <bootloader_send_nack+0x24>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f003 fa0f 	bl	8003ed8 <HAL_UART_Transmit>
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	20000214 	.word	0x20000214

08000ac8 <bootloader_get_version>:

uint8_t bootloader_get_version(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	return BL_VER;
 8000acc:	2310      	movs	r3, #16
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	uint16_t cID;
	cID = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <get_mcu_chip_id+0x20>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	1dbb      	adds	r3, r7, #6
 8000ae2:	0512      	lsls	r2, r2, #20
 8000ae4:	0d12      	lsrs	r2, r2, #20
 8000ae6:	801a      	strh	r2, [r3, #0]
	return cID;
 8000ae8:	1dbb      	adds	r3, r7, #6
 8000aea:	881b      	ldrh	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40015800 	.word	0x40015800

08000af8 <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b089      	sub	sp, #36	@ 0x24
 8000afc:	af00      	add	r7, sp, #0
	uint8_t rdp_level = 0;
 8000afe:	241f      	movs	r4, #31
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	rdp_level = (uint8_t)(*OB_Addr >> 8);

#else

	FLASH_OBProgramInitTypeDef OB_InitStruct;
	HAL_FLASHEx_OBGetConfig(&OB_InitStruct);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fedd 	bl	80028c8 <HAL_FLASHEx_OBGetConfig>
	rdp_level = (uint8_t) OB_InitStruct.RDPLevel;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	1d3a      	adds	r2, r7, #4
 8000b12:	7b12      	ldrb	r2, [r2, #12]
 8000b14:	701a      	strb	r2, [r3, #0]

#endif

	return rdp_level;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	781b      	ldrb	r3, [r3, #0]
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b009      	add	sp, #36	@ 0x24
 8000b20:	bd90      	pop	{r4, r7, pc}
	...

08000b24 <bootloader_verify_address>:

uint8_t bootloader_verify_address(uint32_t goAddress)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	if(goAddress >= FLASH_BASE && goAddress <= FLASH_BANK1_END)
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	2380      	movs	r3, #128	@ 0x80
 8000b30:	051b      	lsls	r3, r3, #20
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d305      	bcc.n	8000b42 <bootloader_verify_address+0x1e>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <bootloader_verify_address+0x40>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d801      	bhi.n	8000b42 <bootloader_verify_address+0x1e>
		return ADDR_VALID;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e00b      	b.n	8000b5a <bootloader_verify_address+0x36>
	else if(goAddress >= SRAM_BASE && goAddress <= SRAM_END)
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	059b      	lsls	r3, r3, #22
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d305      	bcc.n	8000b58 <bootloader_verify_address+0x34>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <bootloader_verify_address+0x44>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d801      	bhi.n	8000b58 <bootloader_verify_address+0x34>
		return ADDR_VALID;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e000      	b.n	8000b5a <bootloader_verify_address+0x36>
//	else if(goAddress >= SRAM2_BASE && goAddress <= SRAM2_END)
//		return ADDR_VALID;
//	else if(goAddress >= BKPSRAM_BASE && goAddress <= BKPSRAM_END)
//		return ADDR_VALID;
	else
		return ADDR_INVALID;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	0801ffff 	.word	0x0801ffff
 8000b68:	20004000 	.word	0x20004000

08000b6c <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sectorNumber, uint8_t numberOfSectors)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	1c0a      	adds	r2, r1, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef eraseInitStruct = {0};
 8000b7e:	230c      	movs	r3, #12
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	0018      	movs	r0, r3
 8000b84:	230c      	movs	r3, #12
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f003 ff07 	bl	800499c <memset>
    uint32_t pageError = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]

    if (sectorNumber >= TOTAL_SECTORS) {
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d901      	bls.n	8000b9e <execute_flash_erase+0x32>
        return INVALID_SECTOR;
 8000b9a:	23ff      	movs	r3, #255	@ 0xff
 8000b9c:	e02b      	b.n	8000bf6 <execute_flash_erase+0x8a>
    }

    uint32_t sectorBaseAddress = FLASH_START_ADDR + (sectorNumber * SECTOR_SIZE);
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2280      	movs	r2, #128	@ 0x80
 8000ba4:	0212      	lsls	r2, r2, #8
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	4463      	add	r3, ip
 8000baa:	031b      	lsls	r3, r3, #12
 8000bac:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 8000bae:	f001 fc35 	bl	800241c <HAL_FLASH_Unlock>

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000bb2:	210c      	movs	r1, #12
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
    eraseInitStruct.PageAddress = sectorBaseAddress;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	605a      	str	r2, [r3, #4]
    eraseInitStruct.NbPages = numberOfSectors * PAGES_PER_SECTOR; // çünkü 1 sektör = 2 page
 8000bc0:	1dbb      	adds	r3, r7, #6
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	609a      	str	r2, [r3, #8]

    status = HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 8000bcc:	251b      	movs	r5, #27
 8000bce:	197c      	adds	r4, r7, r5
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	18fa      	adds	r2, r7, r3
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 fd1f 	bl	800261c <HAL_FLASHEx_Erase>
 8000bde:	0003      	movs	r3, r0
 8000be0:	7023      	strb	r3, [r4, #0]

    HAL_FLASH_Lock();
 8000be2:	f001 fc41 	bl	8002468 <HAL_FLASH_Lock>

    if (status != HAL_OK) {
 8000be6:	197b      	adds	r3, r7, r5
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <execute_flash_erase+0x88>
        return (uint8_t)status;
 8000bee:	197b      	adds	r3, r7, r5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	e000      	b.n	8000bf6 <execute_flash_erase+0x8a>
    }

    return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b008      	add	sp, #32
 8000bfc:	bdb0      	pop	{r4, r5, r7, pc}

08000bfe <execute_memory_write>:

uint8_t execute_memory_write(uint8_t *Buffer, uint32_t memAddress, uint32_t len) // buffer ın içeriğini flash adresine yazar
{
 8000bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c00:	b089      	sub	sp, #36	@ 0x24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]

//FIXME: 8.sektöre denk gelir	0x08008000
    uint8_t status = HAL_OK;
 8000c0a:	231f      	movs	r3, #31
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
    uint32_t data;

    HAL_FLASH_Unlock();
 8000c12:	f001 fc03 	bl	800241c <HAL_FLASH_Unlock>

    for(uint32_t i = 0; i < len; i += 4)
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e049      	b.n	8000cb0 <execute_memory_write+0xb2>
    {
        // 4 byte’lık veri oluştur (little-endian)
        data = 0xFFFFFFFF; // default boş veri (eğer len % 4 != 0 ise eksikleri FF ile doldurur)
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	425b      	negs	r3, r3
 8000c20:	61bb      	str	r3, [r7, #24]
        data  = Buffer[i];
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	61bb      	str	r3, [r7, #24]
        if (i+1 < len) data |= (Buffer[i+1] << 8);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d908      	bls.n	8000c48 <execute_memory_write+0x4a>
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        if (i+2 < len) data |= (Buffer[i+2] << 16);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d908      	bls.n	8000c64 <execute_memory_write+0x66>
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	041b      	lsls	r3, r3, #16
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        if (i+3 < len) data |= (Buffer[i+3] << 24);
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3303      	adds	r3, #3
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d908      	bls.n	8000c80 <execute_memory_write+0x82>
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3303      	adds	r3, #3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	061b      	lsls	r3, r3, #24
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, memAddress + i, data);
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	18d1      	adds	r1, r2, r3
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	001c      	movs	r4, r3
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	001d      	movs	r5, r3
 8000c8e:	231f      	movs	r3, #31
 8000c90:	18fe      	adds	r6, r7, r3
 8000c92:	0022      	movs	r2, r4
 8000c94:	002b      	movs	r3, r5
 8000c96:	2002      	movs	r0, #2
 8000c98:	f001 fb2a 	bl	80022f0 <HAL_FLASH_Program>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	7033      	strb	r3, [r6, #0]
        if(status != HAL_OK)
 8000ca0:	231f      	movs	r3, #31
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d107      	bne.n	8000cba <execute_memory_write+0xbc>
    for(uint32_t i = 0; i < len; i += 4)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3304      	adds	r3, #4
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3b1      	bcc.n	8000c1c <execute_memory_write+0x1e>
 8000cb8:	e000      	b.n	8000cbc <execute_memory_write+0xbe>
            break; // hata olursa döngüden çık
 8000cba:	46c0      	nop			@ (mov r8, r8)
    }

    HAL_FLASH_Lock();
 8000cbc:	f001 fbd4 	bl	8002468 <HAL_FLASH_Lock>

    return status;
 8000cc0:	231f      	movs	r3, #31
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b009      	add	sp, #36	@ 0x24
 8000ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000cd0 <configure_flash_sector_r_w_protection>:

uint8_t configure_flash_sector_r_w_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t enableOrDisable)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b08b      	sub	sp, #44	@ 0x2c
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	0004      	movs	r4, r0
 8000cd8:	0008      	movs	r0, r1
 8000cda:	0011      	movs	r1, r2
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	1c22      	adds	r2, r4, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	1c02      	adds	r2, r0, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	1d7b      	adds	r3, r7, #5
 8000cea:	1c0a      	adds	r2, r1, #0
 8000cec:	701a      	strb	r2, [r3, #0]




    FLASH_OBProgramInitTypeDef obInit;
    uint32_t wrp_pages = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t status = 0;
 8000cf2:	2423      	movs	r4, #35	@ 0x23
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]


	if(enableOrDisable)
 8000cfa:	1d7b      	adds	r3, r7, #5
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d01e      	beq.n	8000d40 <configure_flash_sector_r_w_protection+0x70>
	{
	    HAL_FLASH_Unlock();
 8000d02:	f001 fb8b 	bl	800241c <HAL_FLASH_Unlock>
	    HAL_FLASH_OB_Unlock();
 8000d06:	f001 fbbd 	bl	8002484 <HAL_FLASH_OB_Unlock>


	    obInit.OptionType = OPTIONBYTE_WRP;
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
	    obInit.WRPPage = 0xFFFF;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	4a33      	ldr	r2, [pc, #204]	@ (8000de4 <configure_flash_sector_r_w_protection+0x114>)
 8000d16:	609a      	str	r2, [r3, #8]
	    obInit.WRPState = OB_WRPSTATE_DISABLE;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]

	    if (HAL_FLASHEx_OBProgram(&obInit) != HAL_OK)
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	0018      	movs	r0, r3
 8000d22:	f001 fd3f 	bl	80027a4 <HAL_FLASHEx_OBProgram>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d002      	beq.n	8000d30 <configure_flash_sector_r_w_protection+0x60>
	        status = 2;
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	701a      	strb	r2, [r3, #0]


	    HAL_FLASH_OB_Lock();
 8000d30:	f001 fbc2 	bl	80024b8 <HAL_FLASH_OB_Lock>
	    HAL_FLASH_Lock();
 8000d34:	f001 fb98 	bl	8002468 <HAL_FLASH_Lock>

	    return status;
 8000d38:	2323      	movs	r3, #35	@ 0x23
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	e04c      	b.n	8000dda <configure_flash_sector_r_w_protection+0x10a>
	}


    if (sector_details > 63 || protection_mode != 1)
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d46:	d803      	bhi.n	8000d50 <configure_flash_sector_r_w_protection+0x80>
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d004      	beq.n	8000d5a <configure_flash_sector_r_w_protection+0x8a>
        status = 1;
 8000d50:	2323      	movs	r3, #35	@ 0x23
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	2201      	movs	r2, #1
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	e03c      	b.n	8000dd4 <configure_flash_sector_r_w_protection+0x104>
    else
    {
        for (uint8_t i = 0; i <= sector_details; i++)
 8000d5a:	2322      	movs	r3, #34	@ 0x22
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e00d      	b.n	8000d80 <configure_flash_sector_r_w_protection+0xb0>
            wrp_pages |= (1U << i);
 8000d64:	2122      	movs	r1, #34	@ 0x22
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d72:	4313      	orrs	r3, r2
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t i = 0; i <= sector_details; i++)
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	3201      	adds	r2, #1
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	2322      	movs	r3, #34	@ 0x22
 8000d82:	18fa      	adds	r2, r7, r3
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d9ea      	bls.n	8000d64 <configure_flash_sector_r_w_protection+0x94>

        HAL_FLASH_Unlock();
 8000d8e:	f001 fb45 	bl	800241c <HAL_FLASH_Unlock>
        HAL_FLASH_OB_Unlock();
 8000d92:	f001 fb77 	bl	8002484 <HAL_FLASH_OB_Unlock>

        obInit.OptionType = OPTIONBYTE_WRP;
 8000d96:	2108      	movs	r1, #8
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
        obInit.WRPPage = wrp_pages;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000da2:	609a      	str	r2, [r3, #8]
        obInit.WRPState = (enableOrDisable == 0) ? OB_WRPSTATE_ENABLE : OB_WRPSTATE_DISABLE;
 8000da4:	1d7b      	adds	r3, r7, #5
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <configure_flash_sector_r_w_protection+0xe0>
 8000dac:	2201      	movs	r2, #1
 8000dae:	e000      	b.n	8000db2 <configure_flash_sector_r_w_protection+0xe2>
 8000db0:	2200      	movs	r2, #0
 8000db2:	2108      	movs	r1, #8
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	605a      	str	r2, [r3, #4]

        if (HAL_FLASHEx_OBProgram(&obInit) != HAL_OK)
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 fcf2 	bl	80027a4 <HAL_FLASHEx_OBProgram>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d003      	beq.n	8000dcc <configure_flash_sector_r_w_protection+0xfc>
            status = 3;
 8000dc4:	2323      	movs	r3, #35	@ 0x23
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2203      	movs	r2, #3
 8000dca:	701a      	strb	r2, [r3, #0]

        HAL_FLASH_OB_Lock();
 8000dcc:	f001 fb74 	bl	80024b8 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000dd0:	f001 fb4a 	bl	8002468 <HAL_FLASH_Lock>
    }


    return status;
 8000dd4:	2323      	movs	r3, #35	@ 0x23
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	781b      	ldrb	r3, [r3, #0]
	//
	//		return 0;
	//	}

//	return 0;
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b00b      	add	sp, #44	@ 0x2c
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	0000ffff 	.word	0x0000ffff

08000de8 <read_OB_r_w_protection_status>:

uint64_t read_OB_r_w_protection_status(void)
{
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	b08d      	sub	sp, #52	@ 0x34
 8000dec:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef obInit;
    uint64_t page_status = 0;
 8000dee:	2200      	movs	r2, #0
 8000df0:	2300      	movs	r3, #0
 8000df2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    HAL_FLASH_OB_Unlock();
 8000df6:	f001 fb45 	bl	8002484 <HAL_FLASH_OB_Unlock>
    HAL_FLASHEx_OBGetConfig(&obInit);
 8000dfa:	2608      	movs	r6, #8
 8000dfc:	19bb      	adds	r3, r7, r6
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fd62 	bl	80028c8 <HAL_FLASHEx_OBGetConfig>
    HAL_FLASH_OB_Lock();
 8000e04:	f001 fb58 	bl	80024b8 <HAL_FLASH_OB_Lock>

    uint32_t wrp_pages = obInit.WRPPage;
 8000e08:	0032      	movs	r2, r6
 8000e0a:	18bb      	adds	r3, r7, r2
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	623b      	str	r3, [r7, #32]

    for (uint8_t page = 0; page < 64; page++)
 8000e10:	231f      	movs	r3, #31
 8000e12:	189b      	adds	r3, r3, r2
 8000e14:	19db      	adds	r3, r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e034      	b.n	8000e86 <read_OB_r_w_protection_status+0x9e>
    {
        // Bit 0: korumalı, Bit 1: açık
        if (((wrp_pages >> page) & 0x1) == 0)
 8000e1c:	211f      	movs	r1, #31
 8000e1e:	2008      	movs	r0, #8
 8000e20:	180b      	adds	r3, r1, r0
 8000e22:	19db      	adds	r3, r3, r7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	6a3a      	ldr	r2, [r7, #32]
 8000e28:	40da      	lsrs	r2, r3
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4013      	ands	r3, r2
 8000e30:	d120      	bne.n	8000e74 <read_OB_r_w_protection_status+0x8c>
        {
            page_status |= ((uint64_t)1 << page);  // page korumalı
 8000e32:	180b      	adds	r3, r1, r0
 8000e34:	19db      	adds	r3, r3, r7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	3a20      	subs	r2, #32
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	db03      	blt.n	8000e48 <read_OB_r_w_protection_status+0x60>
 8000e40:	2101      	movs	r1, #1
 8000e42:	4091      	lsls	r1, r2
 8000e44:	000d      	movs	r5, r1
 8000e46:	e008      	b.n	8000e5a <read_OB_r_w_protection_status+0x72>
 8000e48:	2220      	movs	r2, #32
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	40d1      	lsrs	r1, r2
 8000e50:	000a      	movs	r2, r1
 8000e52:	2100      	movs	r1, #0
 8000e54:	4099      	lsls	r1, r3
 8000e56:	000d      	movs	r5, r1
 8000e58:	4315      	orrs	r5, r2
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0014      	movs	r4, r2
 8000e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e62:	4323      	orrs	r3, r4
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e68:	432b      	orrs	r3, r5
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (uint8_t page = 0; page < 64; page++)
 8000e74:	211f      	movs	r1, #31
 8000e76:	2008      	movs	r0, #8
 8000e78:	180b      	adds	r3, r1, r0
 8000e7a:	19db      	adds	r3, r3, r7
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	180b      	adds	r3, r1, r0
 8000e80:	19db      	adds	r3, r3, r7
 8000e82:	3201      	adds	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	231f      	movs	r3, #31
 8000e88:	2208      	movs	r2, #8
 8000e8a:	189b      	adds	r3, r3, r2
 8000e8c:	19db      	adds	r3, r3, r7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e92:	d9c3      	bls.n	8000e1c <read_OB_r_w_protection_status+0x34>
        }
    }

    return page_status;
 8000e94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e98:	0010      	movs	r0, r2
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b00d      	add	sp, #52	@ 0x34
 8000ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000ea4 <printMessage>:
//        JumpToApplication();
//    }
}

void printMessage(char *format,...)
{
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b09a      	sub	sp, #104	@ 0x68
 8000eaa:	af00      	add	r7, sp, #0
	char commingMessage[100];
	va_list vaList;

	va_start(vaList,format);
 8000eac:	2374      	movs	r3, #116	@ 0x74
 8000eae:	18fb      	adds	r3, r7, r3
 8000eb0:	603b      	str	r3, [r7, #0]
	vsprintf(commingMessage,format,vaList);
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f003 fd63 	bl	8004984 <vsiprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)commingMessage, strlen(commingMessage), HAL_MAX_DELAY);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff f921 	bl	8000108 <strlen>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	2301      	movs	r3, #1
 8000ecc:	425b      	negs	r3, r3
 8000ece:	1d39      	adds	r1, r7, #4
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <printMessage+0x40>)
 8000ed2:	f003 f801 	bl	8003ed8 <HAL_UART_Transmit>
	va_end(vaList);

// #include <stdarg.h> // remember!!!

}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b01a      	add	sp, #104	@ 0x68
 8000edc:	bc80      	pop	{r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4718      	bx	r3
 8000ee4:	2000029c 	.word	0x2000029c

08000ee8 <bootloader_uart_data_read>:

void bootloader_uart_data_read(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
//
//		}
//
//	}

		uint8_t bl_rx_length = 0;
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]

		while(1)
		{
			memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 8000ef4:	2396      	movs	r3, #150	@ 0x96
 8000ef6:	005a      	lsls	r2, r3, #1
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	0018      	movs	r0, r3
 8000efe:	f003 fd4d 	bl	800499c <memset>

			HAL_UART_Receive(&huart1, bootloader_rx_data, 1, HAL_MAX_DELAY);
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	4927      	ldr	r1, [pc, #156]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f08:	4827      	ldr	r0, [pc, #156]	@ (8000fa8 <bootloader_uart_data_read+0xc0>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f003 f884 	bl	8004018 <HAL_UART_Receive>

			bl_rx_length = bootloader_rx_data[0];
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	4a24      	ldr	r2, [pc, #144]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive(&huart1, &bootloader_rx_data[1], bl_rx_length, HAL_MAX_DELAY);
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	2301      	movs	r3, #1
 8000f20:	425b      	negs	r3, r3
 8000f22:	4922      	ldr	r1, [pc, #136]	@ (8000fac <bootloader_uart_data_read+0xc4>)
 8000f24:	4820      	ldr	r0, [pc, #128]	@ (8000fa8 <bootloader_uart_data_read+0xc0>)
 8000f26:	f003 f877 	bl	8004018 <HAL_UART_Receive>

			switch(bootloader_rx_data[1])
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	3b51      	subs	r3, #81	@ 0x51
 8000f30:	2b0b      	cmp	r3, #11
 8000f32:	d8df      	bhi.n	8000ef4 <bootloader_uart_data_read+0xc>
 8000f34:	009a      	lsls	r2, r3, #2
 8000f36:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <bootloader_uart_data_read+0xc8>)
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	469f      	mov	pc, r3
			{
				case BL_GET_VER:
					bootloader_get_ver_cmd(bootloader_rx_data);
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff f97f 	bl	8000244 <bootloader_get_ver_cmd>
				break;
 8000f46:	e02c      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_GET_HELP:
					bootloader_get_help_cmd(bootloader_rx_data);
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff f9ce 	bl	80002ec <bootloader_get_help_cmd>
					break;
 8000f50:	e027      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_GET_CID:
					bootloader_get_cid_cmd(bootloader_rx_data);
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fa15 	bl	8000384 <bootloader_get_cid_cmd>
					break;
 8000f5a:	e022      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_GET_RDP_STATUS:
					bootloader_get_rdp_cmd(bootloader_rx_data);
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff fa64 	bl	800042c <bootloader_get_rdp_cmd>
					break;
 8000f64:	e01d      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_GO_TO_ADDR:
					bootloader_go_to_addr_cmd(bootloader_rx_data);
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff fab3 	bl	80004d4 <bootloader_go_to_addr_cmd>
					break;
 8000f6e:	e018      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_FLASH_ERASE:
					bootloader_flash_erase_cmd(bootloader_rx_data);
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fb26 	bl	80005c4 <bootloader_flash_erase_cmd>
					break;
 8000f78:	e013      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_MEM_WRITE:
					bootloader_mem_write_cmd(bootloader_rx_data);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff fb89 	bl	8000694 <bootloader_mem_write_cmd>
					break;
 8000f82:	e00e      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_EN_RW_PROTECT:
					bootloader_enable_read_write_protect_cmd(bootloader_rx_data);
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff fc1c 	bl	80007c4 <bootloader_enable_read_write_protect_cmd>
					break;
 8000f8c:	e009      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_READ_SECTOR_P_STATUS:
					bootloader_read_sector_protection_status_cmd(bootloader_rx_data);
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fc73 	bl	800087c <bootloader_read_sector_protection_status_cmd>
					break;
 8000f96:	e004      	b.n	8000fa2 <bootloader_uart_data_read+0xba>
				case BL_DIS_R_W_PROTECT:
					bootloader_disable_read_write_protect_cmd(bootloader_rx_data);
 8000f98:	4b02      	ldr	r3, [pc, #8]	@ (8000fa4 <bootloader_uart_data_read+0xbc>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff fcc2 	bl	8000924 <bootloader_disable_read_write_protect_cmd>
					break;
 8000fa0:	46c0      	nop			@ (mov r8, r8)
			memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 8000fa2:	e7a7      	b.n	8000ef4 <bootloader_uart_data_read+0xc>
 8000fa4:	20000084 	.word	0x20000084
 8000fa8:	20000214 	.word	0x20000214
 8000fac:	20000085 	.word	0x20000085
 8000fb0:	08005850 	.word	0x08005850

08000fb4 <bootloader_jump_to_user_application>:


}
static volatile uint32_t resetValue;
void bootloader_jump_to_user_application(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
	void (*bootloader_application_reset_handler)(void); // reset fonksiyonunun adresini tutacak
	printMessage("BL DEBUG MSG:Bootloader atlama fonksiyonu cagirildi\n");
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <bootloader_jump_to_user_application+0x64>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ff71 	bl	8000ea4 <printMessage>
	uint32_t mspValue = *(volatile uint32_t *) FLASH_SECTOR2_BASE_ADDRESS ; // msp değerini taban adresten çekip içindeki değeri aldık
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <bootloader_jump_to_user_application+0x68>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	60fb      	str	r3, [r7, #12]
	printMessage("BL DEBUG MSG:MSP Degeri %#x\n",mspValue);
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <bootloader_jump_to_user_application+0x6c>)
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff ff68 	bl	8000ea4 <printMessage>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f383 8808 	msr	MSP, r3
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
	__set_MSP(mspValue) ; // msp nin yeni değerini set ettik

	 resetValue = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS+4) ; // hatırla,msp den sonra reset handler in değeri geliyordu iki adres arasında 4 fark oluyordu
 8000fe0:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <bootloader_jump_to_user_application+0x70>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <bootloader_jump_to_user_application+0x74>)
 8000fe6:	601a      	str	r2, [r3, #0]
	printMessage("BL DEBUG MSG:Reset Degeri %#x\n",resetValue);
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <bootloader_jump_to_user_application+0x74>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <bootloader_jump_to_user_application+0x78>)
 8000fee:	0011      	movs	r1, r2
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff ff57 	bl	8000ea4 <printMessage>

	bootloader_application_reset_handler = (void*) resetValue ; // yukarıdaki fonksiyona reset handlerin bulunduğu fonksiyonun adresini verdik,bu fonk onun reset h. ın adresini gösterir
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <bootloader_jump_to_user_application+0x74>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60bb      	str	r3, [r7, #8]

	bootloader_application_reset_handler(); //reset handler çalışır
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4798      	blx	r3
	printMessage("BL DEBUG MSG:oldu %#x\n",resetValue);
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <bootloader_jump_to_user_application+0x74>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <bootloader_jump_to_user_application+0x7c>)
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff ff4b 	bl	8000ea4 <printMessage>


}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b004      	add	sp, #16
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	08005758 	.word	0x08005758
 800101c:	08008000 	.word	0x08008000
 8001020:	08005790 	.word	0x08005790
 8001024:	08008004 	.word	0x08008004
 8001028:	200003ac 	.word	0x200003ac
 800102c:	080057b0 	.word	0x080057b0
 8001030:	080057d0 	.word	0x080057d0

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fc0a 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f82c 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f9ae 	bl	80013a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001044:	f000 f94c 	bl	80012e0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001048:	f000 f88e 	bl	8001168 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f918 	bl	8001280 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001050:	f000 f8f2 	bl	8001238 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8001054:	f000 f974 	bl	8001340 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

 if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET)
 8001058:	2380      	movs	r3, #128	@ 0x80
 800105a:	019b      	lsls	r3, r3, #6
 800105c:	4a0b      	ldr	r2, [pc, #44]	@ (800108c <main+0x58>)
 800105e:	0019      	movs	r1, r3
 8001060:	0010      	movs	r0, r2
 8001062:	f002 f8bb 	bl	80031dc <HAL_GPIO_ReadPin>
 8001066:	0003      	movs	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d006      	beq.n	800107a <main+0x46>
 {
	 printMessage("BL DEBUG MSG: Butona Basildi,Bootloader'a Gidiliyor\n");
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <main+0x5c>)
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff ff18 	bl	8000ea4 <printMessage>

	 bootloader_uart_data_read();
 8001074:	f7ff ff38 	bl	8000ee8 <bootloader_uart_data_read>
 8001078:	e006      	b.n	8001088 <main+0x54>
 }
 else
 {
	 printMessage("BL DEBUG MSG: Butona Basilmadi!\n");
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <main+0x60>)
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ff11 	bl	8000ea4 <printMessage>

	 bootloader_jump_to_user_application();
 8001082:	f7ff ff97 	bl	8000fb4 <bootloader_jump_to_user_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001086:	46c0      	nop			@ (mov r8, r8)
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	e7fd      	b.n	8001088 <main+0x54>
 800108c:	48000800 	.word	0x48000800
 8001090:	080057e8 	.word	0x080057e8
 8001094:	08005820 	.word	0x08005820

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b099      	sub	sp, #100	@ 0x64
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	242c      	movs	r4, #44	@ 0x2c
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	0018      	movs	r0, r3
 80010a4:	2334      	movs	r3, #52	@ 0x34
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f003 fc77 	bl	800499c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ae:	231c      	movs	r3, #28
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	0018      	movs	r0, r3
 80010b4:	2310      	movs	r3, #16
 80010b6:	001a      	movs	r2, r3
 80010b8:	2100      	movs	r1, #0
 80010ba:	f003 fc6f 	bl	800499c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010be:	003b      	movs	r3, r7
 80010c0:	0018      	movs	r0, r3
 80010c2:	231c      	movs	r3, #28
 80010c4:	001a      	movs	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	f003 fc68 	bl	800499c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80010cc:	0021      	movs	r1, r4
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2211      	movs	r2, #17
 80010d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2201      	movs	r2, #1
 80010d8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2210      	movs	r2, #16
 80010e4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2202      	movs	r2, #2
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	0252      	lsls	r2, r2, #9
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	22a0      	movs	r2, #160	@ 0xa0
 80010f8:	0392      	lsls	r2, r2, #14
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2201      	movs	r2, #1
 8001100:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	187b      	adds	r3, r7, r1
 8001104:	0018      	movs	r0, r3
 8001106:	f002 f8a3 	bl	8003250 <HAL_RCC_OscConfig>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800110e:	f000 f9af 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	211c      	movs	r1, #28
 8001114:	187b      	adds	r3, r7, r1
 8001116:	2207      	movs	r2, #7
 8001118:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	187b      	adds	r3, r7, r1
 800111c:	2202      	movs	r2, #2
 800111e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2280      	movs	r2, #128	@ 0x80
 8001124:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2101      	movs	r1, #1
 8001130:	0018      	movs	r0, r3
 8001132:	f002 fc13 	bl	800395c <HAL_RCC_ClockConfig>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800113a:	f000 f999 	bl	8001470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800113e:	003b      	movs	r3, r7
 8001140:	2203      	movs	r2, #3
 8001142:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001144:	003b      	movs	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800114a:	003b      	movs	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001150:	003b      	movs	r3, r7
 8001152:	0018      	movs	r0, r3
 8001154:	f002 fd6e 	bl	8003c34 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800115c:	f000 f988 	bl	8001470 <Error_Handler>
  }
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b019      	add	sp, #100	@ 0x64
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	0018      	movs	r0, r3
 8001172:	230c      	movs	r3, #12
 8001174:	001a      	movs	r2, r3
 8001176:	2100      	movs	r1, #0
 8001178:	f003 fc10 	bl	800499c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <MX_ADC_Init+0xc8>)
 800117e:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <MX_ADC_Init+0xcc>)
 8001180:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001182:	4b2b      	ldr	r3, [pc, #172]	@ (8001230 <MX_ADC_Init+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <MX_ADC_Init+0xc8>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118e:	4b28      	ldr	r3, [pc, #160]	@ (8001230 <MX_ADC_Init+0xc8>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <MX_ADC_Init+0xc8>)
 8001196:	2201      	movs	r2, #1
 8001198:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b25      	ldr	r3, [pc, #148]	@ (8001230 <MX_ADC_Init+0xc8>)
 800119c:	2204      	movs	r2, #4
 800119e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80011a6:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80011ac:	4b20      	ldr	r3, [pc, #128]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011ba:	22c2      	movs	r2, #194	@ 0xc2
 80011bc:	32ff      	adds	r2, #255	@ 0xff
 80011be:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011c8:	2224      	movs	r2, #36	@ 0x24
 80011ca:	2100      	movs	r1, #0
 80011cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fb9e 	bl	8001918 <HAL_ADC_Init>
 80011dc:	1e03      	subs	r3, r0, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80011e0:	f000 f946 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2280      	movs	r2, #128	@ 0x80
 80011ee:	0152      	lsls	r2, r2, #5
 80011f0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	0552      	lsls	r2, r2, #21
 80011f8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011fa:	1d3a      	adds	r2, r7, #4
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_ADC_Init+0xc8>)
 80011fe:	0011      	movs	r1, r2
 8001200:	0018      	movs	r0, r3
 8001202:	f000 fcc9 	bl	8001b98 <HAL_ADC_ConfigChannel>
 8001206:	1e03      	subs	r3, r0, #0
 8001208:	d001      	beq.n	800120e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800120a:	f000 f931 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2211      	movs	r2, #17
 8001212:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001214:	1d3a      	adds	r2, r7, #4
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_ADC_Init+0xc8>)
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fcbc 	bl	8001b98 <HAL_ADC_ConfigChannel>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8001224:	f000 f924 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001228:	46c0      	nop			@ (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001b0 	.word	0x200001b0
 8001234:	40012400 	.word	0x40012400

08001238 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_CRC_Init+0x40>)
 800123e:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <MX_CRC_Init+0x44>)
 8001240:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <MX_CRC_Init+0x40>)
 8001244:	2200      	movs	r2, #0
 8001246:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001248:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_CRC_Init+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <MX_CRC_Init+0x40>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_CRC_Init+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <MX_CRC_Init+0x40>)
 800125c:	2201      	movs	r2, #1
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <MX_CRC_Init+0x40>)
 8001262:	0018      	movs	r0, r3
 8001264:	f000 fe5a 	bl	8001f1c <HAL_CRC_Init>
 8001268:	1e03      	subs	r3, r0, #0
 800126a:	d001      	beq.n	8001270 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800126c:	f000 f900 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	200001f0 	.word	0x200001f0
 800127c:	40023000 	.word	0x40023000

08001280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <MX_USART1_UART_Init+0x5c>)
 8001288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 800128c:	22e1      	movs	r2, #225	@ 0xe1
 800128e:	0252      	lsls	r2, r2, #9
 8001290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c2:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <MX_USART1_UART_Init+0x58>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f002 fdb3 	bl	8003e30 <HAL_UART_Init>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 f8cf 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000214 	.word	0x20000214
 80012dc:	40013800 	.word	0x40013800

080012e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	@ (800133c <MX_USART2_UART_Init+0x5c>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 80012ec:	22e1      	movs	r2, #225	@ 0xe1
 80012ee:	0252      	lsls	r2, r2, #9
 80012f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <MX_USART2_UART_Init+0x58>)
 8001324:	0018      	movs	r0, r3
 8001326:	f002 fd83 	bl	8003e30 <HAL_UART_Init>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d001      	beq.n	8001332 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800132e:	f000 f89f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000029c 	.word	0x2000029c
 800133c:	40004400 	.word	0x40004400

08001340 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <MX_USART3_UART_Init+0x5c>)
 8001348:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 800134c:	22e1      	movs	r2, #225	@ 0xe1
 800134e:	0252      	lsls	r2, r2, #9
 8001350:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <MX_USART3_UART_Init+0x58>)
 8001384:	0018      	movs	r0, r3
 8001386:	f002 fd53 	bl	8003e30 <HAL_UART_Init>
 800138a:	1e03      	subs	r3, r0, #0
 800138c:	d001      	beq.n	8001392 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800138e:	f000 f86f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000324 	.word	0x20000324
 800139c:	40004800 	.word	0x40004800

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	240c      	movs	r4, #12
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	0018      	movs	r0, r3
 80013ac:	2314      	movs	r3, #20
 80013ae:	001a      	movs	r2, r3
 80013b0:	2100      	movs	r1, #0
 80013b2:	f003 faf3 	bl	800499c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013bc:	2180      	movs	r1, #128	@ 0x80
 80013be:	0309      	lsls	r1, r1, #12
 80013c0:	430a      	orrs	r2, r1
 80013c2:	615a      	str	r2, [r3, #20]
 80013c4:	4b28      	ldr	r3, [pc, #160]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013c6:	695a      	ldr	r2, [r3, #20]
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	031b      	lsls	r3, r3, #12
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	03c9      	lsls	r1, r1, #15
 80013dc:	430a      	orrs	r2, r1
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013e2:	695a      	ldr	r2, [r3, #20]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	03db      	lsls	r3, r3, #15
 80013e8:	4013      	ands	r3, r2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013f4:	2180      	movs	r1, #128	@ 0x80
 80013f6:	0289      	lsls	r1, r1, #10
 80013f8:	430a      	orrs	r2, r1
 80013fa:	615a      	str	r2, [r3, #20]
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013fe:	695a      	ldr	r2, [r3, #20]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	029b      	lsls	r3, r3, #10
 8001404:	4013      	ands	r3, r2
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800140a:	2390      	movs	r3, #144	@ 0x90
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	2200      	movs	r2, #0
 8001410:	2120      	movs	r1, #32
 8001412:	0018      	movs	r0, r3
 8001414:	f001 feff 	bl	8003216 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	0192      	lsls	r2, r2, #6
 800141e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	193b      	adds	r3, r7, r4
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	2201      	movs	r2, #1
 800142a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	193b      	adds	r3, r7, r4
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <MX_GPIO_Init+0xcc>)
 8001430:	0019      	movs	r1, r3
 8001432:	0010      	movs	r0, r2
 8001434:	f001 fd5a 	bl	8002eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001438:	0021      	movs	r1, r4
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2220      	movs	r2, #32
 800143e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2201      	movs	r2, #1
 8001444:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001452:	187a      	adds	r2, r7, r1
 8001454:	2390      	movs	r3, #144	@ 0x90
 8001456:	05db      	lsls	r3, r3, #23
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f001 fd46 	bl	8002eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001460:	46c0      	nop			@ (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b009      	add	sp, #36	@ 0x24
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	48000800 	.word	0x48000800

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	46c0      	nop			@ (mov r8, r8)
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_MspInit+0x44>)
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_MspInit+0x44>)
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	619a      	str	r2, [r3, #24]
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_MspInit+0x44>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2201      	movs	r2, #1
 8001494:	4013      	ands	r3, r2
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_MspInit+0x44>)
 800149c:	69da      	ldr	r2, [r3, #28]
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_MspInit+0x44>)
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	0549      	lsls	r1, r1, #21
 80014a4:	430a      	orrs	r2, r1
 80014a6:	61da      	str	r2, [r3, #28]
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_MspInit+0x44>)
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	2380      	movs	r3, #128	@ 0x80
 80014ae:	055b      	lsls	r3, r3, #21
 80014b0:	4013      	ands	r3, r2
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b08b      	sub	sp, #44	@ 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	2414      	movs	r4, #20
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	0018      	movs	r0, r3
 80014d2:	2314      	movs	r3, #20
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f003 fa60 	bl	800499c <memset>
  if(hadc->Instance==ADC1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_ADC_MspInit+0x84>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12b      	bne.n	800153e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_ADC_MspInit+0x88>)
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_ADC_MspInit+0x88>)
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	0089      	lsls	r1, r1, #2
 80014f0:	430a      	orrs	r2, r1
 80014f2:	619a      	str	r2, [r3, #24]
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_ADC_MspInit+0x88>)
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_ADC_MspInit+0x88>)
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <HAL_ADC_MspInit+0x88>)
 8001508:	2180      	movs	r1, #128	@ 0x80
 800150a:	0289      	lsls	r1, r1, #10
 800150c:	430a      	orrs	r2, r1
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <HAL_ADC_MspInit+0x88>)
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	029b      	lsls	r3, r3, #10
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2202      	movs	r2, #2
 8001522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	193b      	adds	r3, r7, r4
 8001526:	2203      	movs	r2, #3
 8001528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	193b      	adds	r3, r7, r4
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	193a      	adds	r2, r7, r4
 8001532:	2390      	movs	r3, #144	@ 0x90
 8001534:	05db      	lsls	r3, r3, #23
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f001 fcd7 	bl	8002eec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b00b      	add	sp, #44	@ 0x2c
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	40012400 	.word	0x40012400
 800154c:	40021000 	.word	0x40021000

08001550 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_CRC_MspInit+0x34>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10b      	bne.n	800157a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_CRC_MspInit+0x38>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_CRC_MspInit+0x38>)
 8001568:	2140      	movs	r1, #64	@ 0x40
 800156a:	430a      	orrs	r2, r1
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_CRC_MspInit+0x38>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	2240      	movs	r2, #64	@ 0x40
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	40023000 	.word	0x40023000
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08f      	sub	sp, #60	@ 0x3c
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	2424      	movs	r4, #36	@ 0x24
 8001596:	193b      	adds	r3, r7, r4
 8001598:	0018      	movs	r0, r3
 800159a:	2314      	movs	r3, #20
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f003 f9fc 	bl	800499c <memset>
  if(huart->Instance==USART1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a61      	ldr	r2, [pc, #388]	@ (8001730 <HAL_UART_MspInit+0x1a4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d134      	bne.n	8001618 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015ae:	4b61      	ldr	r3, [pc, #388]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80015b0:	699a      	ldr	r2, [r3, #24]
 80015b2:	4b60      	ldr	r3, [pc, #384]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	01c9      	lsls	r1, r1, #7
 80015b8:	430a      	orrs	r2, r1
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80015be:	699a      	ldr	r2, [r3, #24]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	01db      	lsls	r3, r3, #7
 80015c4:	4013      	ands	r3, r2
 80015c6:	623b      	str	r3, [r7, #32]
 80015c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	4b59      	ldr	r3, [pc, #356]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	0289      	lsls	r1, r1, #10
 80015d4:	430a      	orrs	r2, r1
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	22c0      	movs	r2, #192	@ 0xc0
 80015ea:	00d2      	lsls	r2, r2, #3
 80015ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	0021      	movs	r1, r4
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2202      	movs	r2, #2
 80015f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2203      	movs	r2, #3
 8001600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2201      	movs	r2, #1
 8001606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	187a      	adds	r2, r7, r1
 800160a:	2390      	movs	r3, #144	@ 0x90
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	0011      	movs	r1, r2
 8001610:	0018      	movs	r0, r3
 8001612:	f001 fc6b 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001616:	e086      	b.n	8001726 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a46      	ldr	r2, [pc, #280]	@ (8001738 <HAL_UART_MspInit+0x1ac>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d14a      	bne.n	80016b8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001622:	4b44      	ldr	r3, [pc, #272]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	0289      	lsls	r1, r1, #10
 800162c:	430a      	orrs	r2, r1
 800162e:	61da      	str	r2, [r3, #28]
 8001630:	4b40      	ldr	r3, [pc, #256]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 8001632:	69da      	ldr	r2, [r3, #28]
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 8001644:	2180      	movs	r1, #128	@ 0x80
 8001646:	0289      	lsls	r1, r1, #10
 8001648:	430a      	orrs	r2, r1
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	029b      	lsls	r3, r3, #10
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800165a:	2424      	movs	r4, #36	@ 0x24
 800165c:	193b      	adds	r3, r7, r4
 800165e:	2204      	movs	r2, #4
 8001660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2202      	movs	r2, #2
 8001666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166e:	193b      	adds	r3, r7, r4
 8001670:	2203      	movs	r2, #3
 8001672:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001674:	193b      	adds	r3, r7, r4
 8001676:	2201      	movs	r2, #1
 8001678:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	193a      	adds	r2, r7, r4
 800167c:	2390      	movs	r3, #144	@ 0x90
 800167e:	05db      	lsls	r3, r3, #23
 8001680:	0011      	movs	r1, r2
 8001682:	0018      	movs	r0, r3
 8001684:	f001 fc32 	bl	8002eec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001688:	0021      	movs	r1, r4
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2208      	movs	r2, #8
 800168e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2202      	movs	r2, #2
 8001694:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	2201      	movs	r2, #1
 80016a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80016a8:	187a      	adds	r2, r7, r1
 80016aa:	2390      	movs	r3, #144	@ 0x90
 80016ac:	05db      	lsls	r3, r3, #23
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f001 fc1b 	bl	8002eec <HAL_GPIO_Init>
}
 80016b6:	e036      	b.n	8001726 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <HAL_UART_MspInit+0x1b0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d131      	bne.n	8001726 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	02c9      	lsls	r1, r1, #11
 80016cc:	430a      	orrs	r2, r1
 80016ce:	61da      	str	r2, [r3, #28]
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	02db      	lsls	r3, r3, #11
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	0309      	lsls	r1, r1, #12
 80016e8:	430a      	orrs	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_MspInit+0x1a8>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	031b      	lsls	r3, r3, #12
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016fa:	2124      	movs	r1, #36	@ 0x24
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2230      	movs	r2, #48	@ 0x30
 8001700:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2202      	movs	r2, #2
 8001706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2203      	movs	r2, #3
 8001712:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2201      	movs	r2, #1
 8001718:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	187b      	adds	r3, r7, r1
 800171c:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_UART_MspInit+0x1b4>)
 800171e:	0019      	movs	r1, r3
 8001720:	0010      	movs	r0, r2
 8001722:	f001 fbe3 	bl	8002eec <HAL_GPIO_Init>
}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b00f      	add	sp, #60	@ 0x3c
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	40013800 	.word	0x40013800
 8001734:	40021000 	.word	0x40021000
 8001738:	40004400 	.word	0x40004400
 800173c:	40004800 	.word	0x40004800
 8001740:	48000800 	.word	0x48000800

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
printMessage("HardFault\n");
 8001750:	4b02      	ldr	r3, [pc, #8]	@ (800175c <HardFault_Handler+0x10>)
 8001752:	0018      	movs	r0, r3
 8001754:	f7ff fba6 	bl	8000ea4 <printMessage>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	e7fd      	b.n	8001758 <HardFault_Handler+0xc>
 800175c:	08005844 	.word	0x08005844

08001760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f8b2 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	46c0      	nop			@ (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f003 f8fa 	bl	80049ac <__errno>
 80017b8:	0003      	movs	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	2301      	movs	r3, #1
 80017c0:	425b      	negs	r3, r3
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	18d2      	adds	r2, r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <_sbrk+0x64>)
 80017d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b006      	add	sp, #24
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20004000 	.word	0x20004000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	200003b0 	.word	0x200003b0
 80017ec:	20000520 	.word	0x20000520

080017f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80017f4:	46c0      	nop			@ (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017fc:	480d      	ldr	r0, [pc, #52]	@ (8001834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001800:	f7ff fff6 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <LoopForever+0x6>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <LoopForever+0xe>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	@ (8001848 <LoopForever+0x16>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800182a:	f003 f8c5 	bl	80049b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800182e:	f7ff fc01 	bl	8001034 <main>

08001832 <LoopForever>:

LoopForever:
    b LoopForever
 8001832:	e7fe      	b.n	8001832 <LoopForever>
  ldr   r0, =_estack
 8001834:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001840:	080058f4 	.word	0x080058f4
  ldr r2, =_sbss
 8001844:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001848:	20000520 	.word	0x20000520

0800184c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_COMP_IRQHandler>
	...

08001850 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_Init+0x24>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_Init+0x24>)
 800185a:	2110      	movs	r1, #16
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f809 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001866:	f7ff fe09 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_InitTick+0x5c>)
 8001882:	681c      	ldr	r4, [r3, #0]
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <HAL_InitTick+0x60>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	0019      	movs	r1, r3
 800188a:	23fa      	movs	r3, #250	@ 0xfa
 800188c:	0098      	lsls	r0, r3, #2
 800188e:	f7fe fc4d 	bl	800012c <__udivsi3>
 8001892:	0003      	movs	r3, r0
 8001894:	0019      	movs	r1, r3
 8001896:	0020      	movs	r0, r4
 8001898:	f7fe fc48 	bl	800012c <__udivsi3>
 800189c:	0003      	movs	r3, r0
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 fb2f 	bl	8001f02 <HAL_SYSTICK_Config>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d001      	beq.n	80018ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e00f      	b.n	80018cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d80b      	bhi.n	80018ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	2301      	movs	r3, #1
 80018b6:	425b      	negs	r3, r3
 80018b8:	2200      	movs	r2, #0
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 fb0c 	bl	8001ed8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_InitTick+0x64>)
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b003      	add	sp, #12
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	2000000c 	.word	0x2000000c
 80018d8:	20000014 	.word	0x20000014
 80018dc:	20000010 	.word	0x20000010

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x1c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	001a      	movs	r2, r3
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x20>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	18d2      	adds	r2, r2, r3
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <HAL_IncTick+0x20>)
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	46c0      	nop			@ (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	20000014 	.word	0x20000014
 8001900:	200003b4 	.word	0x200003b4

08001904 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b02      	ldr	r3, [pc, #8]	@ (8001914 <HAL_GetTick+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	200003b4 	.word	0x200003b4

08001918 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001920:	230f      	movs	r3, #15
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e125      	b.n	8001b82 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10a      	bne.n	8001954 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2234      	movs	r2, #52	@ 0x34
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff fdb8 	bl	80014c4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001958:	2210      	movs	r2, #16
 800195a:	4013      	ands	r3, r2
 800195c:	d000      	beq.n	8001960 <HAL_ADC_Init+0x48>
 800195e:	e103      	b.n	8001b68 <HAL_ADC_Init+0x250>
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d000      	beq.n	800196c <HAL_ADC_Init+0x54>
 800196a:	e0fd      	b.n	8001b68 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2204      	movs	r2, #4
 8001974:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001976:	d000      	beq.n	800197a <HAL_ADC_Init+0x62>
 8001978:	e0f6      	b.n	8001b68 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197e:	4a83      	ldr	r2, [pc, #524]	@ (8001b8c <HAL_ADC_Init+0x274>)
 8001980:	4013      	ands	r3, r2
 8001982:	2202      	movs	r2, #2
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	2b01      	cmp	r3, #1
 8001996:	d112      	bne.n	80019be <HAL_ADC_Init+0xa6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d009      	beq.n	80019ba <HAL_ADC_Init+0xa2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	401a      	ands	r2, r3
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d101      	bne.n	80019be <HAL_ADC_Init+0xa6>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_ADC_Init+0xa8>
 80019be:	2300      	movs	r3, #0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d116      	bne.n	80019f2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2218      	movs	r2, #24
 80019cc:	4393      	bics	r3, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	0899      	lsrs	r1, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4964      	ldr	r1, [pc, #400]	@ (8001b90 <HAL_ADC_Init+0x278>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7e1b      	ldrb	r3, [r3, #24]
 8001a06:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e5b      	ldrb	r3, [r3, #25]
 8001a0c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7e9b      	ldrb	r3, [r3, #26]
 8001a14:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001a16:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d002      	beq.n	8001a26 <HAL_ADC_Init+0x10e>
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	015b      	lsls	r3, r3, #5
 8001a24:	e000      	b.n	8001a28 <HAL_ADC_Init+0x110>
 8001a26:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a28:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001a2e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_Init+0x124>
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e000      	b.n	8001a3e <HAL_ADC_Init+0x126>
 8001a3c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001a3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2124      	movs	r1, #36	@ 0x24
 8001a44:	5c5b      	ldrb	r3, [r3, r1]
 8001a46:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001a48:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7edb      	ldrb	r3, [r3, #27]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d115      	bne.n	8001a84 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7e9b      	ldrb	r3, [r3, #26]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2280      	movs	r2, #128	@ 0x80
 8001a64:	0252      	lsls	r2, r2, #9
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	e00b      	b.n	8001a84 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a70:	2220      	movs	r2, #32
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	23c2      	movs	r3, #194	@ 0xc2
 8001a8a:	33ff      	adds	r3, #255	@ 0xff
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d007      	beq.n	8001aa0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68d9      	ldr	r1, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	055b      	lsls	r3, r3, #21
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d01b      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d017      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d013      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d00f      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d00b      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d007      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d003      	beq.n	8001af4 <HAL_ADC_Init+0x1dc>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	2b07      	cmp	r3, #7
 8001af2:	d112      	bne.n	8001b1a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2107      	movs	r1, #7
 8001b00:	438a      	bics	r2, r1
 8001b02:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6959      	ldr	r1, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	2207      	movs	r2, #7
 8001b10:	401a      	ands	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	@ (8001b94 <HAL_ADC_Init+0x27c>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d10b      	bne.n	8001b42 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b34:	2203      	movs	r2, #3
 8001b36:	4393      	bics	r3, r2
 8001b38:	2201      	movs	r2, #1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b40:	e01c      	b.n	8001b7c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b46:	2212      	movs	r2, #18
 8001b48:	4393      	bics	r3, r2
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b56:	2201      	movs	r2, #1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001b5e:	230f      	movs	r3, #15
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001b66:	e009      	b.n	8001b7c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	781b      	ldrb	r3, [r3, #0]
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			@ (mov r8, r8)
 8001b8c:	fffffefd 	.word	0xfffffefd
 8001b90:	fffe0219 	.word	0xfffe0219
 8001b94:	833fffe7 	.word	0x833fffe7

08001b98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	055b      	lsls	r3, r3, #21
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d011      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x46>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d00d      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x46>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d009      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x46>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d005      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x46>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d001      	beq.n	8001bde <HAL_ADC_ConfigChannel+0x46>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2234      	movs	r2, #52	@ 0x34
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x54>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e0d0      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1f6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2234      	movs	r2, #52	@ 0x34
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d000      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x6a>
 8001c00:	e0b4      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a64      	ldr	r2, [pc, #400]	@ (8001d98 <HAL_ADC_ConfigChannel+0x200>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d100      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x76>
 8001c0c:	e082      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	055b      	lsls	r3, r3, #21
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d037      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d033      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d02f      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d02b      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d027      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d023      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	d01f      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	2b07      	cmp	r3, #7
 8001c66:	d01b      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2107      	movs	r1, #7
 8001c74:	400b      	ands	r3, r1
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d012      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2107      	movs	r1, #7
 8001c86:	438a      	bics	r2, r1
 8001c88:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6959      	ldr	r1, [r3, #20]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2207      	movs	r2, #7
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d007      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0x120>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	d003      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0x120>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b12      	cmp	r3, #18
 8001cb6:	d163      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001cb8:	4b38      	ldr	r3, [pc, #224]	@ (8001d9c <HAL_ADC_ConfigChannel+0x204>)
 8001cba:	6819      	ldr	r1, [r3, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d009      	beq.n	8001cd8 <HAL_ADC_ConfigChannel+0x140>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b11      	cmp	r3, #17
 8001cca:	d102      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x13a>
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	03db      	lsls	r3, r3, #15
 8001cd0:	e004      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x144>
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	045b      	lsls	r3, r3, #17
 8001cd6:	e001      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x144>
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d9c <HAL_ADC_ConfigChannel+0x204>)
 8001cde:	430b      	orrs	r3, r1
 8001ce0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d14a      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cea:	4b2d      	ldr	r3, [pc, #180]	@ (8001da0 <HAL_ADC_ConfigChannel+0x208>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	492d      	ldr	r1, [pc, #180]	@ (8001da4 <HAL_ADC_ConfigChannel+0x20c>)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7fe fa1b 	bl	800012c <__udivsi3>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	0013      	movs	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	189b      	adds	r3, r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x16e>
 8001d12:	e035      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4099      	lsls	r1, r3
 8001d22:	000b      	movs	r3, r1
 8001d24:	43d9      	mvns	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d007      	beq.n	8001d46 <HAL_ADC_ConfigChannel+0x1ae>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b11      	cmp	r3, #17
 8001d3c:	d003      	beq.n	8001d46 <HAL_ADC_ConfigChannel+0x1ae>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b12      	cmp	r3, #18
 8001d44:	d11c      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_ADC_ConfigChannel+0x204>)
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d007      	beq.n	8001d62 <HAL_ADC_ConfigChannel+0x1ca>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b11      	cmp	r3, #17
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x1c6>
 8001d5a:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_ADC_ConfigChannel+0x210>)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_ADC_ConfigChannel+0x214>)
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <HAL_ADC_ConfigChannel+0x218>)
 8001d64:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_ADC_ConfigChannel+0x204>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e009      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d70:	2220      	movs	r2, #32
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2234      	movs	r2, #52	@ 0x34
 8001d84:	2100      	movs	r1, #0
 8001d86:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d88:	230f      	movs	r3, #15
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	781b      	ldrb	r3, [r3, #0]
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			@ (mov r8, r8)
 8001d98:	00001001 	.word	0x00001001
 8001d9c:	40012708 	.word	0x40012708
 8001da0:	2000000c 	.word	0x2000000c
 8001da4:	000f4240 	.word	0x000f4240
 8001da8:	ffbfffff 	.word	0xffbfffff
 8001dac:	feffffff 	.word	0xfeffffff
 8001db0:	ff7fffff 	.word	0xff7fffff

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	0002      	movs	r2, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	1dfb      	adds	r3, r7, #7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dc8:	d828      	bhi.n	8001e1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dca:	4a2f      	ldr	r2, [pc, #188]	@ (8001e88 <__NVIC_SetPriority+0xd4>)
 8001dcc:	1dfb      	adds	r3, r7, #7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	33c0      	adds	r3, #192	@ 0xc0
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	589b      	ldr	r3, [r3, r2]
 8001dda:	1dfa      	adds	r2, r7, #7
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	0011      	movs	r1, r2
 8001de0:	2203      	movs	r2, #3
 8001de2:	400a      	ands	r2, r1
 8001de4:	00d2      	lsls	r2, r2, #3
 8001de6:	21ff      	movs	r1, #255	@ 0xff
 8001de8:	4091      	lsls	r1, r2
 8001dea:	000a      	movs	r2, r1
 8001dec:	43d2      	mvns	r2, r2
 8001dee:	401a      	ands	r2, r3
 8001df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	22ff      	movs	r2, #255	@ 0xff
 8001df8:	401a      	ands	r2, r3
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	2303      	movs	r3, #3
 8001e02:	4003      	ands	r3, r0
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e08:	481f      	ldr	r0, [pc, #124]	@ (8001e88 <__NVIC_SetPriority+0xd4>)
 8001e0a:	1dfb      	adds	r3, r7, #7
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	430a      	orrs	r2, r1
 8001e14:	33c0      	adds	r3, #192	@ 0xc0
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e1a:	e031      	b.n	8001e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <__NVIC_SetPriority+0xd8>)
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	0019      	movs	r1, r3
 8001e24:	230f      	movs	r3, #15
 8001e26:	400b      	ands	r3, r1
 8001e28:	3b08      	subs	r3, #8
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	3306      	adds	r3, #6
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	18d3      	adds	r3, r2, r3
 8001e32:	3304      	adds	r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	1dfa      	adds	r2, r7, #7
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	400a      	ands	r2, r1
 8001e40:	00d2      	lsls	r2, r2, #3
 8001e42:	21ff      	movs	r1, #255	@ 0xff
 8001e44:	4091      	lsls	r1, r2
 8001e46:	000a      	movs	r2, r1
 8001e48:	43d2      	mvns	r2, r2
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	019b      	lsls	r3, r3, #6
 8001e52:	22ff      	movs	r2, #255	@ 0xff
 8001e54:	401a      	ands	r2, r3
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	4003      	ands	r3, r0
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e64:	4809      	ldr	r0, [pc, #36]	@ (8001e8c <__NVIC_SetPriority+0xd8>)
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	001c      	movs	r4, r3
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	4023      	ands	r3, r4
 8001e70:	3b08      	subs	r3, #8
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	430a      	orrs	r2, r1
 8001e76:	3306      	adds	r3, #6
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	18c3      	adds	r3, r0, r3
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	601a      	str	r2, [r3, #0]
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b003      	add	sp, #12
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	1e5a      	subs	r2, r3, #1
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	045b      	lsls	r3, r3, #17
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d301      	bcc.n	8001ea8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e010      	b.n	8001eca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <SysTick_Config+0x44>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	3a01      	subs	r2, #1
 8001eae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	2103      	movs	r1, #3
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f7ff ff7c 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SysTick_Config+0x44>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <SysTick_Config+0x44>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	1c02      	adds	r2, r0, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ffbf 	bl	8001e90 <SysTick_Config>
 8001f12:	0003      	movs	r3, r0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e056      	b.n	8001fdc <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7f5b      	ldrb	r3, [r3, #29]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff fb05 	bl	8001550 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	791b      	ldrb	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10c      	bne.n	8001f6e <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <HAL_CRC_Init+0xc8>)
 8001f5a:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2118      	movs	r1, #24
 8001f68:	438a      	bics	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e00b      	b.n	8001f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 f944 	bl	8002206 <HAL_CRCEx_Polynomial_Set>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e02a      	b.n	8001fdc <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	795b      	ldrb	r3, [r3, #5]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4252      	negs	r2, r2
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	e004      	b.n	8001fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6912      	ldr	r2, [r2, #16]
 8001fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2260      	movs	r2, #96	@ 0x60
 8001fac:	4393      	bics	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	04c11db7 	.word	0x04c11db7

08001fe8 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d005      	beq.n	8002012 <HAL_CRC_Accumulate+0x2a>
 8002006:	d82d      	bhi.n	8002064 <HAL_CRC_Accumulate+0x7c>
 8002008:	2b01      	cmp	r3, #1
 800200a:	d019      	beq.n	8002040 <HAL_CRC_Accumulate+0x58>
 800200c:	2b02      	cmp	r3, #2
 800200e:	d020      	beq.n	8002052 <HAL_CRC_Accumulate+0x6a>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8002010:	e028      	b.n	8002064 <HAL_CRC_Accumulate+0x7c>
      for (index = 0U; index < BufferLength; index++)
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e00a      	b.n	800202e <HAL_CRC_Accumulate+0x46>
        hcrc->Instance->DR = pBuffer[index];
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	18d2      	adds	r2, r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3f0      	bcc.n	8002018 <HAL_CRC_Accumulate+0x30>
      temp = hcrc->Instance->DR;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	613b      	str	r3, [r7, #16]
      break;
 800203e:	e012      	b.n	8002066 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f815 	bl	8002076 <CRC_Handle_8>
 800204c:	0003      	movs	r3, r0
 800204e:	613b      	str	r3, [r7, #16]
      break;
 8002050:	e009      	b.n	8002066 <HAL_CRC_Accumulate+0x7e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f89d 	bl	8002198 <CRC_Handle_16>
 800205e:	0003      	movs	r3, r0
 8002060:	613b      	str	r3, [r7, #16]
      break;
 8002062:	e000      	b.n	8002066 <HAL_CRC_Accumulate+0x7e>
      break;
 8002064:	46c0      	nop			@ (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800206c:	693b      	ldr	r3, [r7, #16]
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b006      	add	sp, #24
 8002074:	bd80      	pop	{r7, pc}

08002076 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e023      	b.n	80020d0 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	18d3      	adds	r3, r2, r3
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	3301      	adds	r3, #1
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	18cb      	adds	r3, r1, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020a2:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	18cb      	adds	r3, r1, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80020b2:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	3303      	adds	r3, #3
 80020ba:	68b9      	ldr	r1, [r7, #8]
 80020bc:	18cb      	adds	r3, r1, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80020c6:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80020c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d3d6      	bcc.n	8002088 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2203      	movs	r2, #3
 80020de:	4013      	ands	r3, r2
 80020e0:	d053      	beq.n	800218a <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	18d2      	adds	r2, r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d119      	bne.n	800213a <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	18d3      	adds	r3, r2, r3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b21a      	sxth	r2, r3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3301      	adds	r3, #1
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	18cb      	adds	r3, r1, r3
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21a      	sxth	r2, r3
 8002126:	211a      	movs	r1, #26
 8002128:	187b      	adds	r3, r7, r1
 800212a:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	187a      	adds	r2, r7, r1
 8002136:	8812      	ldrh	r2, [r2, #0]
 8002138:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2203      	movs	r2, #3
 800213e:	4013      	ands	r3, r2
 8002140:	2b03      	cmp	r3, #3
 8002142:	d122      	bne.n	800218a <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	18d3      	adds	r3, r2, r3
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	b21a      	sxth	r2, r3
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3301      	adds	r3, #1
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	18cb      	adds	r3, r1, r3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b21b      	sxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b21a      	sxth	r2, r3
 8002164:	211a      	movs	r1, #26
 8002166:	187b      	adds	r3, r7, r1
 8002168:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	187a      	adds	r2, r7, r1
 8002174:	8812      	ldrh	r2, [r2, #0]
 8002176:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	18d2      	adds	r2, r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	7812      	ldrb	r2, [r2, #0]
 8002188:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b008      	add	sp, #32
 8002196:	bd80      	pop	{r7, pc}

08002198 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e013      	b.n	80021d2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	18d3      	adds	r3, r2, r3
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	18cb      	adds	r3, r1, r3
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	0019      	movs	r1, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d3e6      	bcc.n	80021aa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	18d3      	adds	r3, r2, r3
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b006      	add	sp, #24
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2117      	movs	r1, #23
 8002214:	187b      	adds	r3, r7, r1
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800221a:	231f      	movs	r3, #31
 800221c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	d103      	bne.n	800222e <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e045      	b.n	80022ba <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1e5a      	subs	r2, r3, #1
 8002234:	613a      	str	r2, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_CRCEx_Polynomial_Set+0x46>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	221f      	movs	r2, #31
 800223e:	4013      	ands	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	40da      	lsrs	r2, r3
 8002244:	0013      	movs	r3, r2
 8002246:	2201      	movs	r2, #1
 8002248:	4013      	ands	r3, r2
 800224a:	d0f1      	beq.n	8002230 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b18      	cmp	r3, #24
 8002250:	d00f      	beq.n	8002272 <HAL_CRCEx_Polynomial_Set+0x6c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b18      	cmp	r3, #24
 8002256:	d824      	bhi.n	80022a2 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d011      	beq.n	8002282 <HAL_CRCEx_Polynomial_Set+0x7c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b10      	cmp	r3, #16
 8002262:	d81e      	bhi.n	80022a2 <HAL_CRCEx_Polynomial_Set+0x9c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <HAL_CRCEx_Polynomial_Set+0xa6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d010      	beq.n	8002292 <HAL_CRCEx_Polynomial_Set+0x8c>
 8002270:	e017      	b.n	80022a2 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b06      	cmp	r3, #6
 8002276:	d91b      	bls.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8002278:	2317      	movs	r3, #23
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002280:	e016      	b.n	80022b0 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b07      	cmp	r3, #7
 8002286:	d915      	bls.n	80022b4 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8002288:	2317      	movs	r3, #23
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002290:	e010      	b.n	80022b4 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d90f      	bls.n	80022b8 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8002298:	2317      	movs	r3, #23
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
        }
        break;
 80022a0:	e00a      	b.n	80022b8 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80022a2:	2317      	movs	r3, #23
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
        break;
 80022aa:	e006      	b.n	80022ba <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	e004      	b.n	80022ba <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80022b0:	46c0      	nop			@ (mov r8, r8)
 80022b2:	e002      	b.n	80022ba <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	e000      	b.n	80022ba <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80022b8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 80022ba:	2317      	movs	r3, #23
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10e      	bne.n	80022e2 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2218      	movs	r2, #24
 80022d4:	4393      	bics	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80022e2:	2317      	movs	r3, #23
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b006      	add	sp, #24
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603a      	str	r2, [r7, #0]
 80022fc:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022fe:	2317      	movs	r3, #23
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002306:	2316      	movs	r3, #22
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800230e:	2315      	movs	r3, #21
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002316:	4b3e      	ldr	r3, [pc, #248]	@ (8002410 <HAL_FLASH_Program+0x120>)
 8002318:	7e1b      	ldrb	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_FLASH_Program+0x32>
 800231e:	2302      	movs	r3, #2
 8002320:	e072      	b.n	8002408 <HAL_FLASH_Program+0x118>
 8002322:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <HAL_FLASH_Program+0x120>)
 8002324:	2201      	movs	r2, #1
 8002326:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002328:	2317      	movs	r3, #23
 800232a:	18fe      	adds	r6, r7, r3
 800232c:	4b39      	ldr	r3, [pc, #228]	@ (8002414 <HAL_FLASH_Program+0x124>)
 800232e:	0018      	movs	r0, r3
 8002330:	f000 f904 	bl	800253c <FLASH_WaitForLastOperation>
 8002334:	0003      	movs	r3, r0
 8002336:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002338:	2317      	movs	r3, #23
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d15c      	bne.n	80023fc <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d104      	bne.n	8002352 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002348:	2315      	movs	r3, #21
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e00b      	b.n	800236a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d104      	bne.n	8002362 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002358:	2315      	movs	r3, #21
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2202      	movs	r2, #2
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e003      	b.n	800236a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002362:	2315      	movs	r3, #21
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2204      	movs	r2, #4
 8002368:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800236a:	2316      	movs	r3, #22
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e039      	b.n	80023e8 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002374:	2116      	movs	r1, #22
 8002376:	187b      	adds	r3, r7, r1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	005a      	lsls	r2, r3, #1
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	18d0      	adds	r0, r2, r3
 8002380:	187b      	adds	r3, r7, r1
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	001a      	movs	r2, r3
 8002388:	3a20      	subs	r2, #32
 800238a:	2a00      	cmp	r2, #0
 800238c:	db03      	blt.n	8002396 <HAL_FLASH_Program+0xa6>
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	40d1      	lsrs	r1, r2
 8002392:	000c      	movs	r4, r1
 8002394:	e008      	b.n	80023a8 <HAL_FLASH_Program+0xb8>
 8002396:	2220      	movs	r2, #32
 8002398:	1ad2      	subs	r2, r2, r3
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4091      	lsls	r1, r2
 800239e:	000a      	movs	r2, r1
 80023a0:	6839      	ldr	r1, [r7, #0]
 80023a2:	40d9      	lsrs	r1, r3
 80023a4:	000c      	movs	r4, r1
 80023a6:	4314      	orrs	r4, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	40da      	lsrs	r2, r3
 80023ac:	0015      	movs	r5, r2
 80023ae:	b2a3      	uxth	r3, r4
 80023b0:	0019      	movs	r1, r3
 80023b2:	f000 f8a7 	bl	8002504 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023b6:	2317      	movs	r3, #23
 80023b8:	18fe      	adds	r6, r7, r3
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <HAL_FLASH_Program+0x124>)
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f8bd 	bl	800253c <FLASH_WaitForLastOperation>
 80023c2:	0003      	movs	r3, r0
 80023c4:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_FLASH_Program+0x128>)
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_FLASH_Program+0x128>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	438a      	bics	r2, r1
 80023d0:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80023d2:	2317      	movs	r3, #23
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80023dc:	2116      	movs	r1, #22
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	3201      	adds	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	2316      	movs	r3, #22
 80023ea:	18fa      	adds	r2, r7, r3
 80023ec:	2315      	movs	r3, #21
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d3bd      	bcc.n	8002374 <HAL_FLASH_Program+0x84>
 80023f8:	e000      	b.n	80023fc <HAL_FLASH_Program+0x10c>
      {
        break;
 80023fa:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <HAL_FLASH_Program+0x120>)
 80023fe:	2200      	movs	r2, #0
 8002400:	761a      	strb	r2, [r3, #24]

  return status;
 8002402:	2317      	movs	r3, #23
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b007      	add	sp, #28
 800240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002410:	200003b8 	.word	0x200003b8
 8002414:	0000c350 	.word	0x0000c350
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2280      	movs	r2, #128	@ 0x80
 800242e:	4013      	ands	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <HAL_FLASH_Unlock+0x44>)
 8002436:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 800243a:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <HAL_FLASH_Unlock+0x48>)
 800243c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <HAL_FLASH_Unlock+0x40>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2280      	movs	r2, #128	@ 0x80
 8002444:	4013      	ands	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b002      	add	sp, #8
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	40022000 	.word	0x40022000
 8002460:	45670123 	.word	0x45670123
 8002464:	cdef89ab 	.word	0xcdef89ab

08002468 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <HAL_FLASH_Lock+0x18>)
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_FLASH_Lock+0x18>)
 8002472:	2180      	movs	r1, #128	@ 0x80
 8002474:	430a      	orrs	r2, r1
 8002476:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40022000 	.word	0x40022000

08002484 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <HAL_FLASH_OB_Unlock+0x28>)
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d107      	bne.n	80024a4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_FLASH_OB_Unlock+0x28>)
 8002496:	4a06      	ldr	r2, [pc, #24]	@ (80024b0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002498:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800249a:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <HAL_FLASH_OB_Unlock+0x28>)
 800249c:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <HAL_FLASH_OB_Unlock+0x30>)
 800249e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40022000 	.word	0x40022000
 80024b0:	45670123 	.word	0x45670123
 80024b4:	cdef89ab 	.word	0xcdef89ab

080024b8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80024bc:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <HAL_FLASH_OB_Lock+0x18>)
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_FLASH_OB_Lock+0x18>)
 80024c2:	4904      	ldr	r1, [pc, #16]	@ (80024d4 <HAL_FLASH_OB_Lock+0x1c>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	fffffdff 	.word	0xfffffdff

080024d8 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <HAL_FLASH_OB_Launch+0x24>)
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_FLASH_OB_Launch+0x24>)
 80024e2:	2180      	movs	r1, #128	@ 0x80
 80024e4:	0189      	lsls	r1, r1, #6
 80024e6:	430a      	orrs	r2, r1
 80024e8:	611a      	str	r2, [r3, #16]
  
  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <HAL_FLASH_OB_Launch+0x28>)
 80024ec:	0018      	movs	r0, r3
 80024ee:	f000 f825 	bl	800253c <FLASH_WaitForLastOperation>
 80024f2:	0003      	movs	r3, r0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	40022000 	.word	0x40022000
 8002500:	0000c350 	.word	0x0000c350

08002504 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	000a      	movs	r2, r1
 800250e:	1cbb      	adds	r3, r7, #2
 8002510:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002512:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <FLASH_Program_HalfWord+0x30>)
 8002514:	2200      	movs	r2, #0
 8002516:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <FLASH_Program_HalfWord+0x34>)
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <FLASH_Program_HalfWord+0x34>)
 800251e:	2101      	movs	r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	1cba      	adds	r2, r7, #2
 8002528:	8812      	ldrh	r2, [r2, #0]
 800252a:	801a      	strh	r2, [r3, #0]
}
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200003b8 	.word	0x200003b8
 8002538:	40022000 	.word	0x40022000

0800253c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff f9de 	bl	8001904 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800254c:	e00f      	b.n	800256e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3301      	adds	r3, #1
 8002552:	d00c      	beq.n	800256e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <FLASH_WaitForLastOperation+0x2e>
 800255a:	f7ff f9d3 	bl	8001904 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d201      	bcs.n	800256e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e01f      	b.n	80025ae <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <FLASH_WaitForLastOperation+0x7c>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	4013      	ands	r3, r2
 8002576:	2b01      	cmp	r3, #1
 8002578:	d0e9      	beq.n	800254e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800257a:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <FLASH_WaitForLastOperation+0x7c>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	4013      	ands	r3, r2
 8002582:	2b20      	cmp	r3, #32
 8002584:	d102      	bne.n	800258c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <FLASH_WaitForLastOperation+0x7c>)
 8002588:	2220      	movs	r2, #32
 800258a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800258c:	4b0a      	ldr	r3, [pc, #40]	@ (80025b8 <FLASH_WaitForLastOperation+0x7c>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2210      	movs	r2, #16
 8002592:	4013      	ands	r3, r2
 8002594:	2b10      	cmp	r3, #16
 8002596:	d005      	beq.n	80025a4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002598:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <FLASH_WaitForLastOperation+0x7c>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	2204      	movs	r2, #4
 800259e:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d103      	bne.n	80025ac <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025a4:	f000 f80a 	bl	80025bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	40022000 	.word	0x40022000

080025bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <FLASH_SetErrorCode+0x58>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2210      	movs	r2, #16
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d109      	bne.n	80025e6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <FLASH_SetErrorCode+0x5c>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2202      	movs	r2, #2
 80025d8:	431a      	orrs	r2, r3
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <FLASH_SetErrorCode+0x5c>)
 80025dc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2210      	movs	r2, #16
 80025e2:	4313      	orrs	r3, r2
 80025e4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <FLASH_SetErrorCode+0x58>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2204      	movs	r2, #4
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d109      	bne.n	8002606 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <FLASH_SetErrorCode+0x5c>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2201      	movs	r2, #1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4b07      	ldr	r3, [pc, #28]	@ (8002618 <FLASH_SetErrorCode+0x5c>)
 80025fc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	4313      	orrs	r3, r2
 8002604:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002606:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <FLASH_SetErrorCode+0x58>)
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
}  
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40022000 	.word	0x40022000
 8002618:	200003b8 	.word	0x200003b8

0800261c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002626:	230f      	movs	r3, #15
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002632:	4b32      	ldr	r3, [pc, #200]	@ (80026fc <HAL_FLASHEx_Erase+0xe0>)
 8002634:	7e1b      	ldrb	r3, [r3, #24]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_FLASHEx_Erase+0x22>
 800263a:	2302      	movs	r3, #2
 800263c:	e05a      	b.n	80026f4 <HAL_FLASHEx_Erase+0xd8>
 800263e:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <HAL_FLASHEx_Erase+0xe0>)
 8002640:	2201      	movs	r2, #1
 8002642:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d116      	bne.n	800267a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800264c:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_FLASHEx_Erase+0xe4>)
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff ff74 	bl	800253c <FLASH_WaitForLastOperation>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d147      	bne.n	80026e8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002658:	f000 f952 	bl	8002900 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800265c:	230f      	movs	r3, #15
 800265e:	18fc      	adds	r4, r7, r3
 8002660:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <HAL_FLASHEx_Erase+0xe4>)
 8002662:	0018      	movs	r0, r3
 8002664:	f7ff ff6a 	bl	800253c <FLASH_WaitForLastOperation>
 8002668:	0003      	movs	r3, r0
 800266a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_FLASHEx_Erase+0xe8>)
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_FLASHEx_Erase+0xe8>)
 8002672:	2104      	movs	r1, #4
 8002674:	438a      	bics	r2, r1
 8002676:	611a      	str	r2, [r3, #16]
 8002678:	e036      	b.n	80026e8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800267a:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <HAL_FLASHEx_Erase+0xe4>)
 800267c:	0018      	movs	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <FLASH_WaitForLastOperation>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d130      	bne.n	80026e8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	4252      	negs	r2, r2
 800268c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	e01f      	b.n	80026d6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fc09 	bl	8002eb0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800269e:	250f      	movs	r5, #15
 80026a0:	197c      	adds	r4, r7, r5
 80026a2:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <HAL_FLASHEx_Erase+0xe4>)
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff ff49 	bl	800253c <FLASH_WaitForLastOperation>
 80026aa:	0003      	movs	r3, r0
 80026ac:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <HAL_FLASHEx_Erase+0xe8>)
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	4b14      	ldr	r3, [pc, #80]	@ (8002704 <HAL_FLASHEx_Erase+0xe8>)
 80026b4:	2102      	movs	r1, #2
 80026b6:	438a      	bics	r2, r1
 80026b8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80026ba:	197b      	adds	r3, r7, r5
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	601a      	str	r2, [r3, #0]
            break;
 80026c8:	e00e      	b.n	80026e8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	4694      	mov	ip, r2
 80026d2:	4463      	add	r3, ip
 80026d4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	02da      	lsls	r2, r3, #11
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3d6      	bcc.n	8002696 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <HAL_FLASHEx_Erase+0xe0>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	761a      	strb	r2, [r3, #24]

  return status;
 80026ee:	230f      	movs	r3, #15
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	781b      	ldrb	r3, [r3, #0]
}
 80026f4:	0018      	movs	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b004      	add	sp, #16
 80026fa:	bdb0      	pop	{r4, r5, r7, pc}
 80026fc:	200003b8 	.word	0x200003b8
 8002700:	0000c350 	.word	0x0000c350
 8002704:	40022000 	.word	0x40022000

08002708 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 800270e:	1dbb      	adds	r3, r7, #6
 8002710:	22aa      	movs	r2, #170	@ 0xaa
 8002712:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002714:	1dfb      	adds	r3, r7, #7
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 800271a:	f000 fba1 	bl	8002e60 <FLASH_OB_GetRDP>
 800271e:	0002      	movs	r2, r0
 8002720:	1dbb      	adds	r3, r7, #6
 8002722:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002724:	1dfc      	adds	r4, r7, #7
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <HAL_FLASHEx_OBErase+0x90>)
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff ff07 	bl	800253c <FLASH_WaitForLastOperation>
 800272e:	0003      	movs	r3, r0
 8002730:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d127      	bne.n	800278a <HAL_FLASHEx_OBErase+0x82>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <HAL_FLASHEx_OBErase+0x94>)
 800273c:	2200      	movs	r2, #0
 800273e:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_FLASHEx_OBErase+0x98>)
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <HAL_FLASHEx_OBErase+0x98>)
 8002746:	2120      	movs	r1, #32
 8002748:	430a      	orrs	r2, r1
 800274a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800274c:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <HAL_FLASHEx_OBErase+0x98>)
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_FLASHEx_OBErase+0x98>)
 8002752:	2140      	movs	r1, #64	@ 0x40
 8002754:	430a      	orrs	r2, r1
 8002756:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002758:	1dfc      	adds	r4, r7, #7
 800275a:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <HAL_FLASHEx_OBErase+0x90>)
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff feed 	bl	800253c <FLASH_WaitForLastOperation>
 8002762:	0003      	movs	r3, r0
 8002764:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_FLASHEx_OBErase+0x98>)
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <HAL_FLASHEx_OBErase+0x98>)
 800276c:	2120      	movs	r1, #32
 800276e:	438a      	bics	r2, r1
 8002770:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 8002772:	1dfb      	adds	r3, r7, #7
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d107      	bne.n	800278a <HAL_FLASHEx_OBErase+0x82>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 800277a:	1dfc      	adds	r4, r7, #7
 800277c:	1dbb      	adds	r3, r7, #6
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 fa7f 	bl	8002c84 <FLASH_OB_RDP_LevelConfig>
 8002786:	0003      	movs	r3, r0
 8002788:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Return the erase status */
  return status;
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	781b      	ldrb	r3, [r3, #0]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b003      	add	sp, #12
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	0000c350 	.word	0x0000c350
 800279c:	200003b8 	.word	0x200003b8
 80027a0:	40022000 	.word	0x40022000

080027a4 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80027a4:	b5b0      	push	{r4, r5, r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027b4:	4b43      	ldr	r3, [pc, #268]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 80027b6:	7e1b      	ldrb	r3, [r3, #24]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_FLASHEx_OBProgram+0x1c>
 80027bc:	2302      	movs	r3, #2
 80027be:	e07d      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x118>
 80027c0:	4b40      	ldr	r3, [pc, #256]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d021      	beq.n	8002814 <HAL_FLASHEx_OBProgram+0x70>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d109      	bne.n	80027ec <HAL_FLASHEx_OBProgram+0x48>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	220f      	movs	r2, #15
 80027de:	18bc      	adds	r4, r7, r2
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f8a5 	bl	8002930 <FLASH_OB_EnableWRP>
 80027e6:	0003      	movs	r3, r0
 80027e8:	7023      	strb	r3, [r4, #0]
 80027ea:	e008      	b.n	80027fe <HAL_FLASHEx_OBProgram+0x5a>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	220f      	movs	r2, #15
 80027f2:	18bc      	adds	r4, r7, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 f971 	bl	8002adc <FLASH_OB_DisableWRP>
 80027fa:	0003      	movs	r3, r0
 80027fc:	7023      	strb	r3, [r4, #0]
    }
    if (status != HAL_OK)
 80027fe:	210f      	movs	r1, #15
 8002800:	187b      	adds	r3, r7, r1
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_FLASHEx_OBProgram+0x70>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8002808:	4b2e      	ldr	r3, [pc, #184]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 800280a:	2200      	movs	r2, #0
 800280c:	761a      	strb	r2, [r3, #24]
      return status;
 800280e:	187b      	adds	r3, r7, r1
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	e053      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_FLASHEx_OBProgram+0xa2>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7b1b      	ldrb	r3, [r3, #12]
 8002822:	250f      	movs	r5, #15
 8002824:	197c      	adds	r4, r7, r5
 8002826:	0018      	movs	r0, r3
 8002828:	f000 fa2c 	bl	8002c84 <FLASH_OB_RDP_LevelConfig>
 800282c:	0003      	movs	r3, r0
 800282e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8002830:	0029      	movs	r1, r5
 8002832:	187b      	adds	r3, r7, r1
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800283a:	4b22      	ldr	r3, [pc, #136]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 800283c:	2200      	movs	r2, #0
 800283e:	761a      	strb	r2, [r3, #24]
      return status;
 8002840:	187b      	adds	r3, r7, r1
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	e03a      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2204      	movs	r2, #4
 800284c:	4013      	ands	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_FLASHEx_OBProgram+0xd4>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7b5b      	ldrb	r3, [r3, #13]
 8002854:	250f      	movs	r5, #15
 8002856:	197c      	adds	r4, r7, r5
 8002858:	0018      	movs	r0, r3
 800285a:	f000 fa73 	bl	8002d44 <FLASH_OB_UserConfig>
 800285e:	0003      	movs	r3, r0
 8002860:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8002862:	0029      	movs	r1, r5
 8002864:	187b      	adds	r3, r7, r1
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_FLASHEx_OBProgram+0xd4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 800286e:	2200      	movs	r2, #0
 8002870:	761a      	strb	r2, [r3, #24]
      return status;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	e021      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2208      	movs	r2, #8
 800287e:	4013      	ands	r3, r2
 8002880:	d016      	beq.n	80028b0 <HAL_FLASHEx_OBProgram+0x10c>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7d1b      	ldrb	r3, [r3, #20]
 800288a:	250f      	movs	r5, #15
 800288c:	197c      	adds	r4, r7, r5
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f000 fa9b 	bl	8002dcc <FLASH_OB_ProgramData>
 8002896:	0003      	movs	r3, r0
 8002898:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800289a:	0029      	movs	r1, r5
 800289c:	187b      	adds	r3, r7, r1
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_FLASHEx_OBProgram+0x10c>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80028a4:	4b07      	ldr	r3, [pc, #28]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	761a      	strb	r2, [r3, #24]
      return status;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	e005      	b.n	80028bc <HAL_FLASHEx_OBProgram+0x118>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028b0:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <HAL_FLASHEx_OBProgram+0x120>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	761a      	strb	r2, [r3, #24]

  return status;
 80028b6:	230f      	movs	r3, #15
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	781b      	ldrb	r3, [r3, #0]
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bdb0      	pop	{r4, r5, r7, pc}
 80028c4:	200003b8 	.word	0x200003b8

080028c8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2207      	movs	r2, #7
 80028d4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80028d6:	f000 fab9 	bl	8002e4c <FLASH_OB_GetWRP>
 80028da:	0002      	movs	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80028e0:	f000 fabe 	bl	8002e60 <FLASH_OB_GetRDP>
 80028e4:	0003      	movs	r3, r0
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	731a      	strb	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80028ec:	f000 fad2 	bl	8002e94 <FLASH_OB_GetUser>
 80028f0:	0003      	movs	r3, r0
 80028f2:	001a      	movs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	735a      	strb	r2, [r3, #13]
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <FLASH_MassErase+0x28>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800290a:	4b08      	ldr	r3, [pc, #32]	@ (800292c <FLASH_MassErase+0x2c>)
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	4b07      	ldr	r3, [pc, #28]	@ (800292c <FLASH_MassErase+0x2c>)
 8002910:	2104      	movs	r1, #4
 8002912:	430a      	orrs	r2, r1
 8002914:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002916:	4b05      	ldr	r3, [pc, #20]	@ (800292c <FLASH_MassErase+0x2c>)
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	4b04      	ldr	r3, [pc, #16]	@ (800292c <FLASH_MassErase+0x2c>)
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	430a      	orrs	r2, r1
 8002920:	611a      	str	r2, [r3, #16]
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200003b8 	.word	0x200003b8
 800292c:	40022000 	.word	0x40022000

08002930 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2417      	movs	r4, #23
 800293a:	193b      	adds	r3, r7, r4
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8002940:	2614      	movs	r6, #20
 8002942:	19bb      	adds	r3, r7, r6
 8002944:	2201      	movs	r2, #1
 8002946:	4252      	negs	r2, r2
 8002948:	801a      	strh	r2, [r3, #0]
#if defined(OB_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFFU;
 800294a:	2512      	movs	r5, #18
 800294c:	197b      	adds	r3, r7, r5
 800294e:	2201      	movs	r2, #1
 8002950:	4252      	negs	r2, r2
 8002952:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP1_WRP1 */
#if defined(OB_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFFU;
 8002954:	2310      	movs	r3, #16
 8002956:	18fb      	adds	r3, r7, r3
 8002958:	2201      	movs	r2, #1
 800295a:	4252      	negs	r2, r2
 800295c:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP2_WRP2 */
#if defined(OB_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFFU;
 800295e:	220e      	movs	r2, #14
 8002960:	18bb      	adds	r3, r7, r2
 8002962:	2201      	movs	r2, #1
 8002964:	4252      	negs	r2, r2
 8002966:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8002968:	f000 fa70 	bl	8002e4c <FLASH_OB_GetWRP>
 800296c:	0002      	movs	r2, r0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	43db      	mvns	r3, r3
 8002972:	4013      	ands	r3, r2
 8002974:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	b29a      	uxth	r2, r3
 800297a:	19bb      	adds	r3, r7, r6
 800297c:	21ff      	movs	r1, #255	@ 0xff
 800297e:	400a      	ands	r2, r1
 8002980:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b29a      	uxth	r2, r3
 8002988:	197b      	adds	r3, r7, r5
 800298a:	21ff      	movs	r1, #255	@ 0xff
 800298c:	400a      	ands	r2, r1
 800298e:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	b29a      	uxth	r2, r3
 8002996:	2310      	movs	r3, #16
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	21ff      	movs	r1, #255	@ 0xff
 800299c:	400a      	ands	r2, r1
 800299e:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES48TO63MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0e1a      	lsrs	r2, r3, #24
 80029a4:	230e      	movs	r3, #14
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES48TO63MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029aa:	0025      	movs	r5, r4
 80029ac:	193c      	adds	r4, r7, r4
 80029ae:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <FLASH_OB_EnableWRP+0x19c>)
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff fdc3 	bl	800253c <FLASH_WaitForLastOperation>
 80029b6:	0003      	movs	r3, r0
 80029b8:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80029ba:	197b      	adds	r3, r7, r5
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d000      	beq.n	80029c4 <FLASH_OB_EnableWRP+0x94>
 80029c2:	e07b      	b.n	8002abc <FLASH_OB_EnableWRP+0x18c>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029c4:	4b42      	ldr	r3, [pc, #264]	@ (8002ad0 <FLASH_OB_EnableWRP+0x1a0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80029ca:	197c      	adds	r4, r7, r5
 80029cc:	f7ff fe9c 	bl	8002708 <HAL_FLASHEx_OBErase>
 80029d0:	0003      	movs	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80029d4:	0028      	movs	r0, r5
 80029d6:	197b      	adds	r3, r7, r5
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d000      	beq.n	80029e0 <FLASH_OB_EnableWRP+0xb0>
 80029de:	e06d      	b.n	8002abc <FLASH_OB_EnableWRP+0x18c>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80029e0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <FLASH_OB_EnableWRP+0x1a4>)
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <FLASH_OB_EnableWRP+0x1a4>)
 80029e6:	2110      	movs	r1, #16
 80029e8:	430a      	orrs	r2, r1
 80029ea:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80029ec:	19bb      	adds	r3, r7, r6
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	2bff      	cmp	r3, #255	@ 0xff
 80029f2:	d00f      	beq.n	8002a14 <FLASH_OB_EnableWRP+0xe4>
      {
        OB->WRP0 &= WRP0_Data;
 80029f4:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 80029f6:	891b      	ldrh	r3, [r3, #8]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4937      	ldr	r1, [pc, #220]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 80029fc:	19ba      	adds	r2, r7, r6
 80029fe:	8812      	ldrh	r2, [r2, #0]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a06:	183c      	adds	r4, r7, r0
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <FLASH_OB_EnableWRP+0x19c>)
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff fd96 	bl	800253c <FLASH_WaitForLastOperation>
 8002a10:	0003      	movs	r3, r0
 8002a12:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP0_WRP0 */

#if defined(OB_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002a14:	2017      	movs	r0, #23
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d114      	bne.n	8002a48 <FLASH_OB_EnableWRP+0x118>
 8002a1e:	2212      	movs	r2, #18
 8002a20:	18bb      	adds	r3, r7, r2
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2bff      	cmp	r3, #255	@ 0xff
 8002a26:	d00f      	beq.n	8002a48 <FLASH_OB_EnableWRP+0x118>
      {
        OB->WRP1 &= WRP1_Data;
 8002a28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 8002a2a:	895b      	ldrh	r3, [r3, #10]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	492a      	ldr	r1, [pc, #168]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 8002a30:	18ba      	adds	r2, r7, r2
 8002a32:	8812      	ldrh	r2, [r2, #0]
 8002a34:	4013      	ands	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a3a:	183c      	adds	r4, r7, r0
 8002a3c:	4b23      	ldr	r3, [pc, #140]	@ (8002acc <FLASH_OB_EnableWRP+0x19c>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7ff fd7c 	bl	800253c <FLASH_WaitForLastOperation>
 8002a44:	0003      	movs	r3, r0
 8002a46:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP1_WRP1 */

#if defined(OB_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002a48:	2017      	movs	r0, #23
 8002a4a:	183b      	adds	r3, r7, r0
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d114      	bne.n	8002a7c <FLASH_OB_EnableWRP+0x14c>
 8002a52:	2210      	movs	r2, #16
 8002a54:	18bb      	adds	r3, r7, r2
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	2bff      	cmp	r3, #255	@ 0xff
 8002a5a:	d00f      	beq.n	8002a7c <FLASH_OB_EnableWRP+0x14c>
      {
        OB->WRP2 &= WRP2_Data;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 8002a5e:	899b      	ldrh	r3, [r3, #12]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	491d      	ldr	r1, [pc, #116]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 8002a64:	18ba      	adds	r2, r7, r2
 8002a66:	8812      	ldrh	r2, [r2, #0]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a6e:	183c      	adds	r4, r7, r0
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <FLASH_OB_EnableWRP+0x19c>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff fd62 	bl	800253c <FLASH_WaitForLastOperation>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP2_WRP2 */

#if defined(OB_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002a7c:	2017      	movs	r0, #23
 8002a7e:	183b      	adds	r3, r7, r0
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <FLASH_OB_EnableWRP+0x180>
 8002a86:	220e      	movs	r2, #14
 8002a88:	18bb      	adds	r3, r7, r2
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2bff      	cmp	r3, #255	@ 0xff
 8002a8e:	d00f      	beq.n	8002ab0 <FLASH_OB_EnableWRP+0x180>
      {
        OB->WRP3 &= WRP3_Data;
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 8002a92:	89db      	ldrh	r3, [r3, #14]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4910      	ldr	r1, [pc, #64]	@ (8002ad8 <FLASH_OB_EnableWRP+0x1a8>)
 8002a98:	18ba      	adds	r2, r7, r2
 8002a9a:	8812      	ldrh	r2, [r2, #0]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa2:	183c      	adds	r4, r7, r0
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <FLASH_OB_EnableWRP+0x19c>)
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7ff fd48 	bl	800253c <FLASH_WaitForLastOperation>
 8002aac:	0003      	movs	r3, r0
 8002aae:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <FLASH_OB_EnableWRP+0x1a4>)
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <FLASH_OB_EnableWRP+0x1a4>)
 8002ab6:	2110      	movs	r1, #16
 8002ab8:	438a      	bics	r2, r1
 8002aba:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 8002abc:	2317      	movs	r3, #23
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b007      	add	sp, #28
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	0000c350 	.word	0x0000c350
 8002ad0:	200003b8 	.word	0x200003b8
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	1ffff800 	.word	0x1ffff800

08002adc <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2417      	movs	r4, #23
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8002aec:	2614      	movs	r6, #20
 8002aee:	19bb      	adds	r3, r7, r6
 8002af0:	2201      	movs	r2, #1
 8002af2:	4252      	negs	r2, r2
 8002af4:	801a      	strh	r2, [r3, #0]
#if defined(OB_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFFU;
 8002af6:	2512      	movs	r5, #18
 8002af8:	197b      	adds	r3, r7, r5
 8002afa:	2201      	movs	r2, #1
 8002afc:	4252      	negs	r2, r2
 8002afe:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP1_WRP1 */
#if defined(OB_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFFU;
 8002b00:	2310      	movs	r3, #16
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2201      	movs	r2, #1
 8002b06:	4252      	negs	r2, r2
 8002b08:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP2_WRP2 */
#if defined(OB_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFFU;
 8002b0a:	220e      	movs	r2, #14
 8002b0c:	18bb      	adds	r3, r7, r2
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4252      	negs	r2, r2
 8002b12:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8002b14:	f000 f99a 	bl	8002e4c <FLASH_OB_GetWRP>
 8002b18:	0002      	movs	r2, r0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	19bb      	adds	r3, r7, r6
 8002b26:	21ff      	movs	r1, #255	@ 0xff
 8002b28:	400a      	ands	r2, r1
 8002b2a:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	197b      	adds	r3, r7, r5
 8002b34:	21ff      	movs	r1, #255	@ 0xff
 8002b36:	400a      	ands	r2, r1
 8002b38:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	2310      	movs	r3, #16
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	21ff      	movs	r1, #255	@ 0xff
 8002b46:	400a      	ands	r2, r1
 8002b48:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES48TO63MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0e1a      	lsrs	r2, r3, #24
 8002b4e:	230e      	movs	r3, #14
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	801a      	strh	r2, [r3, #0]
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
#endif /* OB_WRP_PAGES48TO63MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b54:	0025      	movs	r5, r4
 8002b56:	193c      	adds	r4, r7, r4
 8002b58:	4b46      	ldr	r3, [pc, #280]	@ (8002c74 <FLASH_OB_DisableWRP+0x198>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff fcee 	bl	800253c <FLASH_WaitForLastOperation>
 8002b60:	0003      	movs	r3, r0
 8002b62:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 8002b64:	197b      	adds	r3, r7, r5
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d000      	beq.n	8002b6e <FLASH_OB_DisableWRP+0x92>
 8002b6c:	e07b      	b.n	8002c66 <FLASH_OB_DisableWRP+0x18a>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b6e:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <FLASH_OB_DisableWRP+0x19c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 8002b74:	197c      	adds	r4, r7, r5
 8002b76:	f7ff fdc7 	bl	8002708 <HAL_FLASHEx_OBErase>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 8002b7e:	0028      	movs	r0, r5
 8002b80:	197b      	adds	r3, r7, r5
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d000      	beq.n	8002b8a <FLASH_OB_DisableWRP+0xae>
 8002b88:	e06d      	b.n	8002c66 <FLASH_OB_DisableWRP+0x18a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <FLASH_OB_DisableWRP+0x1a0>)
 8002b8c:	691a      	ldr	r2, [r3, #16]
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <FLASH_OB_DisableWRP+0x1a0>)
 8002b90:	2110      	movs	r1, #16
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 8002b96:	19bb      	adds	r3, r7, r6
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	2bff      	cmp	r3, #255	@ 0xff
 8002b9c:	d00f      	beq.n	8002bbe <FLASH_OB_DisableWRP+0xe2>
      {
        OB->WRP0 &= WRP0_Data;
 8002b9e:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002ba0:	891b      	ldrh	r3, [r3, #8]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4936      	ldr	r1, [pc, #216]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002ba6:	19ba      	adds	r2, r7, r6
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bb0:	183c      	adds	r4, r7, r0
 8002bb2:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <FLASH_OB_DisableWRP+0x198>)
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7ff fcc1 	bl	800253c <FLASH_WaitForLastOperation>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP0_WRP0 */

#if defined(OB_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8002bbe:	2017      	movs	r0, #23
 8002bc0:	183b      	adds	r3, r7, r0
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d114      	bne.n	8002bf2 <FLASH_OB_DisableWRP+0x116>
 8002bc8:	2212      	movs	r2, #18
 8002bca:	18bb      	adds	r3, r7, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	2bff      	cmp	r3, #255	@ 0xff
 8002bd0:	d00f      	beq.n	8002bf2 <FLASH_OB_DisableWRP+0x116>
      {
        OB->WRP1 &= WRP1_Data;
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002bd4:	895b      	ldrh	r3, [r3, #10]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4929      	ldr	r1, [pc, #164]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002bda:	18ba      	adds	r2, r7, r2
 8002bdc:	8812      	ldrh	r2, [r2, #0]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002be4:	183c      	adds	r4, r7, r0
 8002be6:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <FLASH_OB_DisableWRP+0x198>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fca7 	bl	800253c <FLASH_WaitForLastOperation>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP1_WRP1 */

#if defined(OB_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8002bf2:	2017      	movs	r0, #23
 8002bf4:	183b      	adds	r3, r7, r0
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d114      	bne.n	8002c26 <FLASH_OB_DisableWRP+0x14a>
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	18bb      	adds	r3, r7, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	2bff      	cmp	r3, #255	@ 0xff
 8002c04:	d00f      	beq.n	8002c26 <FLASH_OB_DisableWRP+0x14a>
      {
        OB->WRP2 &= WRP2_Data;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002c08:	899b      	ldrh	r3, [r3, #12]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	491c      	ldr	r1, [pc, #112]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002c0e:	18ba      	adds	r2, r7, r2
 8002c10:	8812      	ldrh	r2, [r2, #0]
 8002c12:	4013      	ands	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c18:	183c      	adds	r4, r7, r0
 8002c1a:	4b16      	ldr	r3, [pc, #88]	@ (8002c74 <FLASH_OB_DisableWRP+0x198>)
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff fc8d 	bl	800253c <FLASH_WaitForLastOperation>
 8002c22:	0003      	movs	r3, r0
 8002c24:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP2_WRP2 */

#if defined(OB_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8002c26:	2017      	movs	r0, #23
 8002c28:	183b      	adds	r3, r7, r0
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d114      	bne.n	8002c5a <FLASH_OB_DisableWRP+0x17e>
 8002c30:	220e      	movs	r2, #14
 8002c32:	18bb      	adds	r3, r7, r2
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	2bff      	cmp	r3, #255	@ 0xff
 8002c38:	d00f      	beq.n	8002c5a <FLASH_OB_DisableWRP+0x17e>
      {
        OB->WRP3 &= WRP3_Data;
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002c3c:	89db      	ldrh	r3, [r3, #14]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	490f      	ldr	r1, [pc, #60]	@ (8002c80 <FLASH_OB_DisableWRP+0x1a4>)
 8002c42:	18ba      	adds	r2, r7, r2
 8002c44:	8812      	ldrh	r2, [r2, #0]
 8002c46:	4013      	ands	r3, r2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c4c:	183c      	adds	r4, r7, r0
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <FLASH_OB_DisableWRP+0x198>)
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff fc73 	bl	800253c <FLASH_WaitForLastOperation>
 8002c56:	0003      	movs	r3, r0
 8002c58:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002c5a:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <FLASH_OB_DisableWRP+0x1a0>)
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <FLASH_OB_DisableWRP+0x1a0>)
 8002c60:	2110      	movs	r1, #16
 8002c62:	438a      	bics	r2, r1
 8002c64:	611a      	str	r2, [r3, #16]
    }
  }
  return status;
 8002c66:	2317      	movs	r3, #23
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b007      	add	sp, #28
 8002c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c74:	0000c350 	.word	0x0000c350
 8002c78:	200003b8 	.word	0x200003b8
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	1ffff800 	.word	0x1ffff800

08002c84 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note   Warning: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 8002c84:	b5b0      	push	{r4, r5, r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	250f      	movs	r5, #15
 8002c92:	197b      	adds	r3, r7, r5
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c98:	197c      	adds	r4, r7, r5
 8002c9a:	4b26      	ldr	r3, [pc, #152]	@ (8002d34 <FLASH_OB_RDP_LevelConfig+0xb0>)
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fc4d 	bl	800253c <FLASH_WaitForLastOperation>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8002ca6:	0028      	movs	r0, r5
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d139      	bne.n	8002d24 <FLASH_OB_RDP_LevelConfig+0xa0>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cb0:	4b21      	ldr	r3, [pc, #132]	@ (8002d38 <FLASH_OB_RDP_LevelConfig+0xb4>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002cb6:	4b21      	ldr	r3, [pc, #132]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002cbc:	2120      	movs	r1, #32
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002cc8:	2140      	movs	r1, #64	@ 0x40
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cce:	0005      	movs	r5, r0
 8002cd0:	183c      	adds	r4, r7, r0
 8002cd2:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <FLASH_OB_RDP_LevelConfig+0xb0>)
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff fc31 	bl	800253c <FLASH_WaitForLastOperation>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002ce4:	2120      	movs	r1, #32
 8002ce6:	438a      	bics	r2, r1
 8002ce8:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 8002cea:	0028      	movs	r0, r5
 8002cec:	183b      	adds	r3, r7, r0
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d117      	bne.n	8002d24 <FLASH_OB_RDP_LevelConfig+0xa0>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8002d00:	4a0f      	ldr	r2, [pc, #60]	@ (8002d40 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 8002d0a:	183c      	adds	r4, r7, r0
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <FLASH_OB_RDP_LevelConfig+0xb0>)
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f7ff fc14 	bl	800253c <FLASH_WaitForLastOperation>
 8002d14:	0003      	movs	r3, r0
 8002d16:	7023      	strb	r3, [r4, #0]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8002d1e:	2110      	movs	r1, #16
 8002d20:	438a      	bics	r2, r1
 8002d22:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 8002d24:	230f      	movs	r3, #15
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b004      	add	sp, #16
 8002d30:	bdb0      	pop	{r4, r5, r7, pc}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	0000c350 	.word	0x0000c350
 8002d38:	200003b8 	.word	0x200003b8
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	1ffff800 	.word	0x1ffff800

08002d44 <FLASH_OB_UserConfig>:
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	1dfb      	adds	r3, r7, #7
 8002d4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	250f      	movs	r5, #15
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  assert_param(IS_OB_BOOT_SEL((UserConfig&OB_BOOT_SEL_SET)));
  assert_param(IS_OB_BOOT0((UserConfig&OB_BOOT0_SET)));
#endif /* FLASH_OBR_BOOT_SEL */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d58:	197c      	adds	r4, r7, r5
 8002d5a:	4b18      	ldr	r3, [pc, #96]	@ (8002dbc <FLASH_OB_UserConfig+0x78>)
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff fbed 	bl	800253c <FLASH_WaitForLastOperation>
 8002d62:	0003      	movs	r3, r0
 8002d64:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8002d66:	0028      	movs	r0, r5
 8002d68:	183b      	adds	r3, r7, r0
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d11d      	bne.n	8002dac <FLASH_OB_UserConfig+0x68>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d70:	4b13      	ldr	r3, [pc, #76]	@ (8002dc0 <FLASH_OB_UserConfig+0x7c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002d76:	4b13      	ldr	r3, [pc, #76]	@ (8002dc4 <FLASH_OB_UserConfig+0x80>)
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <FLASH_OB_UserConfig+0x80>)
 8002d7c:	2110      	movs	r1, #16
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	611a      	str	r2, [r3, #16]
 
#if defined(FLASH_OBR_BOOT_SEL)
    OB->USER = UserConfig;
#else
    OB->USER = (UserConfig | 0x88U);
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2278      	movs	r2, #120	@ 0x78
 8002d88:	4252      	negs	r2, r2
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <FLASH_OB_UserConfig+0x84>)
 8002d90:	805a      	strh	r2, [r3, #2]
#endif

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d92:	183c      	adds	r4, r7, r0
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <FLASH_OB_UserConfig+0x78>)
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff fbd0 	bl	800253c <FLASH_WaitForLastOperation>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	7023      	strb	r3, [r4, #0]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002da0:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <FLASH_OB_UserConfig+0x80>)
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <FLASH_OB_UserConfig+0x80>)
 8002da6:	2110      	movs	r1, #16
 8002da8:	438a      	bics	r2, r1
 8002daa:	611a      	str	r2, [r3, #16]
  }
  
  return status; 
 8002dac:	230f      	movs	r3, #15
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	0000c350 	.word	0x0000c350
 8002dc0:	200003b8 	.word	0x200003b8
 8002dc4:	40022000 	.word	0x40022000
 8002dc8:	1ffff800 	.word	0x1ffff800

08002dcc <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8002dcc:	b5b0      	push	{r4, r5, r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	000a      	movs	r2, r1
 8002dd6:	1cfb      	adds	r3, r7, #3
 8002dd8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dda:	250f      	movs	r5, #15
 8002ddc:	197b      	adds	r3, r7, r5
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002de2:	197c      	adds	r4, r7, r5
 8002de4:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <FLASH_OB_ProgramData+0x74>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7ff fba8 	bl	800253c <FLASH_WaitForLastOperation>
 8002dec:	0003      	movs	r3, r0
 8002dee:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8002df0:	0028      	movs	r0, r5
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11a      	bne.n	8002e30 <FLASH_OB_ProgramData+0x64>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002dfa:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <FLASH_OB_ProgramData+0x78>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <FLASH_OB_ProgramData+0x7c>)
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <FLASH_OB_ProgramData+0x7c>)
 8002e06:	2110      	movs	r1, #16
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	611a      	str	r2, [r3, #16]
    *(__IO uint16_t*)Address = Data;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	1cfa      	adds	r2, r7, #3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e16:	183c      	adds	r4, r7, r0
 8002e18:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <FLASH_OB_ProgramData+0x74>)
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff fb8e 	bl	800253c <FLASH_WaitForLastOperation>
 8002e20:	0003      	movs	r3, r0
 8002e22:	7023      	strb	r3, [r4, #0]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8002e24:	4b08      	ldr	r3, [pc, #32]	@ (8002e48 <FLASH_OB_ProgramData+0x7c>)
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <FLASH_OB_ProgramData+0x7c>)
 8002e2a:	2110      	movs	r1, #16
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	611a      	str	r2, [r3, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8002e30:	230f      	movs	r3, #15
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	781b      	ldrb	r3, [r3, #0]
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b004      	add	sp, #16
 8002e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	0000c350 	.word	0x0000c350
 8002e44:	200003b8 	.word	0x200003b8
 8002e48:	40022000 	.word	0x40022000

08002e4c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8002e50:	4b02      	ldr	r3, [pc, #8]	@ (8002e5c <FLASH_OB_GetWRP+0x10>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	40022000 	.word	0x40022000

08002e60 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  uint32_t tmp_reg;
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <FLASH_OB_GetRDP+0x30>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	2206      	movs	r2, #6
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	607b      	str	r3, [r7, #4]

  if (tmp_reg == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <FLASH_OB_GetRDP+0x1a>
  {
    return OB_RDP_LEVEL_0;
 8002e76:	23aa      	movs	r3, #170	@ 0xaa
 8002e78:	e006      	b.n	8002e88 <FLASH_OB_GetRDP+0x28>
  }
  else if ((tmp_reg & FLASH_OBR_RDPRT2) == FLASH_OBR_RDPRT2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d001      	beq.n	8002e86 <FLASH_OB_GetRDP+0x26>
  {
    return OB_RDP_LEVEL_2;
 8002e82:	23cc      	movs	r3, #204	@ 0xcc
 8002e84:	e000      	b.n	8002e88 <FLASH_OB_GetRDP+0x28>
  }
  else 
  {
    return OB_RDP_LEVEL_1;
 8002e86:	23bb      	movs	r3, #187	@ 0xbb
  }
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40022000 	.word	0x40022000

08002e94 <FLASH_OB_GetUser>:
  * @retval  The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1), RST_STDBY(Bit2), nBOOT1(Bit4),
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <FLASH_OB_GetUser+0x18>)
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2277      	movs	r2, #119	@ 0x77
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40022000 	.word	0x40022000

08002eb0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <FLASH_PageErase+0x34>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <FLASH_PageErase+0x38>)
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <FLASH_PageErase+0x38>)
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002eca:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <FLASH_PageErase+0x38>)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <FLASH_PageErase+0x38>)
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <FLASH_PageErase+0x38>)
 8002ed6:	2140      	movs	r1, #64	@ 0x40
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	611a      	str	r2, [r3, #16]
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200003b8 	.word	0x200003b8
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efa:	e155      	b.n	80031a8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4091      	lsls	r1, r2
 8002f06:	000a      	movs	r2, r1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d100      	bne.n	8002f14 <HAL_GPIO_Init+0x28>
 8002f12:	e146      	b.n	80031a2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d005      	beq.n	8002f2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2203      	movs	r2, #3
 8002f26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d130      	bne.n	8002f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	0013      	movs	r3, r2
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	0013      	movs	r3, r2
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f62:	2201      	movs	r2, #1
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
 8002f68:	0013      	movs	r3, r2
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	2201      	movs	r2, #1
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	0013      	movs	r3, r2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2203      	movs	r2, #3
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d017      	beq.n	8002fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	0013      	movs	r3, r2
 8002faa:	43da      	mvns	r2, r3
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	0013      	movs	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d123      	bne.n	800301e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	58d3      	ldr	r3, [r2, r3]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	4013      	ands	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	220f      	movs	r2, #15
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2107      	movs	r1, #7
 8003002:	400b      	ands	r3, r1
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	409a      	lsls	r2, r3
 8003008:	0013      	movs	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	0092      	lsls	r2, r2, #2
 800301a:	6939      	ldr	r1, [r7, #16]
 800301c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	43da      	mvns	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2203      	movs	r2, #3
 800303c:	401a      	ands	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	0013      	movs	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	23c0      	movs	r3, #192	@ 0xc0
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	4013      	ands	r3, r2
 800305c:	d100      	bne.n	8003060 <HAL_GPIO_Init+0x174>
 800305e:	e0a0      	b.n	80031a2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003060:	4b57      	ldr	r3, [pc, #348]	@ (80031c0 <HAL_GPIO_Init+0x2d4>)
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	4b56      	ldr	r3, [pc, #344]	@ (80031c0 <HAL_GPIO_Init+0x2d4>)
 8003066:	2101      	movs	r1, #1
 8003068:	430a      	orrs	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
 800306c:	4b54      	ldr	r3, [pc, #336]	@ (80031c0 <HAL_GPIO_Init+0x2d4>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003078:	4a52      	ldr	r2, [pc, #328]	@ (80031c4 <HAL_GPIO_Init+0x2d8>)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	589b      	ldr	r3, [r3, r2]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2203      	movs	r2, #3
 800308a:	4013      	ands	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	409a      	lsls	r2, r3
 8003092:	0013      	movs	r3, r2
 8003094:	43da      	mvns	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	2390      	movs	r3, #144	@ 0x90
 80030a0:	05db      	lsls	r3, r3, #23
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x1ee>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a47      	ldr	r2, [pc, #284]	@ (80031c8 <HAL_GPIO_Init+0x2dc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x1ea>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a46      	ldr	r2, [pc, #280]	@ (80031cc <HAL_GPIO_Init+0x2e0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x1e6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a45      	ldr	r2, [pc, #276]	@ (80031d0 <HAL_GPIO_Init+0x2e4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x1e2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a44      	ldr	r2, [pc, #272]	@ (80031d4 <HAL_GPIO_Init+0x2e8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x1de>
 80030c6:	2304      	movs	r3, #4
 80030c8:	e008      	b.n	80030dc <HAL_GPIO_Init+0x1f0>
 80030ca:	2305      	movs	r3, #5
 80030cc:	e006      	b.n	80030dc <HAL_GPIO_Init+0x1f0>
 80030ce:	2303      	movs	r3, #3
 80030d0:	e004      	b.n	80030dc <HAL_GPIO_Init+0x1f0>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_Init+0x1f0>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x1f0>
 80030da:	2300      	movs	r3, #0
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	2103      	movs	r1, #3
 80030e0:	400a      	ands	r2, r1
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	4093      	lsls	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ec:	4935      	ldr	r1, [pc, #212]	@ (80031c4 <HAL_GPIO_Init+0x2d8>)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fa:	4b37      	ldr	r3, [pc, #220]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43da      	mvns	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	2380      	movs	r3, #128	@ 0x80
 8003110:	035b      	lsls	r3, r3, #13
 8003112:	4013      	ands	r3, r2
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800311e:	4b2e      	ldr	r3, [pc, #184]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003124:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43da      	mvns	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	039b      	lsls	r3, r3, #14
 800313c:	4013      	ands	r3, r2
 800313e:	d003      	beq.n	8003148 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003148:	4b23      	ldr	r3, [pc, #140]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	43da      	mvns	r2, r3
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	029b      	lsls	r3, r3, #10
 8003166:	4013      	ands	r3, r2
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003172:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003178:	4b17      	ldr	r3, [pc, #92]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43da      	mvns	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	025b      	lsls	r3, r3, #9
 8003190:	4013      	ands	r3, r2
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800319c:	4b0e      	ldr	r3, [pc, #56]	@ (80031d8 <HAL_GPIO_Init+0x2ec>)
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	40da      	lsrs	r2, r3
 80031b0:	1e13      	subs	r3, r2, #0
 80031b2:	d000      	beq.n	80031b6 <HAL_GPIO_Init+0x2ca>
 80031b4:	e6a2      	b.n	8002efc <HAL_GPIO_Init+0x10>
  } 
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46c0      	nop			@ (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b006      	add	sp, #24
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000
 80031c8:	48000400 	.word	0x48000400
 80031cc:	48000800 	.word	0x48000800
 80031d0:	48000c00 	.word	0x48000c00
 80031d4:	48001000 	.word	0x48001000
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	000a      	movs	r2, r1
 80031e6:	1cbb      	adds	r3, r7, #2
 80031e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	1cba      	adds	r2, r7, #2
 80031f0:	8812      	ldrh	r2, [r2, #0]
 80031f2:	4013      	ands	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031f6:	230f      	movs	r3, #15
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e003      	b.n	8003208 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003208:	230f      	movs	r3, #15
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	781b      	ldrb	r3, [r3, #0]
  }
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b004      	add	sp, #16
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	0008      	movs	r0, r1
 8003220:	0011      	movs	r1, r2
 8003222:	1cbb      	adds	r3, r7, #2
 8003224:	1c02      	adds	r2, r0, #0
 8003226:	801a      	strh	r2, [r3, #0]
 8003228:	1c7b      	adds	r3, r7, #1
 800322a:	1c0a      	adds	r2, r1, #0
 800322c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800322e:	1c7b      	adds	r3, r7, #1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003236:	1cbb      	adds	r3, r7, #2
 8003238:	881a      	ldrh	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800323e:	e003      	b.n	8003248 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003240:	1cbb      	adds	r3, r7, #2
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f000 fb76 	bl	8003950 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
 800326c:	d100      	bne.n	8003270 <HAL_RCC_OscConfig+0x20>
 800326e:	e08e      	b.n	800338e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003270:	4bc5      	ldr	r3, [pc, #788]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	220c      	movs	r2, #12
 8003276:	4013      	ands	r3, r2
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00e      	beq.n	800329a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800327c:	4bc2      	ldr	r3, [pc, #776]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	220c      	movs	r2, #12
 8003282:	4013      	ands	r3, r2
 8003284:	2b08      	cmp	r3, #8
 8003286:	d117      	bne.n	80032b8 <HAL_RCC_OscConfig+0x68>
 8003288:	4bbf      	ldr	r3, [pc, #764]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	23c0      	movs	r3, #192	@ 0xc0
 800328e:	025b      	lsls	r3, r3, #9
 8003290:	401a      	ands	r2, r3
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	025b      	lsls	r3, r3, #9
 8003296:	429a      	cmp	r2, r3
 8003298:	d10e      	bne.n	80032b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	4bbb      	ldr	r3, [pc, #748]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	029b      	lsls	r3, r3, #10
 80032a2:	4013      	ands	r3, r2
 80032a4:	d100      	bne.n	80032a8 <HAL_RCC_OscConfig+0x58>
 80032a6:	e071      	b.n	800338c <HAL_RCC_OscConfig+0x13c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d000      	beq.n	80032b2 <HAL_RCC_OscConfig+0x62>
 80032b0:	e06c      	b.n	800338c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f000 fb4c 	bl	8003950 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x80>
 80032c0:	4bb1      	ldr	r3, [pc, #708]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4bb0      	ldr	r3, [pc, #704]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032c6:	2180      	movs	r1, #128	@ 0x80
 80032c8:	0249      	lsls	r1, r1, #9
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e02f      	b.n	8003330 <HAL_RCC_OscConfig+0xe0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0xa2>
 80032d8:	4bab      	ldr	r3, [pc, #684]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4baa      	ldr	r3, [pc, #680]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032de:	49ab      	ldr	r1, [pc, #684]	@ (800358c <HAL_RCC_OscConfig+0x33c>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	4ba8      	ldr	r3, [pc, #672]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4ba7      	ldr	r3, [pc, #668]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032ea:	49a9      	ldr	r1, [pc, #676]	@ (8003590 <HAL_RCC_OscConfig+0x340>)
 80032ec:	400a      	ands	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e01e      	b.n	8003330 <HAL_RCC_OscConfig+0xe0>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10e      	bne.n	8003318 <HAL_RCC_OscConfig+0xc8>
 80032fa:	4ba3      	ldr	r3, [pc, #652]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4ba2      	ldr	r3, [pc, #648]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003300:	2180      	movs	r1, #128	@ 0x80
 8003302:	02c9      	lsls	r1, r1, #11
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	4b9f      	ldr	r3, [pc, #636]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b9e      	ldr	r3, [pc, #632]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	0249      	lsls	r1, r1, #9
 8003312:	430a      	orrs	r2, r1
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xe0>
 8003318:	4b9b      	ldr	r3, [pc, #620]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b9a      	ldr	r3, [pc, #616]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800331e:	499b      	ldr	r1, [pc, #620]	@ (800358c <HAL_RCC_OscConfig+0x33c>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	4b98      	ldr	r3, [pc, #608]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4b97      	ldr	r3, [pc, #604]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800332a:	4999      	ldr	r1, [pc, #612]	@ (8003590 <HAL_RCC_OscConfig+0x340>)
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d014      	beq.n	8003362 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fae4 	bl	8001904 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003342:	f7fe fadf 	bl	8001904 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	@ 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e2fd      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003354:	4b8c      	ldr	r3, [pc, #560]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	4013      	ands	r3, r2
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0xf2>
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe facf 	bl	8001904 <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe faca 	bl	8001904 <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e2e8      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b82      	ldr	r3, [pc, #520]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	4013      	ands	r3, r2
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x11c>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2202      	movs	r2, #2
 8003394:	4013      	ands	r3, r2
 8003396:	d100      	bne.n	800339a <HAL_RCC_OscConfig+0x14a>
 8003398:	e06c      	b.n	8003474 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800339a:	4b7b      	ldr	r3, [pc, #492]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	220c      	movs	r2, #12
 80033a0:	4013      	ands	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80033a4:	4b78      	ldr	r3, [pc, #480]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	220c      	movs	r2, #12
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d11f      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1a0>
 80033b0:	4b75      	ldr	r3, [pc, #468]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	23c0      	movs	r3, #192	@ 0xc0
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	401a      	ands	r2, r3
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	429a      	cmp	r2, r3
 80033c0:	d116      	bne.n	80033f0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	4b71      	ldr	r3, [pc, #452]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x188>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e2bb      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	22f8      	movs	r2, #248	@ 0xf8
 80033de:	4393      	bics	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00da      	lsls	r2, r3, #3
 80033e8:	4b67      	ldr	r3, [pc, #412]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ee:	e041      	b.n	8003474 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d024      	beq.n	8003442 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f8:	4b63      	ldr	r3, [pc, #396]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b62      	ldr	r3, [pc, #392]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80033fe:	2101      	movs	r1, #1
 8003400:	430a      	orrs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe fa7e 	bl	8001904 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340e:	f7fe fa79 	bl	8001904 <HAL_GetTick>
 8003412:	0002      	movs	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e297      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b59      	ldr	r3, [pc, #356]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2202      	movs	r2, #2
 8003426:	4013      	ands	r3, r2
 8003428:	d0f1      	beq.n	800340e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	22f8      	movs	r2, #248	@ 0xf8
 8003430:	4393      	bics	r3, r2
 8003432:	0019      	movs	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00da      	lsls	r2, r3, #3
 800343a:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e018      	b.n	8003474 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b51      	ldr	r3, [pc, #324]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003448:	2101      	movs	r1, #1
 800344a:	438a      	bics	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fa59 	bl	8001904 <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003458:	f7fe fa54 	bl	8001904 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e272      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2202      	movs	r2, #2
 8003470:	4013      	ands	r3, r2
 8003472:	d1f1      	bne.n	8003458 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2208      	movs	r2, #8
 800347a:	4013      	ands	r3, r2
 800347c:	d036      	beq.n	80034ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b40      	ldr	r3, [pc, #256]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800348a:	4b3f      	ldr	r3, [pc, #252]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800348c:	2101      	movs	r1, #1
 800348e:	430a      	orrs	r2, r1
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fe fa37 	bl	8001904 <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fa32 	bl	8001904 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e250      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	2202      	movs	r2, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0f1      	beq.n	800349c <HAL_RCC_OscConfig+0x24c>
 80034b8:	e018      	b.n	80034ec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ba:	4b33      	ldr	r3, [pc, #204]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80034bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034be:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80034c0:	2101      	movs	r1, #1
 80034c2:	438a      	bics	r2, r1
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c6:	f7fe fa1d 	bl	8001904 <HAL_GetTick>
 80034ca:	0003      	movs	r3, r0
 80034cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe fa18 	bl	8001904 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e236      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e2:	4b29      	ldr	r3, [pc, #164]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d1f1      	bne.n	80034d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2204      	movs	r2, #4
 80034f2:	4013      	ands	r3, r2
 80034f4:	d100      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2a8>
 80034f6:	e0b5      	b.n	8003664 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f8:	201f      	movs	r0, #31
 80034fa:	183b      	adds	r3, r7, r0
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003500:	4b21      	ldr	r3, [pc, #132]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	055b      	lsls	r3, r3, #21
 8003508:	4013      	ands	r3, r2
 800350a:	d110      	bne.n	800352e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350c:	4b1e      	ldr	r3, [pc, #120]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 8003512:	2180      	movs	r1, #128	@ 0x80
 8003514:	0549      	lsls	r1, r1, #21
 8003516:	430a      	orrs	r2, r1
 8003518:	61da      	str	r2, [r3, #28]
 800351a:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800351c:	69da      	ldr	r2, [r3, #28]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	055b      	lsls	r3, r3, #21
 8003522:	4013      	ands	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003528:	183b      	adds	r3, r7, r0
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_RCC_OscConfig+0x344>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	@ 0x80
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4013      	ands	r3, r2
 8003538:	d11a      	bne.n	8003570 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_RCC_OscConfig+0x344>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <HAL_RCC_OscConfig+0x344>)
 8003540:	2180      	movs	r1, #128	@ 0x80
 8003542:	0049      	lsls	r1, r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003548:	f7fe f9dc 	bl	8001904 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe f9d7 	bl	8001904 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b64      	cmp	r3, #100	@ 0x64
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1f5      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_RCC_OscConfig+0x344>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4013      	ands	r3, r2
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10f      	bne.n	8003598 <HAL_RCC_OscConfig+0x348>
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	4b02      	ldr	r3, [pc, #8]	@ (8003588 <HAL_RCC_OscConfig+0x338>)
 800357e:	2101      	movs	r1, #1
 8003580:	430a      	orrs	r2, r1
 8003582:	621a      	str	r2, [r3, #32]
 8003584:	e036      	b.n	80035f4 <HAL_RCC_OscConfig+0x3a4>
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	40021000 	.word	0x40021000
 800358c:	fffeffff 	.word	0xfffeffff
 8003590:	fffbffff 	.word	0xfffbffff
 8003594:	40007000 	.word	0x40007000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10c      	bne.n	80035ba <HAL_RCC_OscConfig+0x36a>
 80035a0:	4bca      	ldr	r3, [pc, #808]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	4bc9      	ldr	r3, [pc, #804]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035a6:	2101      	movs	r1, #1
 80035a8:	438a      	bics	r2, r1
 80035aa:	621a      	str	r2, [r3, #32]
 80035ac:	4bc7      	ldr	r3, [pc, #796]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	4bc6      	ldr	r3, [pc, #792]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035b2:	2104      	movs	r1, #4
 80035b4:	438a      	bics	r2, r1
 80035b6:	621a      	str	r2, [r3, #32]
 80035b8:	e01c      	b.n	80035f4 <HAL_RCC_OscConfig+0x3a4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x38c>
 80035c2:	4bc2      	ldr	r3, [pc, #776]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	4bc1      	ldr	r3, [pc, #772]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035c8:	2104      	movs	r1, #4
 80035ca:	430a      	orrs	r2, r1
 80035cc:	621a      	str	r2, [r3, #32]
 80035ce:	4bbf      	ldr	r3, [pc, #764]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	4bbe      	ldr	r3, [pc, #760]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	621a      	str	r2, [r3, #32]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0x3a4>
 80035dc:	4bbb      	ldr	r3, [pc, #748]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	4bba      	ldr	r3, [pc, #744]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035e2:	2101      	movs	r1, #1
 80035e4:	438a      	bics	r2, r1
 80035e6:	621a      	str	r2, [r3, #32]
 80035e8:	4bb8      	ldr	r3, [pc, #736]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	4bb7      	ldr	r3, [pc, #732]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80035ee:	2104      	movs	r1, #4
 80035f0:	438a      	bics	r2, r1
 80035f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d014      	beq.n	8003626 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe f982 	bl	8001904 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	e009      	b.n	800361a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fe f97d 	bl	8001904 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	4aaf      	ldr	r2, [pc, #700]	@ (80038d0 <HAL_RCC_OscConfig+0x680>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e19a      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361a:	4bac      	ldr	r3, [pc, #688]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x3b6>
 8003624:	e013      	b.n	800364e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fe f96d 	bl	8001904 <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	e009      	b.n	8003644 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe f968 	bl	8001904 <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	4aa5      	ldr	r2, [pc, #660]	@ (80038d0 <HAL_RCC_OscConfig+0x680>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e185      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4ba1      	ldr	r3, [pc, #644]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	2202      	movs	r2, #2
 800364a:	4013      	ands	r3, r2
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800364e:	231f      	movs	r3, #31
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b9c      	ldr	r3, [pc, #624]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	4b9b      	ldr	r3, [pc, #620]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800365e:	499d      	ldr	r1, [pc, #628]	@ (80038d4 <HAL_RCC_OscConfig+0x684>)
 8003660:	400a      	ands	r2, r1
 8003662:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2210      	movs	r2, #16
 800366a:	4013      	ands	r3, r2
 800366c:	d063      	beq.n	8003736 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d12a      	bne.n	80036cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003676:	4b95      	ldr	r3, [pc, #596]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800367a:	4b94      	ldr	r3, [pc, #592]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800367c:	2104      	movs	r1, #4
 800367e:	430a      	orrs	r2, r1
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003682:	4b92      	ldr	r3, [pc, #584]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003686:	4b91      	ldr	r3, [pc, #580]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003688:	2101      	movs	r1, #1
 800368a:	430a      	orrs	r2, r1
 800368c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fe f939 	bl	8001904 <HAL_GetTick>
 8003692:	0003      	movs	r3, r0
 8003694:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003698:	f7fe f934 	bl	8001904 <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e152      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036aa:	4b88      	ldr	r3, [pc, #544]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	2202      	movs	r2, #2
 80036b0:	4013      	ands	r3, r2
 80036b2:	d0f1      	beq.n	8003698 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036b4:	4b85      	ldr	r3, [pc, #532]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	22f8      	movs	r2, #248	@ 0xf8
 80036ba:	4393      	bics	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	00da      	lsls	r2, r3, #3
 80036c4:	4b81      	ldr	r3, [pc, #516]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036ca:	e034      	b.n	8003736 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	3305      	adds	r3, #5
 80036d2:	d111      	bne.n	80036f8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80036d4:	4b7d      	ldr	r3, [pc, #500]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d8:	4b7c      	ldr	r3, [pc, #496]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036da:	2104      	movs	r1, #4
 80036dc:	438a      	bics	r2, r1
 80036de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036e0:	4b7a      	ldr	r3, [pc, #488]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e4:	22f8      	movs	r2, #248	@ 0xf8
 80036e6:	4393      	bics	r3, r2
 80036e8:	0019      	movs	r1, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	00da      	lsls	r2, r3, #3
 80036f0:	4b76      	ldr	r3, [pc, #472]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036f2:	430a      	orrs	r2, r1
 80036f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80036f6:	e01e      	b.n	8003736 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80036f8:	4b74      	ldr	r3, [pc, #464]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036fc:	4b73      	ldr	r3, [pc, #460]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80036fe:	2104      	movs	r1, #4
 8003700:	430a      	orrs	r2, r1
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003704:	4b71      	ldr	r3, [pc, #452]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003708:	4b70      	ldr	r3, [pc, #448]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800370a:	2101      	movs	r1, #1
 800370c:	438a      	bics	r2, r1
 800370e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fe f8f8 	bl	8001904 <HAL_GetTick>
 8003714:	0003      	movs	r3, r0
 8003716:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800371a:	f7fe f8f3 	bl	8001904 <HAL_GetTick>
 800371e:	0002      	movs	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e111      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800372c:	4b67      	ldr	r3, [pc, #412]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d1f1      	bne.n	800371a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2220      	movs	r2, #32
 800373c:	4013      	ands	r3, r2
 800373e:	d05c      	beq.n	80037fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003740:	4b62      	ldr	r3, [pc, #392]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	220c      	movs	r2, #12
 8003746:	4013      	ands	r3, r2
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d00e      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800374c:	4b5f      	ldr	r3, [pc, #380]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	220c      	movs	r2, #12
 8003752:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003754:	2b08      	cmp	r3, #8
 8003756:	d114      	bne.n	8003782 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003758:	4b5c      	ldr	r3, [pc, #368]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	23c0      	movs	r3, #192	@ 0xc0
 800375e:	025b      	lsls	r3, r3, #9
 8003760:	401a      	ands	r2, r3
 8003762:	23c0      	movs	r3, #192	@ 0xc0
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	429a      	cmp	r2, r3
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800376a:	4b58      	ldr	r3, [pc, #352]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800376c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376e:	2380      	movs	r3, #128	@ 0x80
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	4013      	ands	r3, r2
 8003774:	d040      	beq.n	80037f8 <HAL_RCC_OscConfig+0x5a8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d03c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e6      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01b      	beq.n	80037c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800378a:	4b50      	ldr	r3, [pc, #320]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800378c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800378e:	4b4f      	ldr	r3, [pc, #316]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003790:	2180      	movs	r1, #128	@ 0x80
 8003792:	0249      	lsls	r1, r1, #9
 8003794:	430a      	orrs	r2, r1
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe f8b4 	bl	8001904 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a2:	f7fe f8af 	bl	8001904 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0cd      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80037b4:	4b45      	ldr	r3, [pc, #276]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80037b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	029b      	lsls	r3, r3, #10
 80037bc:	4013      	ands	r3, r2
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x552>
 80037c0:	e01b      	b.n	80037fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80037c2:	4b42      	ldr	r3, [pc, #264]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80037c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80037c8:	4943      	ldr	r1, [pc, #268]	@ (80038d8 <HAL_RCC_OscConfig+0x688>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ce:	f7fe f899 	bl	8001904 <HAL_GetTick>
 80037d2:	0003      	movs	r3, r0
 80037d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d8:	f7fe f894 	bl	8001904 <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0b2      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80037ea:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80037ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	4013      	ands	r3, r2
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x588>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80037f8:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d100      	bne.n	8003804 <HAL_RCC_OscConfig+0x5b4>
 8003802:	e0a4      	b.n	800394e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003804:	4b31      	ldr	r3, [pc, #196]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	220c      	movs	r2, #12
 800380a:	4013      	ands	r3, r2
 800380c:	2b08      	cmp	r3, #8
 800380e:	d100      	bne.n	8003812 <HAL_RCC_OscConfig+0x5c2>
 8003810:	e078      	b.n	8003904 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	2b02      	cmp	r3, #2
 8003818:	d14c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b2c      	ldr	r3, [pc, #176]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003820:	492e      	ldr	r1, [pc, #184]	@ (80038dc <HAL_RCC_OscConfig+0x68c>)
 8003822:	400a      	ands	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003826:	f7fe f86d 	bl	8001904 <HAL_GetTick>
 800382a:	0003      	movs	r3, r0
 800382c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe f868 	bl	8001904 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e086      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	049b      	lsls	r3, r3, #18
 800384a:	4013      	ands	r3, r2
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384e:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	220f      	movs	r2, #15
 8003854:	4393      	bics	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800385e:	430a      	orrs	r2, r1
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a1e      	ldr	r2, [pc, #120]	@ (80038e0 <HAL_RCC_OscConfig+0x690>)
 8003868:	4013      	ands	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	431a      	orrs	r2, r3
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 8003882:	2180      	movs	r1, #128	@ 0x80
 8003884:	0449      	lsls	r1, r1, #17
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe f83b 	bl	8001904 <HAL_GetTick>
 800388e:	0003      	movs	r3, r0
 8003890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe f836 	bl	8001904 <HAL_GetTick>
 8003898:	0002      	movs	r2, r0
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e054      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a6:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	049b      	lsls	r3, r3, #18
 80038ae:	4013      	ands	r3, r2
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x644>
 80038b2:	e04c      	b.n	800394e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <HAL_RCC_OscConfig+0x67c>)
 80038ba:	4908      	ldr	r1, [pc, #32]	@ (80038dc <HAL_RCC_OscConfig+0x68c>)
 80038bc:	400a      	ands	r2, r1
 80038be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe f820 	bl	8001904 <HAL_GetTick>
 80038c4:	0003      	movs	r3, r0
 80038c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	e015      	b.n	80038f6 <HAL_RCC_OscConfig+0x6a6>
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	40021000 	.word	0x40021000
 80038d0:	00001388 	.word	0x00001388
 80038d4:	efffffff 	.word	0xefffffff
 80038d8:	fffeffff 	.word	0xfffeffff
 80038dc:	feffffff 	.word	0xfeffffff
 80038e0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fe f80e 	bl	8001904 <HAL_GetTick>
 80038e8:	0002      	movs	r2, r0
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e02c      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f6:	4b18      	ldr	r3, [pc, #96]	@ (8003958 <HAL_RCC_OscConfig+0x708>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	2380      	movs	r3, #128	@ 0x80
 80038fc:	049b      	lsls	r3, r3, #18
 80038fe:	4013      	ands	r3, r2
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x694>
 8003902:	e024      	b.n	800394e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e01f      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <HAL_RCC_OscConfig+0x708>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003916:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <HAL_RCC_OscConfig+0x708>)
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	23c0      	movs	r3, #192	@ 0xc0
 8003920:	025b      	lsls	r3, r3, #9
 8003922:	401a      	ands	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	429a      	cmp	r2, r3
 800392a:	d10e      	bne.n	800394a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	220f      	movs	r2, #15
 8003930:	401a      	ands	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d107      	bne.n	800394a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	23f0      	movs	r3, #240	@ 0xf0
 800393e:	039b      	lsls	r3, r3, #14
 8003940:	401a      	ands	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b008      	add	sp, #32
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0bf      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b61      	ldr	r3, [pc, #388]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d911      	bls.n	80039a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b5e      	ldr	r3, [pc, #376]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2201      	movs	r2, #1
 8003984:	4393      	bics	r3, r2
 8003986:	0019      	movs	r1, r3
 8003988:	4b5b      	ldr	r3, [pc, #364]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003990:	4b59      	ldr	r3, [pc, #356]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	4013      	ands	r3, r2
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0a6      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2202      	movs	r2, #2
 80039a8:	4013      	ands	r3, r2
 80039aa:	d015      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2204      	movs	r2, #4
 80039b2:	4013      	ands	r3, r2
 80039b4:	d006      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039b6:	4b51      	ldr	r3, [pc, #324]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	4b50      	ldr	r3, [pc, #320]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 80039bc:	21e0      	movs	r1, #224	@ 0xe0
 80039be:	00c9      	lsls	r1, r1, #3
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c4:	4b4d      	ldr	r3, [pc, #308]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	22f0      	movs	r2, #240	@ 0xf0
 80039ca:	4393      	bics	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b4a      	ldr	r3, [pc, #296]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	d04c      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b44      	ldr	r3, [pc, #272]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	029b      	lsls	r3, r3, #10
 80039f2:	4013      	ands	r3, r2
 80039f4:	d120      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e07a      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	4b3e      	ldr	r3, [pc, #248]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	@ 0x80
 8003a08:	049b      	lsls	r3, r3, #18
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d114      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06e      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a1a:	4b38      	ldr	r3, [pc, #224]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	029b      	lsls	r3, r3, #10
 8003a22:	4013      	ands	r3, r2
 8003a24:	d108      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e062      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b34      	ldr	r3, [pc, #208]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	4013      	ands	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e05b      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a38:	4b30      	ldr	r3, [pc, #192]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4393      	bics	r3, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	4b2d      	ldr	r3, [pc, #180]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd ff5a 	bl	8001904 <HAL_GetTick>
 8003a50:	0003      	movs	r3, r0
 8003a52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a54:	e009      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a56:	f7fd ff55 	bl	8001904 <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	4a27      	ldr	r2, [pc, #156]	@ (8003b00 <HAL_RCC_ClockConfig+0x1a4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e042      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	220c      	movs	r2, #12
 8003a70:	401a      	ands	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1ec      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d211      	bcs.n	8003aae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4393      	bics	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	4b18      	ldr	r3, [pc, #96]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9c:	4b16      	ldr	r3, [pc, #88]	@ (8003af8 <HAL_RCC_ClockConfig+0x19c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e020      	b.n	8003af0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b10      	ldr	r3, [pc, #64]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4a11      	ldr	r2, [pc, #68]	@ (8003b04 <HAL_RCC_ClockConfig+0x1a8>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003acc:	f000 f820 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ad0:	0001      	movs	r1, r0
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <HAL_RCC_ClockConfig+0x1a0>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	220f      	movs	r2, #15
 8003ada:	4013      	ands	r3, r2
 8003adc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <HAL_RCC_ClockConfig+0x1ac>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	000a      	movs	r2, r1
 8003ae2:	40da      	lsrs	r2, r3
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x1b0>)
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7fd fec5 	bl	8001878 <HAL_InitTick>
  
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40021000 	.word	0x40021000
 8003b00:	00001388 	.word	0x00001388
 8003b04:	fffff8ff 	.word	0xfffff8ff
 8003b08:	08005880 	.word	0x08005880
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	220c      	movs	r2, #12
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d046      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xb8>
 8003b3a:	d848      	bhi.n	8003bce <HAL_RCC_GetSysClockFreq+0xbe>
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d002      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0x36>
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d003      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x3c>
 8003b44:	e043      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b46:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b48:	613b      	str	r3, [r7, #16]
      break;
 8003b4a:	e043      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	0c9b      	lsrs	r3, r3, #18
 8003b50:	220f      	movs	r2, #15
 8003b52:	4013      	ands	r3, r2
 8003b54:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b5a:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	220f      	movs	r2, #15
 8003b60:	4013      	ands	r3, r2
 8003b62:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <HAL_RCC_GetSysClockFreq+0xdc>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	23c0      	movs	r3, #192	@ 0xc0
 8003b6c:	025b      	lsls	r3, r3, #9
 8003b6e:	401a      	ands	r2, r3
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	025b      	lsls	r3, r3, #9
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d109      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	481a      	ldr	r0, [pc, #104]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b7c:	f7fc fad6 	bl	800012c <__udivsi3>
 8003b80:	0003      	movs	r3, r0
 8003b82:	001a      	movs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4353      	muls	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e01a      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	23c0      	movs	r3, #192	@ 0xc0
 8003b90:	025b      	lsls	r3, r3, #9
 8003b92:	401a      	ands	r2, r3
 8003b94:	23c0      	movs	r3, #192	@ 0xc0
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d109      	bne.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4814      	ldr	r0, [pc, #80]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003ba0:	f7fc fac4 	bl	800012c <__udivsi3>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4353      	muls	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bb4:	f7fc faba 	bl	800012c <__udivsi3>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	001a      	movs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4353      	muls	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	613b      	str	r3, [r7, #16]
      break;
 8003bc6:	e005      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003bca:	613b      	str	r3, [r7, #16]
      break;
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003bd0:	613b      	str	r3, [r7, #16]
      break;
 8003bd2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003bd4:	693b      	ldr	r3, [r7, #16]
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b006      	add	sp, #24
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	40021000 	.word	0x40021000
 8003be4:	007a1200 	.word	0x007a1200
 8003be8:	08005898 	.word	0x08005898
 8003bec:	080058a8 	.word	0x080058a8
 8003bf0:	02dc6c00 	.word	0x02dc6c00

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b02      	ldr	r3, [pc, #8]	@ (8003c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	2000000c 	.word	0x2000000c

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003c0c:	f7ff fff2 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c10:	0001      	movs	r1, r0
 8003c12:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	2207      	movs	r2, #7
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	40d9      	lsrs	r1, r3
 8003c22:	000b      	movs	r3, r1
}    
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	08005890 	.word	0x08005890

08003c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2380      	movs	r3, #128	@ 0x80
 8003c4a:	025b      	lsls	r3, r3, #9
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003c50:	e08e      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003c52:	2017      	movs	r0, #23
 8003c54:	183b      	adds	r3, r7, r0
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	055b      	lsls	r3, r3, #21
 8003c62:	4013      	ands	r3, r2
 8003c64:	d110      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	4b6b      	ldr	r3, [pc, #428]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c6c:	2180      	movs	r1, #128	@ 0x80
 8003c6e:	0549      	lsls	r1, r1, #21
 8003c70:	430a      	orrs	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
 8003c74:	4b67      	ldr	r3, [pc, #412]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	2380      	movs	r3, #128	@ 0x80
 8003c7a:	055b      	lsls	r3, r3, #21
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4013      	ands	r3, r2
 8003c92:	d11a      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c94:	4b60      	ldr	r3, [pc, #384]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003c9a:	2180      	movs	r1, #128	@ 0x80
 8003c9c:	0049      	lsls	r1, r1, #1
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fe2f 	bl	8001904 <HAL_GetTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fd fe2a 	bl	8001904 <HAL_GetTick>
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0a6      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b56      	ldr	r3, [pc, #344]	@ (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cca:	4b52      	ldr	r3, [pc, #328]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	23c0      	movs	r3, #192	@ 0xc0
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d034      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	23c0      	movs	r3, #192	@ 0xc0
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d02c      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cec:	4b49      	ldr	r3, [pc, #292]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	4b46      	ldr	r3, [pc, #280]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003cfc:	2180      	movs	r1, #128	@ 0x80
 8003cfe:	0249      	lsls	r1, r1, #9
 8003d00:	430a      	orrs	r2, r1
 8003d02:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d04:	4b43      	ldr	r3, [pc, #268]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	4b42      	ldr	r3, [pc, #264]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d0a:	4945      	ldr	r1, [pc, #276]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d10:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7fd fdf1 	bl	8001904 <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d26:	e009      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fd fdec 	bl	8001904 <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e067      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	2202      	movs	r2, #2
 8003d42:	4013      	ands	r3, r2
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a34      	ldr	r2, [pc, #208]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	0019      	movs	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	4b2f      	ldr	r3, [pc, #188]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d56:	430a      	orrs	r2, r1
 8003d58:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d5a:	2317      	movs	r3, #23
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d105      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d64:	4b2b      	ldr	r3, [pc, #172]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	4b2a      	ldr	r3, [pc, #168]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d6a:	492f      	ldr	r1, [pc, #188]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	d009      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d7a:	4b26      	ldr	r3, [pc, #152]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	2203      	movs	r2, #3
 8003d80:	4393      	bics	r3, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	4b22      	ldr	r3, [pc, #136]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2202      	movs	r2, #2
 8003d94:	4013      	ands	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d98:	4b1e      	ldr	r3, [pc, #120]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	4a23      	ldr	r2, [pc, #140]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2220      	movs	r2, #32
 8003db2:	4013      	ands	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db6:	4b17      	ldr	r3, [pc, #92]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dba:	2210      	movs	r2, #16
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	4b13      	ldr	r3, [pc, #76]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d009      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	4393      	bics	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699a      	ldr	r2, [r3, #24]
 8003de4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003de6:	430a      	orrs	r2, r1
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4013      	ands	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003df6:	4b07      	ldr	r3, [pc, #28]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	2240      	movs	r2, #64	@ 0x40
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	695a      	ldr	r2, [r3, #20]
 8003e04:	4b03      	ldr	r3, [pc, #12]	@ (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	fffffcff 	.word	0xfffffcff
 8003e20:	fffeffff 	.word	0xfffeffff
 8003e24:	00001388 	.word	0x00001388
 8003e28:	efffffff 	.word	0xefffffff
 8003e2c:	fffcffff 	.word	0xfffcffff

08003e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e044      	b.n	8003ecc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d107      	bne.n	8003e5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2278      	movs	r2, #120	@ 0x78
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fd fb99 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2224      	movs	r2, #36	@ 0x24
 8003e5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	438a      	bics	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fb3c 	bl	80044f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 f9b0 	bl	80041e8 <UART_SetConfig>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01c      	b.n	8003ecc <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	490d      	ldr	r1, [pc, #52]	@ (8003ed4 <HAL_UART_Init+0xa4>)
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	212a      	movs	r1, #42	@ 0x2a
 8003eae:	438a      	bics	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fbcb 	bl	8004660 <UART_CheckIdleState>
 8003eca:	0003      	movs	r3, r0
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	ffffb7ff 	.word	0xffffb7ff

08003ed8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	1dbb      	adds	r3, r7, #6
 8003ee6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d000      	beq.n	8003ef2 <HAL_UART_Transmit+0x1a>
 8003ef0:	e08c      	b.n	800400c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_UART_Transmit+0x28>
 8003ef8:	1dbb      	adds	r3, r7, #6
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e084      	b.n	800400e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	015b      	lsls	r3, r3, #5
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d109      	bne.n	8003f24 <HAL_UART_Transmit+0x4c>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d001      	beq.n	8003f24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e074      	b.n	800400e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2284      	movs	r2, #132	@ 0x84
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2221      	movs	r2, #33	@ 0x21
 8003f30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f32:	f7fd fce7 	bl	8001904 <HAL_GetTick>
 8003f36:	0003      	movs	r3, r0
 8003f38:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1dba      	adds	r2, r7, #6
 8003f3e:	2150      	movs	r1, #80	@ 0x50
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1dba      	adds	r2, r7, #6
 8003f48:	2152      	movs	r1, #82	@ 0x52
 8003f4a:	8812      	ldrh	r2, [r2, #0]
 8003f4c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	015b      	lsls	r3, r3, #5
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d108      	bne.n	8003f6c <HAL_UART_Transmit+0x94>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e003      	b.n	8003f74 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f74:	e02f      	b.n	8003fd6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	0013      	movs	r3, r2
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	@ 0x80
 8003f84:	f000 fc14 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d004      	beq.n	8003f96 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e03b      	b.n	800400e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	05d2      	lsls	r2, r2, #23
 8003fa6:	0dd2      	lsrs	r2, r2, #23
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	3302      	adds	r3, #2
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e007      	b.n	8003fc4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2252      	movs	r2, #82	@ 0x52
 8003fc8:	5a9b      	ldrh	r3, [r3, r2]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2252      	movs	r2, #82	@ 0x52
 8003fd4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2252      	movs	r2, #82	@ 0x52
 8003fda:	5a9b      	ldrh	r3, [r3, r2]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1c9      	bne.n	8003f76 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	0013      	movs	r3, r2
 8003fec:	2200      	movs	r2, #0
 8003fee:	2140      	movs	r1, #64	@ 0x40
 8003ff0:	f000 fbde 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e005      	b.n	800400e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	b008      	add	sp, #32
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	@ 0x28
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	1dbb      	adds	r3, r7, #6
 8004026:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2280      	movs	r2, #128	@ 0x80
 800402c:	589b      	ldr	r3, [r3, r2]
 800402e:	2b20      	cmp	r3, #32
 8004030:	d000      	beq.n	8004034 <HAL_UART_Receive+0x1c>
 8004032:	e0d1      	b.n	80041d8 <HAL_UART_Receive+0x1c0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_UART_Receive+0x2a>
 800403a:	1dbb      	adds	r3, r7, #6
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0c9      	b.n	80041da <HAL_UART_Receive+0x1c2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	2380      	movs	r3, #128	@ 0x80
 800404c:	015b      	lsls	r3, r3, #5
 800404e:	429a      	cmp	r2, r3
 8004050:	d109      	bne.n	8004066 <HAL_UART_Receive+0x4e>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2201      	movs	r2, #1
 800405e:	4013      	ands	r3, r2
 8004060:	d001      	beq.n	8004066 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0b9      	b.n	80041da <HAL_UART_Receive+0x1c2>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2284      	movs	r2, #132	@ 0x84
 800406a:	2100      	movs	r1, #0
 800406c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2280      	movs	r2, #128	@ 0x80
 8004072:	2122      	movs	r1, #34	@ 0x22
 8004074:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407c:	f7fd fc42 	bl	8001904 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1dba      	adds	r2, r7, #6
 8004088:	2158      	movs	r1, #88	@ 0x58
 800408a:	8812      	ldrh	r2, [r2, #0]
 800408c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1dba      	adds	r2, r7, #6
 8004092:	215a      	movs	r1, #90	@ 0x5a
 8004094:	8812      	ldrh	r2, [r2, #0]
 8004096:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	2380      	movs	r3, #128	@ 0x80
 800409e:	015b      	lsls	r3, r3, #5
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d10d      	bne.n	80040c0 <HAL_UART_Receive+0xa8>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_UART_Receive+0x9e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	225c      	movs	r2, #92	@ 0x5c
 80040b0:	494c      	ldr	r1, [pc, #304]	@ (80041e4 <HAL_UART_Receive+0x1cc>)
 80040b2:	5299      	strh	r1, [r3, r2]
 80040b4:	e02e      	b.n	8004114 <HAL_UART_Receive+0xfc>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	225c      	movs	r2, #92	@ 0x5c
 80040ba:	21ff      	movs	r1, #255	@ 0xff
 80040bc:	5299      	strh	r1, [r3, r2]
 80040be:	e029      	b.n	8004114 <HAL_UART_Receive+0xfc>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <HAL_UART_Receive+0xcc>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <HAL_UART_Receive+0xc2>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	225c      	movs	r2, #92	@ 0x5c
 80040d4:	21ff      	movs	r1, #255	@ 0xff
 80040d6:	5299      	strh	r1, [r3, r2]
 80040d8:	e01c      	b.n	8004114 <HAL_UART_Receive+0xfc>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	225c      	movs	r2, #92	@ 0x5c
 80040de:	217f      	movs	r1, #127	@ 0x7f
 80040e0:	5299      	strh	r1, [r3, r2]
 80040e2:	e017      	b.n	8004114 <HAL_UART_Receive+0xfc>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	055b      	lsls	r3, r3, #21
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d10d      	bne.n	800410c <HAL_UART_Receive+0xf4>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <HAL_UART_Receive+0xea>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	225c      	movs	r2, #92	@ 0x5c
 80040fc:	217f      	movs	r1, #127	@ 0x7f
 80040fe:	5299      	strh	r1, [r3, r2]
 8004100:	e008      	b.n	8004114 <HAL_UART_Receive+0xfc>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	225c      	movs	r2, #92	@ 0x5c
 8004106:	213f      	movs	r1, #63	@ 0x3f
 8004108:	5299      	strh	r1, [r3, r2]
 800410a:	e003      	b.n	8004114 <HAL_UART_Receive+0xfc>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	225c      	movs	r2, #92	@ 0x5c
 8004110:	2100      	movs	r1, #0
 8004112:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004114:	2312      	movs	r3, #18
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	215c      	movs	r1, #92	@ 0x5c
 800411c:	5a52      	ldrh	r2, [r2, r1]
 800411e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	2380      	movs	r3, #128	@ 0x80
 8004126:	015b      	lsls	r3, r3, #5
 8004128:	429a      	cmp	r2, r3
 800412a:	d108      	bne.n	800413e <HAL_UART_Receive+0x126>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d104      	bne.n	800413e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	e003      	b.n	8004146 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004146:	e03b      	b.n	80041c0 <HAL_UART_Receive+0x1a8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	0013      	movs	r3, r2
 8004152:	2200      	movs	r2, #0
 8004154:	2120      	movs	r1, #32
 8004156:	f000 fb2b 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d005      	beq.n	800416a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2280      	movs	r2, #128	@ 0x80
 8004162:	2120      	movs	r1, #32
 8004164:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e037      	b.n	80041da <HAL_UART_Receive+0x1c2>
      }
      if (pdata8bits == NULL)
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10e      	bne.n	800418e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004176:	b29b      	uxth	r3, r3
 8004178:	2212      	movs	r2, #18
 800417a:	18ba      	adds	r2, r7, r2
 800417c:	8812      	ldrh	r2, [r2, #0]
 800417e:	4013      	ands	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	3302      	adds	r3, #2
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e00f      	b.n	80041ae <HAL_UART_Receive+0x196>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004194:	b29b      	uxth	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2212      	movs	r2, #18
 800419a:	18ba      	adds	r2, r7, r2
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	4013      	ands	r3, r2
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	3301      	adds	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	225a      	movs	r2, #90	@ 0x5a
 80041b2:	5a9b      	ldrh	r3, [r3, r2]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b299      	uxth	r1, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	225a      	movs	r2, #90	@ 0x5a
 80041be:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	225a      	movs	r2, #90	@ 0x5a
 80041c4:	5a9b      	ldrh	r3, [r3, r2]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1bd      	bne.n	8004148 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2280      	movs	r2, #128	@ 0x80
 80041d0:	2120      	movs	r1, #32
 80041d2:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <HAL_UART_Receive+0x1c2>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b008      	add	sp, #32
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			@ (mov r8, r8)
 80041e4:	000001ff 	.word	0x000001ff

080041e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f0:	231e      	movs	r3, #30
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4aaf      	ldr	r2, [pc, #700]	@ (80044d4 <UART_SetConfig+0x2ec>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	430a      	orrs	r2, r1
 8004224:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4aaa      	ldr	r2, [pc, #680]	@ (80044d8 <UART_SetConfig+0x2f0>)
 800422e:	4013      	ands	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4aa1      	ldr	r2, [pc, #644]	@ (80044dc <UART_SetConfig+0x2f4>)
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a9d      	ldr	r2, [pc, #628]	@ (80044e0 <UART_SetConfig+0x2f8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d127      	bne.n	80042be <UART_SetConfig+0xd6>
 800426e:	4b9d      	ldr	r3, [pc, #628]	@ (80044e4 <UART_SetConfig+0x2fc>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	2203      	movs	r2, #3
 8004274:	4013      	ands	r3, r2
 8004276:	2b03      	cmp	r3, #3
 8004278:	d00d      	beq.n	8004296 <UART_SetConfig+0xae>
 800427a:	d81b      	bhi.n	80042b4 <UART_SetConfig+0xcc>
 800427c:	2b02      	cmp	r3, #2
 800427e:	d014      	beq.n	80042aa <UART_SetConfig+0xc2>
 8004280:	d818      	bhi.n	80042b4 <UART_SetConfig+0xcc>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <UART_SetConfig+0xa4>
 8004286:	2b01      	cmp	r3, #1
 8004288:	d00a      	beq.n	80042a0 <UART_SetConfig+0xb8>
 800428a:	e013      	b.n	80042b4 <UART_SetConfig+0xcc>
 800428c:	231f      	movs	r3, #31
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e065      	b.n	8004362 <UART_SetConfig+0x17a>
 8004296:	231f      	movs	r3, #31
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e060      	b.n	8004362 <UART_SetConfig+0x17a>
 80042a0:	231f      	movs	r3, #31
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	2204      	movs	r2, #4
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e05b      	b.n	8004362 <UART_SetConfig+0x17a>
 80042aa:	231f      	movs	r3, #31
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	2208      	movs	r2, #8
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e056      	b.n	8004362 <UART_SetConfig+0x17a>
 80042b4:	231f      	movs	r3, #31
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	2210      	movs	r2, #16
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e051      	b.n	8004362 <UART_SetConfig+0x17a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a89      	ldr	r2, [pc, #548]	@ (80044e8 <UART_SetConfig+0x300>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d134      	bne.n	8004332 <UART_SetConfig+0x14a>
 80042c8:	4b86      	ldr	r3, [pc, #536]	@ (80044e4 <UART_SetConfig+0x2fc>)
 80042ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042cc:	23c0      	movs	r3, #192	@ 0xc0
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	4013      	ands	r3, r2
 80042d2:	22c0      	movs	r2, #192	@ 0xc0
 80042d4:	0292      	lsls	r2, r2, #10
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d017      	beq.n	800430a <UART_SetConfig+0x122>
 80042da:	22c0      	movs	r2, #192	@ 0xc0
 80042dc:	0292      	lsls	r2, r2, #10
 80042de:	4293      	cmp	r3, r2
 80042e0:	d822      	bhi.n	8004328 <UART_SetConfig+0x140>
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	0292      	lsls	r2, r2, #10
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d019      	beq.n	800431e <UART_SetConfig+0x136>
 80042ea:	2280      	movs	r2, #128	@ 0x80
 80042ec:	0292      	lsls	r2, r2, #10
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d81a      	bhi.n	8004328 <UART_SetConfig+0x140>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <UART_SetConfig+0x118>
 80042f6:	2280      	movs	r2, #128	@ 0x80
 80042f8:	0252      	lsls	r2, r2, #9
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00a      	beq.n	8004314 <UART_SetConfig+0x12c>
 80042fe:	e013      	b.n	8004328 <UART_SetConfig+0x140>
 8004300:	231f      	movs	r3, #31
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e02b      	b.n	8004362 <UART_SetConfig+0x17a>
 800430a:	231f      	movs	r3, #31
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e026      	b.n	8004362 <UART_SetConfig+0x17a>
 8004314:	231f      	movs	r3, #31
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2204      	movs	r2, #4
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e021      	b.n	8004362 <UART_SetConfig+0x17a>
 800431e:	231f      	movs	r3, #31
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2208      	movs	r2, #8
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e01c      	b.n	8004362 <UART_SetConfig+0x17a>
 8004328:	231f      	movs	r3, #31
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2210      	movs	r2, #16
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e017      	b.n	8004362 <UART_SetConfig+0x17a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6d      	ldr	r2, [pc, #436]	@ (80044ec <UART_SetConfig+0x304>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d104      	bne.n	8004346 <UART_SetConfig+0x15e>
 800433c:	231f      	movs	r3, #31
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e00d      	b.n	8004362 <UART_SetConfig+0x17a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a69      	ldr	r2, [pc, #420]	@ (80044f0 <UART_SetConfig+0x308>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d104      	bne.n	800435a <UART_SetConfig+0x172>
 8004350:	231f      	movs	r3, #31
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e003      	b.n	8004362 <UART_SetConfig+0x17a>
 800435a:	231f      	movs	r3, #31
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2210      	movs	r2, #16
 8004360:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	429a      	cmp	r2, r3
 800436c:	d15c      	bne.n	8004428 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800436e:	231f      	movs	r3, #31
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d015      	beq.n	80043a4 <UART_SetConfig+0x1bc>
 8004378:	dc18      	bgt.n	80043ac <UART_SetConfig+0x1c4>
 800437a:	2b04      	cmp	r3, #4
 800437c:	d00d      	beq.n	800439a <UART_SetConfig+0x1b2>
 800437e:	dc15      	bgt.n	80043ac <UART_SetConfig+0x1c4>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <UART_SetConfig+0x1a2>
 8004384:	2b02      	cmp	r3, #2
 8004386:	d005      	beq.n	8004394 <UART_SetConfig+0x1ac>
 8004388:	e010      	b.n	80043ac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438a:	f7ff fc3d 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 800438e:	0003      	movs	r3, r0
 8004390:	61bb      	str	r3, [r7, #24]
        break;
 8004392:	e012      	b.n	80043ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004394:	4b57      	ldr	r3, [pc, #348]	@ (80044f4 <UART_SetConfig+0x30c>)
 8004396:	61bb      	str	r3, [r7, #24]
        break;
 8004398:	e00f      	b.n	80043ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800439a:	f7ff fbb9 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 800439e:	0003      	movs	r3, r0
 80043a0:	61bb      	str	r3, [r7, #24]
        break;
 80043a2:	e00a      	b.n	80043ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043a4:	2380      	movs	r3, #128	@ 0x80
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	61bb      	str	r3, [r7, #24]
        break;
 80043aa:	e006      	b.n	80043ba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043b0:	231e      	movs	r3, #30
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2201      	movs	r2, #1
 80043b6:	701a      	strb	r2, [r3, #0]
        break;
 80043b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d100      	bne.n	80043c2 <UART_SetConfig+0x1da>
 80043c0:	e07a      	b.n	80044b8 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	18d2      	adds	r2, r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	0019      	movs	r1, r3
 80043d4:	0010      	movs	r0, r2
 80043d6:	f7fb fea9 	bl	800012c <__udivsi3>
 80043da:	0003      	movs	r3, r0
 80043dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b0f      	cmp	r3, #15
 80043e2:	d91c      	bls.n	800441e <UART_SetConfig+0x236>
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	2380      	movs	r3, #128	@ 0x80
 80043e8:	025b      	lsls	r3, r3, #9
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d217      	bcs.n	800441e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	200e      	movs	r0, #14
 80043f4:	183b      	adds	r3, r7, r0
 80043f6:	210f      	movs	r1, #15
 80043f8:	438a      	bics	r2, r1
 80043fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	2207      	movs	r2, #7
 8004404:	4013      	ands	r3, r2
 8004406:	b299      	uxth	r1, r3
 8004408:	183b      	adds	r3, r7, r0
 800440a:	183a      	adds	r2, r7, r0
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	183a      	adds	r2, r7, r0
 8004418:	8812      	ldrh	r2, [r2, #0]
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	e04c      	b.n	80044b8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800441e:	231e      	movs	r3, #30
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e047      	b.n	80044b8 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004428:	231f      	movs	r3, #31
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d015      	beq.n	800445e <UART_SetConfig+0x276>
 8004432:	dc18      	bgt.n	8004466 <UART_SetConfig+0x27e>
 8004434:	2b04      	cmp	r3, #4
 8004436:	d00d      	beq.n	8004454 <UART_SetConfig+0x26c>
 8004438:	dc15      	bgt.n	8004466 <UART_SetConfig+0x27e>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <UART_SetConfig+0x25c>
 800443e:	2b02      	cmp	r3, #2
 8004440:	d005      	beq.n	800444e <UART_SetConfig+0x266>
 8004442:	e010      	b.n	8004466 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7ff fbe0 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 8004448:	0003      	movs	r3, r0
 800444a:	61bb      	str	r3, [r7, #24]
        break;
 800444c:	e012      	b.n	8004474 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444e:	4b29      	ldr	r3, [pc, #164]	@ (80044f4 <UART_SetConfig+0x30c>)
 8004450:	61bb      	str	r3, [r7, #24]
        break;
 8004452:	e00f      	b.n	8004474 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004454:	f7ff fb5c 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8004458:	0003      	movs	r3, r0
 800445a:	61bb      	str	r3, [r7, #24]
        break;
 800445c:	e00a      	b.n	8004474 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445e:	2380      	movs	r3, #128	@ 0x80
 8004460:	021b      	lsls	r3, r3, #8
 8004462:	61bb      	str	r3, [r7, #24]
        break;
 8004464:	e006      	b.n	8004474 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800446a:	231e      	movs	r3, #30
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2201      	movs	r2, #1
 8004470:	701a      	strb	r2, [r3, #0]
        break;
 8004472:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01e      	beq.n	80044b8 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085a      	lsrs	r2, r3, #1
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	18d2      	adds	r2, r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0019      	movs	r1, r3
 800448a:	0010      	movs	r0, r2
 800448c:	f7fb fe4e 	bl	800012c <__udivsi3>
 8004490:	0003      	movs	r3, r0
 8004492:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d90a      	bls.n	80044b0 <UART_SetConfig+0x2c8>
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	025b      	lsls	r3, r3, #9
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d205      	bcs.n	80044b0 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	e003      	b.n	80044b8 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80044b0:	231e      	movs	r3, #30
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044c4:	231e      	movs	r3, #30
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	781b      	ldrb	r3, [r3, #0]
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b008      	add	sp, #32
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	efff69f3 	.word	0xefff69f3
 80044d8:	ffffcfff 	.word	0xffffcfff
 80044dc:	fffff4ff 	.word	0xfffff4ff
 80044e0:	40013800 	.word	0x40013800
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40004400 	.word	0x40004400
 80044ec:	40004800 	.word	0x40004800
 80044f0:	40004c00 	.word	0x40004c00
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	2208      	movs	r2, #8
 8004506:	4013      	ands	r3, r2
 8004508:	d00b      	beq.n	8004522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a4a      	ldr	r2, [pc, #296]	@ (800463c <UART_AdvFeatureConfig+0x144>)
 8004512:	4013      	ands	r3, r2
 8004514:	0019      	movs	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	2201      	movs	r2, #1
 8004528:	4013      	ands	r3, r2
 800452a:	d00b      	beq.n	8004544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4a43      	ldr	r2, [pc, #268]	@ (8004640 <UART_AdvFeatureConfig+0x148>)
 8004534:	4013      	ands	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	2202      	movs	r2, #2
 800454a:	4013      	ands	r3, r2
 800454c:	d00b      	beq.n	8004566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a3b      	ldr	r2, [pc, #236]	@ (8004644 <UART_AdvFeatureConfig+0x14c>)
 8004556:	4013      	ands	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	2204      	movs	r2, #4
 800456c:	4013      	ands	r3, r2
 800456e:	d00b      	beq.n	8004588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4a34      	ldr	r2, [pc, #208]	@ (8004648 <UART_AdvFeatureConfig+0x150>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	2210      	movs	r2, #16
 800458e:	4013      	ands	r3, r2
 8004590:	d00b      	beq.n	80045aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a2c      	ldr	r2, [pc, #176]	@ (800464c <UART_AdvFeatureConfig+0x154>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	2220      	movs	r2, #32
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00b      	beq.n	80045cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	4a25      	ldr	r2, [pc, #148]	@ (8004650 <UART_AdvFeatureConfig+0x158>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	2240      	movs	r2, #64	@ 0x40
 80045d2:	4013      	ands	r3, r2
 80045d4:	d01d      	beq.n	8004612 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004654 <UART_AdvFeatureConfig+0x15c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	035b      	lsls	r3, r3, #13
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d10b      	bne.n	8004612 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a15      	ldr	r2, [pc, #84]	@ (8004658 <UART_AdvFeatureConfig+0x160>)
 8004602:	4013      	ands	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	2280      	movs	r2, #128	@ 0x80
 8004618:	4013      	ands	r3, r2
 800461a:	d00b      	beq.n	8004634 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4a0e      	ldr	r2, [pc, #56]	@ (800465c <UART_AdvFeatureConfig+0x164>)
 8004624:	4013      	ands	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
}
 8004634:	46c0      	nop			@ (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b002      	add	sp, #8
 800463a:	bd80      	pop	{r7, pc}
 800463c:	ffff7fff 	.word	0xffff7fff
 8004640:	fffdffff 	.word	0xfffdffff
 8004644:	fffeffff 	.word	0xfffeffff
 8004648:	fffbffff 	.word	0xfffbffff
 800464c:	ffffefff 	.word	0xffffefff
 8004650:	ffffdfff 	.word	0xffffdfff
 8004654:	ffefffff 	.word	0xffefffff
 8004658:	ff9fffff 	.word	0xff9fffff
 800465c:	fff7ffff 	.word	0xfff7ffff

08004660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b092      	sub	sp, #72	@ 0x48
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2284      	movs	r2, #132	@ 0x84
 800466c:	2100      	movs	r1, #0
 800466e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004670:	f7fd f948 	bl	8001904 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2208      	movs	r2, #8
 8004680:	4013      	ands	r3, r2
 8004682:	2b08      	cmp	r3, #8
 8004684:	d12c      	bne.n	80046e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004688:	2280      	movs	r2, #128	@ 0x80
 800468a:	0391      	lsls	r1, r2, #14
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4a46      	ldr	r2, [pc, #280]	@ (80047a8 <UART_CheckIdleState+0x148>)
 8004690:	9200      	str	r2, [sp, #0]
 8004692:	2200      	movs	r2, #0
 8004694:	f000 f88c 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004698:	1e03      	subs	r3, r0, #0
 800469a:	d021      	beq.n	80046e0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8310 	mrs	r3, PRIMASK
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046a6:	2301      	movs	r3, #1
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	f383 8810 	msr	PRIMASK, r3
}
 80046b0:	46c0      	nop			@ (mov r8, r8)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2180      	movs	r1, #128	@ 0x80
 80046be:	438a      	bics	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2278      	movs	r2, #120	@ 0x78
 80046d8:	2100      	movs	r1, #0
 80046da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e05f      	b.n	80047a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d146      	bne.n	800477c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046f0:	2280      	movs	r2, #128	@ 0x80
 80046f2:	03d1      	lsls	r1, r2, #15
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	@ (80047a8 <UART_CheckIdleState+0x148>)
 80046f8:	9200      	str	r2, [sp, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f000 f858 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d03b      	beq.n	800477c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004704:	f3ef 8310 	mrs	r3, PRIMASK
 8004708:	60fb      	str	r3, [r7, #12]
  return(result);
 800470a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470c:	637b      	str	r3, [r7, #52]	@ 0x34
 800470e:	2301      	movs	r3, #1
 8004710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f383 8810 	msr	PRIMASK, r3
}
 8004718:	46c0      	nop			@ (mov r8, r8)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4921      	ldr	r1, [pc, #132]	@ (80047ac <UART_CheckIdleState+0x14c>)
 8004726:	400a      	ands	r2, r1
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800472c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f383 8810 	msr	PRIMASK, r3
}
 8004734:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004736:	f3ef 8310 	mrs	r3, PRIMASK
 800473a:	61bb      	str	r3, [r7, #24]
  return(result);
 800473c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004740:	2301      	movs	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f383 8810 	msr	PRIMASK, r3
}
 800474a:	46c0      	nop			@ (mov r8, r8)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	438a      	bics	r2, r1
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	f383 8810 	msr	PRIMASK, r3
}
 8004766:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2280      	movs	r2, #128	@ 0x80
 800476c:	2120      	movs	r1, #32
 800476e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2278      	movs	r2, #120	@ 0x78
 8004774:	2100      	movs	r1, #0
 8004776:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e011      	b.n	80047a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	2120      	movs	r1, #32
 8004788:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2278      	movs	r2, #120	@ 0x78
 800479a:	2100      	movs	r1, #0
 800479c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b010      	add	sp, #64	@ 0x40
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	01ffffff 	.word	0x01ffffff
 80047ac:	fffffedf 	.word	0xfffffedf

080047b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	1dfb      	adds	r3, r7, #7
 80047be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	e051      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	3301      	adds	r3, #1
 80047c6:	d04e      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c8:	f7fd f89c 	bl	8001904 <HAL_GetTick>
 80047cc:	0002      	movs	r2, r0
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <UART_WaitOnFlagUntilTimeout+0x2e>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e051      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2204      	movs	r2, #4
 80047ea:	4013      	ands	r3, r2
 80047ec:	d03b      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb6>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b80      	cmp	r3, #128	@ 0x80
 80047f2:	d038      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb6>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b40      	cmp	r3, #64	@ 0x40
 80047f8:	d035      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2208      	movs	r2, #8
 8004802:	4013      	ands	r3, r2
 8004804:	2b08      	cmp	r3, #8
 8004806:	d111      	bne.n	800482c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2208      	movs	r2, #8
 800480e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f83c 	bl	8004890 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2284      	movs	r2, #132	@ 0x84
 800481c:	2108      	movs	r1, #8
 800481e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2278      	movs	r2, #120	@ 0x78
 8004824:	2100      	movs	r1, #0
 8004826:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e02c      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	2380      	movs	r3, #128	@ 0x80
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	401a      	ands	r2, r3
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	429a      	cmp	r2, r3
 800483e:	d112      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2280      	movs	r2, #128	@ 0x80
 8004846:	0112      	lsls	r2, r2, #4
 8004848:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	0018      	movs	r0, r3
 800484e:	f000 f81f 	bl	8004890 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2284      	movs	r2, #132	@ 0x84
 8004856:	2120      	movs	r1, #32
 8004858:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2278      	movs	r2, #120	@ 0x78
 800485e:	2100      	movs	r1, #0
 8004860:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00f      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	425a      	negs	r2, r3
 8004876:	4153      	adcs	r3, r2
 8004878:	b2db      	uxtb	r3, r3
 800487a:	001a      	movs	r2, r3
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d09e      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08e      	sub	sp, #56	@ 0x38
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004898:	f3ef 8310 	mrs	r3, PRIMASK
 800489c:	617b      	str	r3, [r7, #20]
  return(result);
 800489e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a2:	2301      	movs	r3, #1
 80048a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f383 8810 	msr	PRIMASK, r3
}
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4926      	ldr	r1, [pc, #152]	@ (8004954 <UART_EndRxTransfer+0xc4>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f383 8810 	msr	PRIMASK, r3
}
 80048c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ca:	f3ef 8310 	mrs	r3, PRIMASK
 80048ce:	623b      	str	r3, [r7, #32]
  return(result);
 80048d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d4:	2301      	movs	r3, #1
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	f383 8810 	msr	PRIMASK, r3
}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	438a      	bics	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004900:	2b01      	cmp	r3, #1
 8004902:	d118      	bne.n	8004936 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004904:	f3ef 8310 	mrs	r3, PRIMASK
 8004908:	60bb      	str	r3, [r7, #8]
  return(result);
 800490a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490e:	2301      	movs	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			@ (mov r8, r8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2110      	movs	r1, #16
 8004926:	438a      	bics	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2280      	movs	r2, #128	@ 0x80
 800493a:	2120      	movs	r1, #32
 800493c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b00e      	add	sp, #56	@ 0x38
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	fffffedf 	.word	0xfffffedf

08004958 <_vsiprintf_r>:
 8004958:	b500      	push	{lr}
 800495a:	b09b      	sub	sp, #108	@ 0x6c
 800495c:	9100      	str	r1, [sp, #0]
 800495e:	9104      	str	r1, [sp, #16]
 8004960:	4906      	ldr	r1, [pc, #24]	@ (800497c <_vsiprintf_r+0x24>)
 8004962:	9105      	str	r1, [sp, #20]
 8004964:	9102      	str	r1, [sp, #8]
 8004966:	4906      	ldr	r1, [pc, #24]	@ (8004980 <_vsiprintf_r+0x28>)
 8004968:	9103      	str	r1, [sp, #12]
 800496a:	4669      	mov	r1, sp
 800496c:	f000 f9b0 	bl	8004cd0 <_svfiprintf_r>
 8004970:	2200      	movs	r2, #0
 8004972:	9b00      	ldr	r3, [sp, #0]
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	b01b      	add	sp, #108	@ 0x6c
 8004978:	bd00      	pop	{pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	7fffffff 	.word	0x7fffffff
 8004980:	ffff0208 	.word	0xffff0208

08004984 <vsiprintf>:
 8004984:	b510      	push	{r4, lr}
 8004986:	4c04      	ldr	r4, [pc, #16]	@ (8004998 <vsiprintf+0x14>)
 8004988:	0013      	movs	r3, r2
 800498a:	000a      	movs	r2, r1
 800498c:	0001      	movs	r1, r0
 800498e:	6820      	ldr	r0, [r4, #0]
 8004990:	f7ff ffe2 	bl	8004958 <_vsiprintf_r>
 8004994:	bd10      	pop	{r4, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	20000018 	.word	0x20000018

0800499c <memset>:
 800499c:	0003      	movs	r3, r0
 800499e:	1882      	adds	r2, r0, r2
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d100      	bne.n	80049a6 <memset+0xa>
 80049a4:	4770      	bx	lr
 80049a6:	7019      	strb	r1, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	e7f9      	b.n	80049a0 <memset+0x4>

080049ac <__errno>:
 80049ac:	4b01      	ldr	r3, [pc, #4]	@ (80049b4 <__errno+0x8>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4770      	bx	lr
 80049b2:	46c0      	nop			@ (mov r8, r8)
 80049b4:	20000018 	.word	0x20000018

080049b8 <__libc_init_array>:
 80049b8:	b570      	push	{r4, r5, r6, lr}
 80049ba:	2600      	movs	r6, #0
 80049bc:	4c0c      	ldr	r4, [pc, #48]	@ (80049f0 <__libc_init_array+0x38>)
 80049be:	4d0d      	ldr	r5, [pc, #52]	@ (80049f4 <__libc_init_array+0x3c>)
 80049c0:	1b64      	subs	r4, r4, r5
 80049c2:	10a4      	asrs	r4, r4, #2
 80049c4:	42a6      	cmp	r6, r4
 80049c6:	d109      	bne.n	80049dc <__libc_init_array+0x24>
 80049c8:	2600      	movs	r6, #0
 80049ca:	f000 fc65 	bl	8005298 <_init>
 80049ce:	4c0a      	ldr	r4, [pc, #40]	@ (80049f8 <__libc_init_array+0x40>)
 80049d0:	4d0a      	ldr	r5, [pc, #40]	@ (80049fc <__libc_init_array+0x44>)
 80049d2:	1b64      	subs	r4, r4, r5
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	d105      	bne.n	80049e6 <__libc_init_array+0x2e>
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	00b3      	lsls	r3, r6, #2
 80049de:	58eb      	ldr	r3, [r5, r3]
 80049e0:	4798      	blx	r3
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7ee      	b.n	80049c4 <__libc_init_array+0xc>
 80049e6:	00b3      	lsls	r3, r6, #2
 80049e8:	58eb      	ldr	r3, [r5, r3]
 80049ea:	4798      	blx	r3
 80049ec:	3601      	adds	r6, #1
 80049ee:	e7f2      	b.n	80049d6 <__libc_init_array+0x1e>
 80049f0:	080058ec 	.word	0x080058ec
 80049f4:	080058ec 	.word	0x080058ec
 80049f8:	080058f0 	.word	0x080058f0
 80049fc:	080058ec 	.word	0x080058ec

08004a00 <__retarget_lock_acquire_recursive>:
 8004a00:	4770      	bx	lr

08004a02 <__retarget_lock_release_recursive>:
 8004a02:	4770      	bx	lr

08004a04 <memcpy>:
 8004a04:	2300      	movs	r3, #0
 8004a06:	b510      	push	{r4, lr}
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d100      	bne.n	8004a0e <memcpy+0xa>
 8004a0c:	bd10      	pop	{r4, pc}
 8004a0e:	5ccc      	ldrb	r4, [r1, r3]
 8004a10:	54c4      	strb	r4, [r0, r3]
 8004a12:	3301      	adds	r3, #1
 8004a14:	e7f8      	b.n	8004a08 <memcpy+0x4>
	...

08004a18 <_free_r>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	0005      	movs	r5, r0
 8004a1c:	1e0c      	subs	r4, r1, #0
 8004a1e:	d010      	beq.n	8004a42 <_free_r+0x2a>
 8004a20:	3c04      	subs	r4, #4
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	da00      	bge.n	8004a2a <_free_r+0x12>
 8004a28:	18e4      	adds	r4, r4, r3
 8004a2a:	0028      	movs	r0, r5
 8004a2c:	f000 f8e0 	bl	8004bf0 <__malloc_lock>
 8004a30:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa8 <_free_r+0x90>)
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <_free_r+0x2c>
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6014      	str	r4, [r2, #0]
 8004a3c:	0028      	movs	r0, r5
 8004a3e:	f000 f8df 	bl	8004c00 <__malloc_unlock>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	d908      	bls.n	8004a5a <_free_r+0x42>
 8004a48:	6820      	ldr	r0, [r4, #0]
 8004a4a:	1821      	adds	r1, r4, r0
 8004a4c:	428b      	cmp	r3, r1
 8004a4e:	d1f3      	bne.n	8004a38 <_free_r+0x20>
 8004a50:	6819      	ldr	r1, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	1809      	adds	r1, r1, r0
 8004a56:	6021      	str	r1, [r4, #0]
 8004a58:	e7ee      	b.n	8004a38 <_free_r+0x20>
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <_free_r+0x4e>
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	d9f9      	bls.n	8004a5a <_free_r+0x42>
 8004a66:	6811      	ldr	r1, [r2, #0]
 8004a68:	1850      	adds	r0, r2, r1
 8004a6a:	42a0      	cmp	r0, r4
 8004a6c:	d10b      	bne.n	8004a86 <_free_r+0x6e>
 8004a6e:	6820      	ldr	r0, [r4, #0]
 8004a70:	1809      	adds	r1, r1, r0
 8004a72:	1850      	adds	r0, r2, r1
 8004a74:	6011      	str	r1, [r2, #0]
 8004a76:	4283      	cmp	r3, r0
 8004a78:	d1e0      	bne.n	8004a3c <_free_r+0x24>
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	1841      	adds	r1, r0, r1
 8004a80:	6011      	str	r1, [r2, #0]
 8004a82:	6053      	str	r3, [r2, #4]
 8004a84:	e7da      	b.n	8004a3c <_free_r+0x24>
 8004a86:	42a0      	cmp	r0, r4
 8004a88:	d902      	bls.n	8004a90 <_free_r+0x78>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	e7d5      	b.n	8004a3c <_free_r+0x24>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	1821      	adds	r1, r4, r0
 8004a94:	428b      	cmp	r3, r1
 8004a96:	d103      	bne.n	8004aa0 <_free_r+0x88>
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	1809      	adds	r1, r1, r0
 8004a9e:	6021      	str	r1, [r4, #0]
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	6054      	str	r4, [r2, #4]
 8004aa4:	e7ca      	b.n	8004a3c <_free_r+0x24>
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	2000051c 	.word	0x2000051c

08004aac <sbrk_aligned>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4e0f      	ldr	r6, [pc, #60]	@ (8004aec <sbrk_aligned+0x40>)
 8004ab0:	000d      	movs	r5, r1
 8004ab2:	6831      	ldr	r1, [r6, #0]
 8004ab4:	0004      	movs	r4, r0
 8004ab6:	2900      	cmp	r1, #0
 8004ab8:	d102      	bne.n	8004ac0 <sbrk_aligned+0x14>
 8004aba:	f000 fb99 	bl	80051f0 <_sbrk_r>
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	0029      	movs	r1, r5
 8004ac2:	0020      	movs	r0, r4
 8004ac4:	f000 fb94 	bl	80051f0 <_sbrk_r>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d103      	bne.n	8004ad4 <sbrk_aligned+0x28>
 8004acc:	2501      	movs	r5, #1
 8004ace:	426d      	negs	r5, r5
 8004ad0:	0028      	movs	r0, r5
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	1cc5      	adds	r5, r0, #3
 8004ad8:	439d      	bics	r5, r3
 8004ada:	42a8      	cmp	r0, r5
 8004adc:	d0f8      	beq.n	8004ad0 <sbrk_aligned+0x24>
 8004ade:	1a29      	subs	r1, r5, r0
 8004ae0:	0020      	movs	r0, r4
 8004ae2:	f000 fb85 	bl	80051f0 <_sbrk_r>
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d1f2      	bne.n	8004ad0 <sbrk_aligned+0x24>
 8004aea:	e7ef      	b.n	8004acc <sbrk_aligned+0x20>
 8004aec:	20000518 	.word	0x20000518

08004af0 <_malloc_r>:
 8004af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af2:	2203      	movs	r2, #3
 8004af4:	1ccb      	adds	r3, r1, #3
 8004af6:	4393      	bics	r3, r2
 8004af8:	3308      	adds	r3, #8
 8004afa:	0005      	movs	r5, r0
 8004afc:	001f      	movs	r7, r3
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d234      	bcs.n	8004b6c <_malloc_r+0x7c>
 8004b02:	270c      	movs	r7, #12
 8004b04:	42b9      	cmp	r1, r7
 8004b06:	d833      	bhi.n	8004b70 <_malloc_r+0x80>
 8004b08:	0028      	movs	r0, r5
 8004b0a:	f000 f871 	bl	8004bf0 <__malloc_lock>
 8004b0e:	4e37      	ldr	r6, [pc, #220]	@ (8004bec <_malloc_r+0xfc>)
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	001c      	movs	r4, r3
 8004b14:	2c00      	cmp	r4, #0
 8004b16:	d12f      	bne.n	8004b78 <_malloc_r+0x88>
 8004b18:	0039      	movs	r1, r7
 8004b1a:	0028      	movs	r0, r5
 8004b1c:	f7ff ffc6 	bl	8004aac <sbrk_aligned>
 8004b20:	0004      	movs	r4, r0
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	d15f      	bne.n	8004be6 <_malloc_r+0xf6>
 8004b26:	6834      	ldr	r4, [r6, #0]
 8004b28:	9400      	str	r4, [sp, #0]
 8004b2a:	9b00      	ldr	r3, [sp, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d14a      	bne.n	8004bc6 <_malloc_r+0xd6>
 8004b30:	2c00      	cmp	r4, #0
 8004b32:	d052      	beq.n	8004bda <_malloc_r+0xea>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	0028      	movs	r0, r5
 8004b38:	18e3      	adds	r3, r4, r3
 8004b3a:	9900      	ldr	r1, [sp, #0]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	f000 fb57 	bl	80051f0 <_sbrk_r>
 8004b42:	9b01      	ldr	r3, [sp, #4]
 8004b44:	4283      	cmp	r3, r0
 8004b46:	d148      	bne.n	8004bda <_malloc_r+0xea>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	0028      	movs	r0, r5
 8004b4c:	1aff      	subs	r7, r7, r3
 8004b4e:	0039      	movs	r1, r7
 8004b50:	f7ff ffac 	bl	8004aac <sbrk_aligned>
 8004b54:	3001      	adds	r0, #1
 8004b56:	d040      	beq.n	8004bda <_malloc_r+0xea>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	19db      	adds	r3, r3, r7
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	6833      	ldr	r3, [r6, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	2a00      	cmp	r2, #0
 8004b64:	d133      	bne.n	8004bce <_malloc_r+0xde>
 8004b66:	9b00      	ldr	r3, [sp, #0]
 8004b68:	6033      	str	r3, [r6, #0]
 8004b6a:	e019      	b.n	8004ba0 <_malloc_r+0xb0>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dac9      	bge.n	8004b04 <_malloc_r+0x14>
 8004b70:	230c      	movs	r3, #12
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	2000      	movs	r0, #0
 8004b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b78:	6821      	ldr	r1, [r4, #0]
 8004b7a:	1bc9      	subs	r1, r1, r7
 8004b7c:	d420      	bmi.n	8004bc0 <_malloc_r+0xd0>
 8004b7e:	290b      	cmp	r1, #11
 8004b80:	d90a      	bls.n	8004b98 <_malloc_r+0xa8>
 8004b82:	19e2      	adds	r2, r4, r7
 8004b84:	6027      	str	r7, [r4, #0]
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	d104      	bne.n	8004b94 <_malloc_r+0xa4>
 8004b8a:	6032      	str	r2, [r6, #0]
 8004b8c:	6863      	ldr	r3, [r4, #4]
 8004b8e:	6011      	str	r1, [r2, #0]
 8004b90:	6053      	str	r3, [r2, #4]
 8004b92:	e005      	b.n	8004ba0 <_malloc_r+0xb0>
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	e7f9      	b.n	8004b8c <_malloc_r+0x9c>
 8004b98:	6862      	ldr	r2, [r4, #4]
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	d10e      	bne.n	8004bbc <_malloc_r+0xcc>
 8004b9e:	6032      	str	r2, [r6, #0]
 8004ba0:	0028      	movs	r0, r5
 8004ba2:	f000 f82d 	bl	8004c00 <__malloc_unlock>
 8004ba6:	0020      	movs	r0, r4
 8004ba8:	2207      	movs	r2, #7
 8004baa:	300b      	adds	r0, #11
 8004bac:	1d23      	adds	r3, r4, #4
 8004bae:	4390      	bics	r0, r2
 8004bb0:	1ac2      	subs	r2, r0, r3
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	d0df      	beq.n	8004b76 <_malloc_r+0x86>
 8004bb6:	1a1b      	subs	r3, r3, r0
 8004bb8:	50a3      	str	r3, [r4, r2]
 8004bba:	e7dc      	b.n	8004b76 <_malloc_r+0x86>
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	e7ef      	b.n	8004ba0 <_malloc_r+0xb0>
 8004bc0:	0023      	movs	r3, r4
 8004bc2:	6864      	ldr	r4, [r4, #4]
 8004bc4:	e7a6      	b.n	8004b14 <_malloc_r+0x24>
 8004bc6:	9c00      	ldr	r4, [sp, #0]
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	e7ad      	b.n	8004b2a <_malloc_r+0x3a>
 8004bce:	001a      	movs	r2, r3
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	42a3      	cmp	r3, r4
 8004bd4:	d1fb      	bne.n	8004bce <_malloc_r+0xde>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e7da      	b.n	8004b90 <_malloc_r+0xa0>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	0028      	movs	r0, r5
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f000 f80e 	bl	8004c00 <__malloc_unlock>
 8004be4:	e7c6      	b.n	8004b74 <_malloc_r+0x84>
 8004be6:	6007      	str	r7, [r0, #0]
 8004be8:	e7da      	b.n	8004ba0 <_malloc_r+0xb0>
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	2000051c 	.word	0x2000051c

08004bf0 <__malloc_lock>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	4802      	ldr	r0, [pc, #8]	@ (8004bfc <__malloc_lock+0xc>)
 8004bf4:	f7ff ff04 	bl	8004a00 <__retarget_lock_acquire_recursive>
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	20000514 	.word	0x20000514

08004c00 <__malloc_unlock>:
 8004c00:	b510      	push	{r4, lr}
 8004c02:	4802      	ldr	r0, [pc, #8]	@ (8004c0c <__malloc_unlock+0xc>)
 8004c04:	f7ff fefd 	bl	8004a02 <__retarget_lock_release_recursive>
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	20000514 	.word	0x20000514

08004c10 <__ssputs_r>:
 8004c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c12:	688e      	ldr	r6, [r1, #8]
 8004c14:	b085      	sub	sp, #20
 8004c16:	001f      	movs	r7, r3
 8004c18:	000c      	movs	r4, r1
 8004c1a:	680b      	ldr	r3, [r1, #0]
 8004c1c:	9002      	str	r0, [sp, #8]
 8004c1e:	9203      	str	r2, [sp, #12]
 8004c20:	42be      	cmp	r6, r7
 8004c22:	d830      	bhi.n	8004c86 <__ssputs_r+0x76>
 8004c24:	210c      	movs	r1, #12
 8004c26:	5e62      	ldrsh	r2, [r4, r1]
 8004c28:	2190      	movs	r1, #144	@ 0x90
 8004c2a:	00c9      	lsls	r1, r1, #3
 8004c2c:	420a      	tst	r2, r1
 8004c2e:	d028      	beq.n	8004c82 <__ssputs_r+0x72>
 8004c30:	2003      	movs	r0, #3
 8004c32:	6921      	ldr	r1, [r4, #16]
 8004c34:	1a5b      	subs	r3, r3, r1
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	6963      	ldr	r3, [r4, #20]
 8004c3a:	4343      	muls	r3, r0
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	0fdd      	lsrs	r5, r3, #31
 8004c40:	18ed      	adds	r5, r5, r3
 8004c42:	1c7b      	adds	r3, r7, #1
 8004c44:	181b      	adds	r3, r3, r0
 8004c46:	106d      	asrs	r5, r5, #1
 8004c48:	42ab      	cmp	r3, r5
 8004c4a:	d900      	bls.n	8004c4e <__ssputs_r+0x3e>
 8004c4c:	001d      	movs	r5, r3
 8004c4e:	0552      	lsls	r2, r2, #21
 8004c50:	d528      	bpl.n	8004ca4 <__ssputs_r+0x94>
 8004c52:	0029      	movs	r1, r5
 8004c54:	9802      	ldr	r0, [sp, #8]
 8004c56:	f7ff ff4b 	bl	8004af0 <_malloc_r>
 8004c5a:	1e06      	subs	r6, r0, #0
 8004c5c:	d02c      	beq.n	8004cb8 <__ssputs_r+0xa8>
 8004c5e:	9a01      	ldr	r2, [sp, #4]
 8004c60:	6921      	ldr	r1, [r4, #16]
 8004c62:	f7ff fecf 	bl	8004a04 <memcpy>
 8004c66:	89a2      	ldrh	r2, [r4, #12]
 8004c68:	4b18      	ldr	r3, [pc, #96]	@ (8004ccc <__ssputs_r+0xbc>)
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	9b01      	ldr	r3, [sp, #4]
 8004c74:	6126      	str	r6, [r4, #16]
 8004c76:	18f6      	adds	r6, r6, r3
 8004c78:	6026      	str	r6, [r4, #0]
 8004c7a:	003e      	movs	r6, r7
 8004c7c:	6165      	str	r5, [r4, #20]
 8004c7e:	1aed      	subs	r5, r5, r3
 8004c80:	60a5      	str	r5, [r4, #8]
 8004c82:	42be      	cmp	r6, r7
 8004c84:	d900      	bls.n	8004c88 <__ssputs_r+0x78>
 8004c86:	003e      	movs	r6, r7
 8004c88:	0032      	movs	r2, r6
 8004c8a:	9903      	ldr	r1, [sp, #12]
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	f000 fa9b 	bl	80051c8 <memmove>
 8004c92:	2000      	movs	r0, #0
 8004c94:	68a3      	ldr	r3, [r4, #8]
 8004c96:	1b9b      	subs	r3, r3, r6
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	199b      	adds	r3, r3, r6
 8004c9e:	6023      	str	r3, [r4, #0]
 8004ca0:	b005      	add	sp, #20
 8004ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca4:	002a      	movs	r2, r5
 8004ca6:	9802      	ldr	r0, [sp, #8]
 8004ca8:	f000 fabf 	bl	800522a <_realloc_r>
 8004cac:	1e06      	subs	r6, r0, #0
 8004cae:	d1e0      	bne.n	8004c72 <__ssputs_r+0x62>
 8004cb0:	6921      	ldr	r1, [r4, #16]
 8004cb2:	9802      	ldr	r0, [sp, #8]
 8004cb4:	f7ff feb0 	bl	8004a18 <_free_r>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	2001      	movs	r0, #1
 8004cbc:	9a02      	ldr	r2, [sp, #8]
 8004cbe:	4240      	negs	r0, r0
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	89a2      	ldrh	r2, [r4, #12]
 8004cc4:	3334      	adds	r3, #52	@ 0x34
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	81a3      	strh	r3, [r4, #12]
 8004cca:	e7e9      	b.n	8004ca0 <__ssputs_r+0x90>
 8004ccc:	fffffb7f 	.word	0xfffffb7f

08004cd0 <_svfiprintf_r>:
 8004cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd2:	b0a1      	sub	sp, #132	@ 0x84
 8004cd4:	9003      	str	r0, [sp, #12]
 8004cd6:	001d      	movs	r5, r3
 8004cd8:	898b      	ldrh	r3, [r1, #12]
 8004cda:	000f      	movs	r7, r1
 8004cdc:	0016      	movs	r6, r2
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	d511      	bpl.n	8004d06 <_svfiprintf_r+0x36>
 8004ce2:	690b      	ldr	r3, [r1, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10e      	bne.n	8004d06 <_svfiprintf_r+0x36>
 8004ce8:	2140      	movs	r1, #64	@ 0x40
 8004cea:	f7ff ff01 	bl	8004af0 <_malloc_r>
 8004cee:	6038      	str	r0, [r7, #0]
 8004cf0:	6138      	str	r0, [r7, #16]
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	d105      	bne.n	8004d02 <_svfiprintf_r+0x32>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	9a03      	ldr	r2, [sp, #12]
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	4240      	negs	r0, r0
 8004d00:	e0cf      	b.n	8004ea2 <_svfiprintf_r+0x1d2>
 8004d02:	2340      	movs	r3, #64	@ 0x40
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	2300      	movs	r3, #0
 8004d08:	ac08      	add	r4, sp, #32
 8004d0a:	6163      	str	r3, [r4, #20]
 8004d0c:	3320      	adds	r3, #32
 8004d0e:	7663      	strb	r3, [r4, #25]
 8004d10:	3310      	adds	r3, #16
 8004d12:	76a3      	strb	r3, [r4, #26]
 8004d14:	9507      	str	r5, [sp, #28]
 8004d16:	0035      	movs	r5, r6
 8004d18:	782b      	ldrb	r3, [r5, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <_svfiprintf_r+0x52>
 8004d1e:	2b25      	cmp	r3, #37	@ 0x25
 8004d20:	d148      	bne.n	8004db4 <_svfiprintf_r+0xe4>
 8004d22:	1bab      	subs	r3, r5, r6
 8004d24:	9305      	str	r3, [sp, #20]
 8004d26:	42b5      	cmp	r5, r6
 8004d28:	d00b      	beq.n	8004d42 <_svfiprintf_r+0x72>
 8004d2a:	0032      	movs	r2, r6
 8004d2c:	0039      	movs	r1, r7
 8004d2e:	9803      	ldr	r0, [sp, #12]
 8004d30:	f7ff ff6e 	bl	8004c10 <__ssputs_r>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d100      	bne.n	8004d3a <_svfiprintf_r+0x6a>
 8004d38:	e0ae      	b.n	8004e98 <_svfiprintf_r+0x1c8>
 8004d3a:	6963      	ldr	r3, [r4, #20]
 8004d3c:	9a05      	ldr	r2, [sp, #20]
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	6163      	str	r3, [r4, #20]
 8004d42:	782b      	ldrb	r3, [r5, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d100      	bne.n	8004d4a <_svfiprintf_r+0x7a>
 8004d48:	e0a6      	b.n	8004e98 <_svfiprintf_r+0x1c8>
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4252      	negs	r2, r2
 8004d50:	6062      	str	r2, [r4, #4]
 8004d52:	a904      	add	r1, sp, #16
 8004d54:	3254      	adds	r2, #84	@ 0x54
 8004d56:	1852      	adds	r2, r2, r1
 8004d58:	1c6e      	adds	r6, r5, #1
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	60e3      	str	r3, [r4, #12]
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	7013      	strb	r3, [r2, #0]
 8004d62:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004d64:	4b54      	ldr	r3, [pc, #336]	@ (8004eb8 <_svfiprintf_r+0x1e8>)
 8004d66:	2205      	movs	r2, #5
 8004d68:	0018      	movs	r0, r3
 8004d6a:	7831      	ldrb	r1, [r6, #0]
 8004d6c:	9305      	str	r3, [sp, #20]
 8004d6e:	f000 fa51 	bl	8005214 <memchr>
 8004d72:	1c75      	adds	r5, r6, #1
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d11f      	bne.n	8004db8 <_svfiprintf_r+0xe8>
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	06d3      	lsls	r3, r2, #27
 8004d7c:	d504      	bpl.n	8004d88 <_svfiprintf_r+0xb8>
 8004d7e:	2353      	movs	r3, #83	@ 0x53
 8004d80:	a904      	add	r1, sp, #16
 8004d82:	185b      	adds	r3, r3, r1
 8004d84:	2120      	movs	r1, #32
 8004d86:	7019      	strb	r1, [r3, #0]
 8004d88:	0713      	lsls	r3, r2, #28
 8004d8a:	d504      	bpl.n	8004d96 <_svfiprintf_r+0xc6>
 8004d8c:	2353      	movs	r3, #83	@ 0x53
 8004d8e:	a904      	add	r1, sp, #16
 8004d90:	185b      	adds	r3, r3, r1
 8004d92:	212b      	movs	r1, #43	@ 0x2b
 8004d94:	7019      	strb	r1, [r3, #0]
 8004d96:	7833      	ldrb	r3, [r6, #0]
 8004d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d9a:	d016      	beq.n	8004dca <_svfiprintf_r+0xfa>
 8004d9c:	0035      	movs	r5, r6
 8004d9e:	2100      	movs	r1, #0
 8004da0:	200a      	movs	r0, #10
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	782a      	ldrb	r2, [r5, #0]
 8004da6:	1c6e      	adds	r6, r5, #1
 8004da8:	3a30      	subs	r2, #48	@ 0x30
 8004daa:	2a09      	cmp	r2, #9
 8004dac:	d950      	bls.n	8004e50 <_svfiprintf_r+0x180>
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d111      	bne.n	8004dd6 <_svfiprintf_r+0x106>
 8004db2:	e017      	b.n	8004de4 <_svfiprintf_r+0x114>
 8004db4:	3501      	adds	r5, #1
 8004db6:	e7af      	b.n	8004d18 <_svfiprintf_r+0x48>
 8004db8:	9b05      	ldr	r3, [sp, #20]
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	1ac0      	subs	r0, r0, r3
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4083      	lsls	r3, r0
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	002e      	movs	r6, r5
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	e7cc      	b.n	8004d64 <_svfiprintf_r+0x94>
 8004dca:	9b07      	ldr	r3, [sp, #28]
 8004dcc:	1d19      	adds	r1, r3, #4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	9107      	str	r1, [sp, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	db01      	blt.n	8004dda <_svfiprintf_r+0x10a>
 8004dd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dd8:	e004      	b.n	8004de4 <_svfiprintf_r+0x114>
 8004dda:	425b      	negs	r3, r3
 8004ddc:	60e3      	str	r3, [r4, #12]
 8004dde:	2302      	movs	r3, #2
 8004de0:	4313      	orrs	r3, r2
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	782b      	ldrb	r3, [r5, #0]
 8004de6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004de8:	d10c      	bne.n	8004e04 <_svfiprintf_r+0x134>
 8004dea:	786b      	ldrb	r3, [r5, #1]
 8004dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dee:	d134      	bne.n	8004e5a <_svfiprintf_r+0x18a>
 8004df0:	9b07      	ldr	r3, [sp, #28]
 8004df2:	3502      	adds	r5, #2
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	9207      	str	r2, [sp, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da01      	bge.n	8004e02 <_svfiprintf_r+0x132>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	425b      	negs	r3, r3
 8004e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e04:	4e2d      	ldr	r6, [pc, #180]	@ (8004ebc <_svfiprintf_r+0x1ec>)
 8004e06:	2203      	movs	r2, #3
 8004e08:	0030      	movs	r0, r6
 8004e0a:	7829      	ldrb	r1, [r5, #0]
 8004e0c:	f000 fa02 	bl	8005214 <memchr>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d006      	beq.n	8004e22 <_svfiprintf_r+0x152>
 8004e14:	2340      	movs	r3, #64	@ 0x40
 8004e16:	1b80      	subs	r0, r0, r6
 8004e18:	4083      	lsls	r3, r0
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	7829      	ldrb	r1, [r5, #0]
 8004e24:	2206      	movs	r2, #6
 8004e26:	4826      	ldr	r0, [pc, #152]	@ (8004ec0 <_svfiprintf_r+0x1f0>)
 8004e28:	1c6e      	adds	r6, r5, #1
 8004e2a:	7621      	strb	r1, [r4, #24]
 8004e2c:	f000 f9f2 	bl	8005214 <memchr>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d038      	beq.n	8004ea6 <_svfiprintf_r+0x1d6>
 8004e34:	4b23      	ldr	r3, [pc, #140]	@ (8004ec4 <_svfiprintf_r+0x1f4>)
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d122      	bne.n	8004e80 <_svfiprintf_r+0x1b0>
 8004e3a:	2207      	movs	r2, #7
 8004e3c:	9b07      	ldr	r3, [sp, #28]
 8004e3e:	3307      	adds	r3, #7
 8004e40:	4393      	bics	r3, r2
 8004e42:	3308      	adds	r3, #8
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	9a04      	ldr	r2, [sp, #16]
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	6163      	str	r3, [r4, #20]
 8004e4e:	e762      	b.n	8004d16 <_svfiprintf_r+0x46>
 8004e50:	4343      	muls	r3, r0
 8004e52:	0035      	movs	r5, r6
 8004e54:	2101      	movs	r1, #1
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	e7a4      	b.n	8004da4 <_svfiprintf_r+0xd4>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	0019      	movs	r1, r3
 8004e60:	3501      	adds	r5, #1
 8004e62:	6063      	str	r3, [r4, #4]
 8004e64:	782a      	ldrb	r2, [r5, #0]
 8004e66:	1c6e      	adds	r6, r5, #1
 8004e68:	3a30      	subs	r2, #48	@ 0x30
 8004e6a:	2a09      	cmp	r2, #9
 8004e6c:	d903      	bls.n	8004e76 <_svfiprintf_r+0x1a6>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0c8      	beq.n	8004e04 <_svfiprintf_r+0x134>
 8004e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e74:	e7c6      	b.n	8004e04 <_svfiprintf_r+0x134>
 8004e76:	4341      	muls	r1, r0
 8004e78:	0035      	movs	r5, r6
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	1889      	adds	r1, r1, r2
 8004e7e:	e7f1      	b.n	8004e64 <_svfiprintf_r+0x194>
 8004e80:	aa07      	add	r2, sp, #28
 8004e82:	9200      	str	r2, [sp, #0]
 8004e84:	0021      	movs	r1, r4
 8004e86:	003a      	movs	r2, r7
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <_svfiprintf_r+0x1f8>)
 8004e8a:	9803      	ldr	r0, [sp, #12]
 8004e8c:	e000      	b.n	8004e90 <_svfiprintf_r+0x1c0>
 8004e8e:	bf00      	nop
 8004e90:	9004      	str	r0, [sp, #16]
 8004e92:	9b04      	ldr	r3, [sp, #16]
 8004e94:	3301      	adds	r3, #1
 8004e96:	d1d6      	bne.n	8004e46 <_svfiprintf_r+0x176>
 8004e98:	89bb      	ldrh	r3, [r7, #12]
 8004e9a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e9c:	065b      	lsls	r3, r3, #25
 8004e9e:	d500      	bpl.n	8004ea2 <_svfiprintf_r+0x1d2>
 8004ea0:	e72c      	b.n	8004cfc <_svfiprintf_r+0x2c>
 8004ea2:	b021      	add	sp, #132	@ 0x84
 8004ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea6:	aa07      	add	r2, sp, #28
 8004ea8:	9200      	str	r2, [sp, #0]
 8004eaa:	0021      	movs	r1, r4
 8004eac:	003a      	movs	r2, r7
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <_svfiprintf_r+0x1f8>)
 8004eb0:	9803      	ldr	r0, [sp, #12]
 8004eb2:	f000 f87b 	bl	8004fac <_printf_i>
 8004eb6:	e7eb      	b.n	8004e90 <_svfiprintf_r+0x1c0>
 8004eb8:	080058b8 	.word	0x080058b8
 8004ebc:	080058be 	.word	0x080058be
 8004ec0:	080058c2 	.word	0x080058c2
 8004ec4:	00000000 	.word	0x00000000
 8004ec8:	08004c11 	.word	0x08004c11

08004ecc <_printf_common>:
 8004ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ece:	0016      	movs	r6, r2
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	688a      	ldr	r2, [r1, #8]
 8004ed4:	690b      	ldr	r3, [r1, #16]
 8004ed6:	000c      	movs	r4, r1
 8004ed8:	9000      	str	r0, [sp, #0]
 8004eda:	4293      	cmp	r3, r2
 8004edc:	da00      	bge.n	8004ee0 <_printf_common+0x14>
 8004ede:	0013      	movs	r3, r2
 8004ee0:	0022      	movs	r2, r4
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	3243      	adds	r2, #67	@ 0x43
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	d001      	beq.n	8004ef0 <_printf_common+0x24>
 8004eec:	3301      	adds	r3, #1
 8004eee:	6033      	str	r3, [r6, #0]
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	069b      	lsls	r3, r3, #26
 8004ef4:	d502      	bpl.n	8004efc <_printf_common+0x30>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	2306      	movs	r3, #6
 8004f00:	0015      	movs	r5, r2
 8004f02:	401d      	ands	r5, r3
 8004f04:	421a      	tst	r2, r3
 8004f06:	d027      	beq.n	8004f58 <_printf_common+0x8c>
 8004f08:	0023      	movs	r3, r4
 8004f0a:	3343      	adds	r3, #67	@ 0x43
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	1e5a      	subs	r2, r3, #1
 8004f10:	4193      	sbcs	r3, r2
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	0692      	lsls	r2, r2, #26
 8004f16:	d430      	bmi.n	8004f7a <_printf_common+0xae>
 8004f18:	0022      	movs	r2, r4
 8004f1a:	9901      	ldr	r1, [sp, #4]
 8004f1c:	9800      	ldr	r0, [sp, #0]
 8004f1e:	9d08      	ldr	r5, [sp, #32]
 8004f20:	3243      	adds	r2, #67	@ 0x43
 8004f22:	47a8      	blx	r5
 8004f24:	3001      	adds	r0, #1
 8004f26:	d025      	beq.n	8004f74 <_printf_common+0xa8>
 8004f28:	2206      	movs	r2, #6
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d105      	bne.n	8004f40 <_printf_common+0x74>
 8004f34:	6833      	ldr	r3, [r6, #0]
 8004f36:	68e5      	ldr	r5, [r4, #12]
 8004f38:	1aed      	subs	r5, r5, r3
 8004f3a:	43eb      	mvns	r3, r5
 8004f3c:	17db      	asrs	r3, r3, #31
 8004f3e:	401d      	ands	r5, r3
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	6922      	ldr	r2, [r4, #16]
 8004f44:	4293      	cmp	r3, r2
 8004f46:	dd01      	ble.n	8004f4c <_printf_common+0x80>
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	18ed      	adds	r5, r5, r3
 8004f4c:	2600      	movs	r6, #0
 8004f4e:	42b5      	cmp	r5, r6
 8004f50:	d120      	bne.n	8004f94 <_printf_common+0xc8>
 8004f52:	2000      	movs	r0, #0
 8004f54:	e010      	b.n	8004f78 <_printf_common+0xac>
 8004f56:	3501      	adds	r5, #1
 8004f58:	68e3      	ldr	r3, [r4, #12]
 8004f5a:	6832      	ldr	r2, [r6, #0]
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	42ab      	cmp	r3, r5
 8004f60:	ddd2      	ble.n	8004f08 <_printf_common+0x3c>
 8004f62:	0022      	movs	r2, r4
 8004f64:	2301      	movs	r3, #1
 8004f66:	9901      	ldr	r1, [sp, #4]
 8004f68:	9800      	ldr	r0, [sp, #0]
 8004f6a:	9f08      	ldr	r7, [sp, #32]
 8004f6c:	3219      	adds	r2, #25
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1f0      	bne.n	8004f56 <_printf_common+0x8a>
 8004f74:	2001      	movs	r0, #1
 8004f76:	4240      	negs	r0, r0
 8004f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f7a:	2030      	movs	r0, #48	@ 0x30
 8004f7c:	18e1      	adds	r1, r4, r3
 8004f7e:	3143      	adds	r1, #67	@ 0x43
 8004f80:	7008      	strb	r0, [r1, #0]
 8004f82:	0021      	movs	r1, r4
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	3145      	adds	r1, #69	@ 0x45
 8004f88:	7809      	ldrb	r1, [r1, #0]
 8004f8a:	18a2      	adds	r2, r4, r2
 8004f8c:	3243      	adds	r2, #67	@ 0x43
 8004f8e:	3302      	adds	r3, #2
 8004f90:	7011      	strb	r1, [r2, #0]
 8004f92:	e7c1      	b.n	8004f18 <_printf_common+0x4c>
 8004f94:	0022      	movs	r2, r4
 8004f96:	2301      	movs	r3, #1
 8004f98:	9901      	ldr	r1, [sp, #4]
 8004f9a:	9800      	ldr	r0, [sp, #0]
 8004f9c:	9f08      	ldr	r7, [sp, #32]
 8004f9e:	321a      	adds	r2, #26
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	d0e6      	beq.n	8004f74 <_printf_common+0xa8>
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7d1      	b.n	8004f4e <_printf_common+0x82>
	...

08004fac <_printf_i>:
 8004fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fae:	b08b      	sub	sp, #44	@ 0x2c
 8004fb0:	9206      	str	r2, [sp, #24]
 8004fb2:	000a      	movs	r2, r1
 8004fb4:	3243      	adds	r2, #67	@ 0x43
 8004fb6:	9307      	str	r3, [sp, #28]
 8004fb8:	9005      	str	r0, [sp, #20]
 8004fba:	9203      	str	r2, [sp, #12]
 8004fbc:	7e0a      	ldrb	r2, [r1, #24]
 8004fbe:	000c      	movs	r4, r1
 8004fc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004fc2:	2a78      	cmp	r2, #120	@ 0x78
 8004fc4:	d809      	bhi.n	8004fda <_printf_i+0x2e>
 8004fc6:	2a62      	cmp	r2, #98	@ 0x62
 8004fc8:	d80b      	bhi.n	8004fe2 <_printf_i+0x36>
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d100      	bne.n	8004fd0 <_printf_i+0x24>
 8004fce:	e0bc      	b.n	800514a <_printf_i+0x19e>
 8004fd0:	497b      	ldr	r1, [pc, #492]	@ (80051c0 <_printf_i+0x214>)
 8004fd2:	9104      	str	r1, [sp, #16]
 8004fd4:	2a58      	cmp	r2, #88	@ 0x58
 8004fd6:	d100      	bne.n	8004fda <_printf_i+0x2e>
 8004fd8:	e090      	b.n	80050fc <_printf_i+0x150>
 8004fda:	0025      	movs	r5, r4
 8004fdc:	3542      	adds	r5, #66	@ 0x42
 8004fde:	702a      	strb	r2, [r5, #0]
 8004fe0:	e022      	b.n	8005028 <_printf_i+0x7c>
 8004fe2:	0010      	movs	r0, r2
 8004fe4:	3863      	subs	r0, #99	@ 0x63
 8004fe6:	2815      	cmp	r0, #21
 8004fe8:	d8f7      	bhi.n	8004fda <_printf_i+0x2e>
 8004fea:	f7fb f895 	bl	8000118 <__gnu_thumb1_case_shi>
 8004fee:	0016      	.short	0x0016
 8004ff0:	fff6001f 	.word	0xfff6001f
 8004ff4:	fff6fff6 	.word	0xfff6fff6
 8004ff8:	001ffff6 	.word	0x001ffff6
 8004ffc:	fff6fff6 	.word	0xfff6fff6
 8005000:	fff6fff6 	.word	0xfff6fff6
 8005004:	003600a1 	.word	0x003600a1
 8005008:	fff60080 	.word	0xfff60080
 800500c:	00b2fff6 	.word	0x00b2fff6
 8005010:	0036fff6 	.word	0x0036fff6
 8005014:	fff6fff6 	.word	0xfff6fff6
 8005018:	0084      	.short	0x0084
 800501a:	0025      	movs	r5, r4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	3542      	adds	r5, #66	@ 0x42
 8005020:	1d11      	adds	r1, r2, #4
 8005022:	6019      	str	r1, [r3, #0]
 8005024:	6813      	ldr	r3, [r2, #0]
 8005026:	702b      	strb	r3, [r5, #0]
 8005028:	2301      	movs	r3, #1
 800502a:	e0a0      	b.n	800516e <_printf_i+0x1c2>
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	6809      	ldr	r1, [r1, #0]
 8005030:	1d02      	adds	r2, r0, #4
 8005032:	060d      	lsls	r5, r1, #24
 8005034:	d50b      	bpl.n	800504e <_printf_i+0xa2>
 8005036:	6806      	ldr	r6, [r0, #0]
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	2e00      	cmp	r6, #0
 800503c:	da03      	bge.n	8005046 <_printf_i+0x9a>
 800503e:	232d      	movs	r3, #45	@ 0x2d
 8005040:	9a03      	ldr	r2, [sp, #12]
 8005042:	4276      	negs	r6, r6
 8005044:	7013      	strb	r3, [r2, #0]
 8005046:	4b5e      	ldr	r3, [pc, #376]	@ (80051c0 <_printf_i+0x214>)
 8005048:	270a      	movs	r7, #10
 800504a:	9304      	str	r3, [sp, #16]
 800504c:	e018      	b.n	8005080 <_printf_i+0xd4>
 800504e:	6806      	ldr	r6, [r0, #0]
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	0649      	lsls	r1, r1, #25
 8005054:	d5f1      	bpl.n	800503a <_printf_i+0x8e>
 8005056:	b236      	sxth	r6, r6
 8005058:	e7ef      	b.n	800503a <_printf_i+0x8e>
 800505a:	6808      	ldr	r0, [r1, #0]
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	c940      	ldmia	r1!, {r6}
 8005060:	0605      	lsls	r5, r0, #24
 8005062:	d402      	bmi.n	800506a <_printf_i+0xbe>
 8005064:	0640      	lsls	r0, r0, #25
 8005066:	d500      	bpl.n	800506a <_printf_i+0xbe>
 8005068:	b2b6      	uxth	r6, r6
 800506a:	6019      	str	r1, [r3, #0]
 800506c:	4b54      	ldr	r3, [pc, #336]	@ (80051c0 <_printf_i+0x214>)
 800506e:	270a      	movs	r7, #10
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	2a6f      	cmp	r2, #111	@ 0x6f
 8005074:	d100      	bne.n	8005078 <_printf_i+0xcc>
 8005076:	3f02      	subs	r7, #2
 8005078:	0023      	movs	r3, r4
 800507a:	2200      	movs	r2, #0
 800507c:	3343      	adds	r3, #67	@ 0x43
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	6863      	ldr	r3, [r4, #4]
 8005082:	60a3      	str	r3, [r4, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	db03      	blt.n	8005090 <_printf_i+0xe4>
 8005088:	2104      	movs	r1, #4
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	438a      	bics	r2, r1
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	2e00      	cmp	r6, #0
 8005092:	d102      	bne.n	800509a <_printf_i+0xee>
 8005094:	9d03      	ldr	r5, [sp, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <_printf_i+0x108>
 800509a:	9d03      	ldr	r5, [sp, #12]
 800509c:	0030      	movs	r0, r6
 800509e:	0039      	movs	r1, r7
 80050a0:	f7fb f8ca 	bl	8000238 <__aeabi_uidivmod>
 80050a4:	9b04      	ldr	r3, [sp, #16]
 80050a6:	3d01      	subs	r5, #1
 80050a8:	5c5b      	ldrb	r3, [r3, r1]
 80050aa:	702b      	strb	r3, [r5, #0]
 80050ac:	0033      	movs	r3, r6
 80050ae:	0006      	movs	r6, r0
 80050b0:	429f      	cmp	r7, r3
 80050b2:	d9f3      	bls.n	800509c <_printf_i+0xf0>
 80050b4:	2f08      	cmp	r7, #8
 80050b6:	d109      	bne.n	80050cc <_printf_i+0x120>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	07db      	lsls	r3, r3, #31
 80050bc:	d506      	bpl.n	80050cc <_printf_i+0x120>
 80050be:	6862      	ldr	r2, [r4, #4]
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	dc02      	bgt.n	80050cc <_printf_i+0x120>
 80050c6:	2330      	movs	r3, #48	@ 0x30
 80050c8:	3d01      	subs	r5, #1
 80050ca:	702b      	strb	r3, [r5, #0]
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	1b5b      	subs	r3, r3, r5
 80050d0:	6123      	str	r3, [r4, #16]
 80050d2:	9b07      	ldr	r3, [sp, #28]
 80050d4:	0021      	movs	r1, r4
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	9805      	ldr	r0, [sp, #20]
 80050da:	9b06      	ldr	r3, [sp, #24]
 80050dc:	aa09      	add	r2, sp, #36	@ 0x24
 80050de:	f7ff fef5 	bl	8004ecc <_printf_common>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d148      	bne.n	8005178 <_printf_i+0x1cc>
 80050e6:	2001      	movs	r0, #1
 80050e8:	4240      	negs	r0, r0
 80050ea:	b00b      	add	sp, #44	@ 0x2c
 80050ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ee:	2220      	movs	r2, #32
 80050f0:	6809      	ldr	r1, [r1, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	6022      	str	r2, [r4, #0]
 80050f6:	2278      	movs	r2, #120	@ 0x78
 80050f8:	4932      	ldr	r1, [pc, #200]	@ (80051c4 <_printf_i+0x218>)
 80050fa:	9104      	str	r1, [sp, #16]
 80050fc:	0021      	movs	r1, r4
 80050fe:	3145      	adds	r1, #69	@ 0x45
 8005100:	700a      	strb	r2, [r1, #0]
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	c940      	ldmia	r1!, {r6}
 8005108:	0610      	lsls	r0, r2, #24
 800510a:	d402      	bmi.n	8005112 <_printf_i+0x166>
 800510c:	0650      	lsls	r0, r2, #25
 800510e:	d500      	bpl.n	8005112 <_printf_i+0x166>
 8005110:	b2b6      	uxth	r6, r6
 8005112:	6019      	str	r1, [r3, #0]
 8005114:	07d3      	lsls	r3, r2, #31
 8005116:	d502      	bpl.n	800511e <_printf_i+0x172>
 8005118:	2320      	movs	r3, #32
 800511a:	4313      	orrs	r3, r2
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	2e00      	cmp	r6, #0
 8005120:	d001      	beq.n	8005126 <_printf_i+0x17a>
 8005122:	2710      	movs	r7, #16
 8005124:	e7a8      	b.n	8005078 <_printf_i+0xcc>
 8005126:	2220      	movs	r2, #32
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	4393      	bics	r3, r2
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	e7f8      	b.n	8005122 <_printf_i+0x176>
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	680d      	ldr	r5, [r1, #0]
 8005134:	1d10      	adds	r0, r2, #4
 8005136:	6949      	ldr	r1, [r1, #20]
 8005138:	6018      	str	r0, [r3, #0]
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	062e      	lsls	r6, r5, #24
 800513e:	d501      	bpl.n	8005144 <_printf_i+0x198>
 8005140:	6019      	str	r1, [r3, #0]
 8005142:	e002      	b.n	800514a <_printf_i+0x19e>
 8005144:	066d      	lsls	r5, r5, #25
 8005146:	d5fb      	bpl.n	8005140 <_printf_i+0x194>
 8005148:	8019      	strh	r1, [r3, #0]
 800514a:	2300      	movs	r3, #0
 800514c:	9d03      	ldr	r5, [sp, #12]
 800514e:	6123      	str	r3, [r4, #16]
 8005150:	e7bf      	b.n	80050d2 <_printf_i+0x126>
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	1d11      	adds	r1, r2, #4
 8005156:	6019      	str	r1, [r3, #0]
 8005158:	6815      	ldr	r5, [r2, #0]
 800515a:	2100      	movs	r1, #0
 800515c:	0028      	movs	r0, r5
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	f000 f858 	bl	8005214 <memchr>
 8005164:	2800      	cmp	r0, #0
 8005166:	d001      	beq.n	800516c <_printf_i+0x1c0>
 8005168:	1b40      	subs	r0, r0, r5
 800516a:	6060      	str	r0, [r4, #4]
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	2300      	movs	r3, #0
 8005172:	9a03      	ldr	r2, [sp, #12]
 8005174:	7013      	strb	r3, [r2, #0]
 8005176:	e7ac      	b.n	80050d2 <_printf_i+0x126>
 8005178:	002a      	movs	r2, r5
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	9906      	ldr	r1, [sp, #24]
 800517e:	9805      	ldr	r0, [sp, #20]
 8005180:	9d07      	ldr	r5, [sp, #28]
 8005182:	47a8      	blx	r5
 8005184:	3001      	adds	r0, #1
 8005186:	d0ae      	beq.n	80050e6 <_printf_i+0x13a>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	079b      	lsls	r3, r3, #30
 800518c:	d415      	bmi.n	80051ba <_printf_i+0x20e>
 800518e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005190:	68e0      	ldr	r0, [r4, #12]
 8005192:	4298      	cmp	r0, r3
 8005194:	daa9      	bge.n	80050ea <_printf_i+0x13e>
 8005196:	0018      	movs	r0, r3
 8005198:	e7a7      	b.n	80050ea <_printf_i+0x13e>
 800519a:	0022      	movs	r2, r4
 800519c:	2301      	movs	r3, #1
 800519e:	9906      	ldr	r1, [sp, #24]
 80051a0:	9805      	ldr	r0, [sp, #20]
 80051a2:	9e07      	ldr	r6, [sp, #28]
 80051a4:	3219      	adds	r2, #25
 80051a6:	47b0      	blx	r6
 80051a8:	3001      	adds	r0, #1
 80051aa:	d09c      	beq.n	80050e6 <_printf_i+0x13a>
 80051ac:	3501      	adds	r5, #1
 80051ae:	68e3      	ldr	r3, [r4, #12]
 80051b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	dcf0      	bgt.n	800519a <_printf_i+0x1ee>
 80051b8:	e7e9      	b.n	800518e <_printf_i+0x1e2>
 80051ba:	2500      	movs	r5, #0
 80051bc:	e7f7      	b.n	80051ae <_printf_i+0x202>
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	080058c9 	.word	0x080058c9
 80051c4:	080058da 	.word	0x080058da

080051c8 <memmove>:
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4288      	cmp	r0, r1
 80051cc:	d806      	bhi.n	80051dc <memmove+0x14>
 80051ce:	2300      	movs	r3, #0
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d008      	beq.n	80051e6 <memmove+0x1e>
 80051d4:	5ccc      	ldrb	r4, [r1, r3]
 80051d6:	54c4      	strb	r4, [r0, r3]
 80051d8:	3301      	adds	r3, #1
 80051da:	e7f9      	b.n	80051d0 <memmove+0x8>
 80051dc:	188b      	adds	r3, r1, r2
 80051de:	4298      	cmp	r0, r3
 80051e0:	d2f5      	bcs.n	80051ce <memmove+0x6>
 80051e2:	3a01      	subs	r2, #1
 80051e4:	d200      	bcs.n	80051e8 <memmove+0x20>
 80051e6:	bd10      	pop	{r4, pc}
 80051e8:	5c8b      	ldrb	r3, [r1, r2]
 80051ea:	5483      	strb	r3, [r0, r2]
 80051ec:	e7f9      	b.n	80051e2 <memmove+0x1a>
	...

080051f0 <_sbrk_r>:
 80051f0:	2300      	movs	r3, #0
 80051f2:	b570      	push	{r4, r5, r6, lr}
 80051f4:	4d06      	ldr	r5, [pc, #24]	@ (8005210 <_sbrk_r+0x20>)
 80051f6:	0004      	movs	r4, r0
 80051f8:	0008      	movs	r0, r1
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	f7fc fac2 	bl	8001784 <_sbrk>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d103      	bne.n	800520c <_sbrk_r+0x1c>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d000      	beq.n	800520c <_sbrk_r+0x1c>
 800520a:	6023      	str	r3, [r4, #0]
 800520c:	bd70      	pop	{r4, r5, r6, pc}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	20000510 	.word	0x20000510

08005214 <memchr>:
 8005214:	b2c9      	uxtb	r1, r1
 8005216:	1882      	adds	r2, r0, r2
 8005218:	4290      	cmp	r0, r2
 800521a:	d101      	bne.n	8005220 <memchr+0xc>
 800521c:	2000      	movs	r0, #0
 800521e:	4770      	bx	lr
 8005220:	7803      	ldrb	r3, [r0, #0]
 8005222:	428b      	cmp	r3, r1
 8005224:	d0fb      	beq.n	800521e <memchr+0xa>
 8005226:	3001      	adds	r0, #1
 8005228:	e7f6      	b.n	8005218 <memchr+0x4>

0800522a <_realloc_r>:
 800522a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800522c:	0006      	movs	r6, r0
 800522e:	000c      	movs	r4, r1
 8005230:	0015      	movs	r5, r2
 8005232:	2900      	cmp	r1, #0
 8005234:	d105      	bne.n	8005242 <_realloc_r+0x18>
 8005236:	0011      	movs	r1, r2
 8005238:	f7ff fc5a 	bl	8004af0 <_malloc_r>
 800523c:	0004      	movs	r4, r0
 800523e:	0020      	movs	r0, r4
 8005240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005242:	2a00      	cmp	r2, #0
 8005244:	d103      	bne.n	800524e <_realloc_r+0x24>
 8005246:	f7ff fbe7 	bl	8004a18 <_free_r>
 800524a:	2400      	movs	r4, #0
 800524c:	e7f7      	b.n	800523e <_realloc_r+0x14>
 800524e:	f000 f81b 	bl	8005288 <_malloc_usable_size_r>
 8005252:	0007      	movs	r7, r0
 8005254:	4285      	cmp	r5, r0
 8005256:	d802      	bhi.n	800525e <_realloc_r+0x34>
 8005258:	0843      	lsrs	r3, r0, #1
 800525a:	42ab      	cmp	r3, r5
 800525c:	d3ef      	bcc.n	800523e <_realloc_r+0x14>
 800525e:	0029      	movs	r1, r5
 8005260:	0030      	movs	r0, r6
 8005262:	f7ff fc45 	bl	8004af0 <_malloc_r>
 8005266:	9001      	str	r0, [sp, #4]
 8005268:	2800      	cmp	r0, #0
 800526a:	d0ee      	beq.n	800524a <_realloc_r+0x20>
 800526c:	002a      	movs	r2, r5
 800526e:	42bd      	cmp	r5, r7
 8005270:	d900      	bls.n	8005274 <_realloc_r+0x4a>
 8005272:	003a      	movs	r2, r7
 8005274:	0021      	movs	r1, r4
 8005276:	9801      	ldr	r0, [sp, #4]
 8005278:	f7ff fbc4 	bl	8004a04 <memcpy>
 800527c:	0021      	movs	r1, r4
 800527e:	0030      	movs	r0, r6
 8005280:	f7ff fbca 	bl	8004a18 <_free_r>
 8005284:	9c01      	ldr	r4, [sp, #4]
 8005286:	e7da      	b.n	800523e <_realloc_r+0x14>

08005288 <_malloc_usable_size_r>:
 8005288:	1f0b      	subs	r3, r1, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	1f18      	subs	r0, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	da01      	bge.n	8005296 <_malloc_usable_size_r+0xe>
 8005292:	580b      	ldr	r3, [r1, r0]
 8005294:	18c0      	adds	r0, r0, r3
 8005296:	4770      	bx	lr

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
