
BOOTLOADER_MY_PRINTF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080033e4  080033e4  000043e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003460  08003460  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003460  08003460  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003460  08003460  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003468  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000005c  080034c4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080034c4  0000533c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009590  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a7  00000000  00000000  0000e614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000ffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000616  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c67  00000000  00000000  00010dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b899  00000000  00000000  0002aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000940f6  00000000  00000000  000362c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca3bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f78  00000000  00000000  000ca400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000cc378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033cc 	.word	0x080033cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080033cc 	.word	0x080033cc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <printMessage>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printMessage(char *format,...)
{
 8000244:	b40f      	push	{r0, r1, r2, r3}
 8000246:	b580      	push	{r7, lr}
 8000248:	b09a      	sub	sp, #104	@ 0x68
 800024a:	af00      	add	r7, sp, #0
	char commingMessage[100];
	va_list vaList;

	va_start(vaList,format);
 800024c:	2374      	movs	r3, #116	@ 0x74
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	603b      	str	r3, [r7, #0]
	vsprintf(commingMessage,format,vaList);
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	0018      	movs	r0, r3
 800025a:	f002 fc2d 	bl	8002ab8 <vsiprintf>

	HAL_UART_Transmit(&huart2, (uint8_t*)commingMessage, strlen(commingMessage), HAL_MAX_DELAY);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	0018      	movs	r0, r3
 8000262:	f7ff ff51 	bl	8000108 <strlen>
 8000266:	0003      	movs	r3, r0
 8000268:	b29a      	uxth	r2, r3
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	1d39      	adds	r1, r7, #4
 8000270:	4804      	ldr	r0, [pc, #16]	@ (8000284 <printMessage+0x40>)
 8000272:	f001 ffb3 	bl	80021dc <HAL_UART_Transmit>
	va_end(vaList);

// #include <stdarg.h> // remember!!!

}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b01a      	add	sp, #104	@ 0x68
 800027c:	bc80      	pop	{r7}
 800027e:	bc08      	pop	{r3}
 8000280:	b004      	add	sp, #16
 8000282:	4718      	bx	r3
 8000284:	20000164 	.word	0x20000164

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 fb66 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f818 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f000 f962 	bl	800055c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000298:	f000 f930 	bl	80004fc <MX_USART2_UART_Init>
  MX_ADC_Init();
 800029c:	f000 f872 	bl	8000384 <MX_ADC_Init>
  MX_USART1_UART_Init();
 80002a0:	f000 f8fc 	bl	800049c <MX_USART1_UART_Init>
  MX_CRC_Init();
 80002a4:	f000 f8d6 	bl	8000454 <MX_CRC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printMessage("Project %d\n!",1);
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <main+0x38>)
 80002aa:	2101      	movs	r1, #1
 80002ac:	0018      	movs	r0, r3
 80002ae:	f7ff ffc9 	bl	8000244 <printMessage>
	  HAL_Delay(500);
 80002b2:	23fa      	movs	r3, #250	@ 0xfa
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 fbb4 	bl	8000a24 <HAL_Delay>
	  printMessage("Project %d\n!",1);
 80002bc:	46c0      	nop			@ (mov r8, r8)
 80002be:	e7f3      	b.n	80002a8 <main+0x20>
 80002c0:	080033e4 	.word	0x080033e4

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b099      	sub	sp, #100	@ 0x64
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	242c      	movs	r4, #44	@ 0x2c
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	2334      	movs	r3, #52	@ 0x34
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f002 fbfb 	bl	8002ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	231c      	movs	r3, #28
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f002 fbf3 	bl	8002ad0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ea:	003b      	movs	r3, r7
 80002ec:	0018      	movs	r0, r3
 80002ee:	231c      	movs	r3, #28
 80002f0:	001a      	movs	r2, r3
 80002f2:	2100      	movs	r1, #0
 80002f4:	f002 fbec 	bl	8002ad0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002f8:	0021      	movs	r1, r4
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2212      	movs	r2, #18
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2201      	movs	r2, #1
 8000304:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2201      	movs	r2, #1
 800030a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2210      	movs	r2, #16
 8000310:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	187b      	adds	r3, r7, r1
 8000320:	0018      	movs	r0, r3
 8000322:	f001 f917 	bl	8001554 <HAL_RCC_OscConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800032a:	f000 f981 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	211c      	movs	r1, #28
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2207      	movs	r2, #7
 8000334:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2100      	movs	r1, #0
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fc87 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000352:	1e03      	subs	r3, r0, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000356:	f000 f96b 	bl	8000630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800035a:	003b      	movs	r3, r7
 800035c:	2203      	movs	r2, #3
 800035e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000366:	003b      	movs	r3, r7
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036c:	003b      	movs	r3, r7
 800036e:	0018      	movs	r0, r3
 8000370:	f001 fde2 	bl	8001f38 <HAL_RCCEx_PeriphCLKConfig>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000378:	f000 f95a 	bl	8000630 <Error_Handler>
  }
}
 800037c:	46c0      	nop			@ (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b019      	add	sp, #100	@ 0x64
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	0018      	movs	r0, r3
 800038e:	230c      	movs	r3, #12
 8000390:	001a      	movs	r2, r3
 8000392:	2100      	movs	r1, #0
 8000394:	f002 fb9c 	bl	8002ad0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000398:	4b2c      	ldr	r3, [pc, #176]	@ (800044c <MX_ADC_Init+0xc8>)
 800039a:	4a2d      	ldr	r2, [pc, #180]	@ (8000450 <MX_ADC_Init+0xcc>)
 800039c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800039e:	4b2b      	ldr	r3, [pc, #172]	@ (800044c <MX_ADC_Init+0xc8>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80003a4:	4b29      	ldr	r3, [pc, #164]	@ (800044c <MX_ADC_Init+0xc8>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003aa:	4b28      	ldr	r3, [pc, #160]	@ (800044c <MX_ADC_Init+0xc8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003b0:	4b26      	ldr	r3, [pc, #152]	@ (800044c <MX_ADC_Init+0xc8>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b6:	4b25      	ldr	r3, [pc, #148]	@ (800044c <MX_ADC_Init+0xc8>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003bc:	4b23      	ldr	r3, [pc, #140]	@ (800044c <MX_ADC_Init+0xc8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003c2:	4b22      	ldr	r3, [pc, #136]	@ (800044c <MX_ADC_Init+0xc8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b20      	ldr	r3, [pc, #128]	@ (800044c <MX_ADC_Init+0xc8>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b1f      	ldr	r3, [pc, #124]	@ (800044c <MX_ADC_Init+0xc8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <MX_ADC_Init+0xc8>)
 80003d6:	22c2      	movs	r2, #194	@ 0xc2
 80003d8:	32ff      	adds	r2, #255	@ 0xff
 80003da:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	@ (800044c <MX_ADC_Init+0xc8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <MX_ADC_Init+0xc8>)
 80003e4:	2224      	movs	r2, #36	@ 0x24
 80003e6:	2100      	movs	r1, #0
 80003e8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ea:	4b18      	ldr	r3, [pc, #96]	@ (800044c <MX_ADC_Init+0xc8>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003f0:	4b16      	ldr	r3, [pc, #88]	@ (800044c <MX_ADC_Init+0xc8>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 fb3a 	bl	8000a6c <HAL_ADC_Init>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003fc:	f000 f918 	bl	8000630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2280      	movs	r2, #128	@ 0x80
 800040a:	0152      	lsls	r2, r2, #5
 800040c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2280      	movs	r2, #128	@ 0x80
 8000412:	0552      	lsls	r2, r2, #21
 8000414:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000416:	1d3a      	adds	r2, r7, #4
 8000418:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_ADC_Init+0xc8>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fc65 	bl	8000cec <HAL_ADC_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000426:	f000 f903 	bl	8000630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2211      	movs	r2, #17
 800042e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000430:	1d3a      	adds	r2, r7, #4
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_ADC_Init+0xc8>)
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f000 fc58 	bl	8000cec <HAL_ADC_ConfigChannel>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000440:	f000 f8f6 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b004      	add	sp, #16
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000078 	.word	0x20000078
 8000450:	40012400 	.word	0x40012400

08000454 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_CRC_Init+0x40>)
 800045a:	4a0f      	ldr	r2, [pc, #60]	@ (8000498 <MX_CRC_Init+0x44>)
 800045c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800045e:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <MX_CRC_Init+0x40>)
 8000460:	2200      	movs	r2, #0
 8000462:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_CRC_Init+0x40>)
 8000466:	2200      	movs	r2, #0
 8000468:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <MX_CRC_Init+0x40>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000470:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_CRC_Init+0x40>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <MX_CRC_Init+0x40>)
 8000478:	2201      	movs	r2, #1
 800047a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800047c:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <MX_CRC_Init+0x40>)
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fdf6 	bl	8001070 <HAL_CRC_Init>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000488:	f000 f8d2 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800048c:	46c0      	nop			@ (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	200000b8 	.word	0x200000b8
 8000498:	40023000 	.word	0x40023000

0800049c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004a0:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004a2:	4a15      	ldr	r2, [pc, #84]	@ (80004f8 <MX_USART1_UART_Init+0x5c>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004a6:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004a8:	22e1      	movs	r2, #225	@ 0xe1
 80004aa:	0252      	lsls	r2, r2, #9
 80004ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004de:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <MX_USART1_UART_Init+0x58>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fe27 	bl	8002134 <HAL_UART_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004ea:	f000 f8a1 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000dc 	.word	0x200000dc
 80004f8:	40013800 	.word	0x40013800

080004fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000500:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000502:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <MX_USART2_UART_Init+0x5c>)
 8000504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000506:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000508:	22e1      	movs	r2, #225	@ 0xe1
 800050a:	0252      	lsls	r2, r2, #9
 800050c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000514:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051a:	4b0e      	ldr	r3, [pc, #56]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000522:	220c      	movs	r2, #12
 8000524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800052c:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000532:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053e:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <MX_USART2_UART_Init+0x58>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fdf7 	bl	8002134 <HAL_UART_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800054a:	f000 f871 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000164 	.word	0x20000164
 8000558:	40004400 	.word	0x40004400

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b089      	sub	sp, #36	@ 0x24
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	240c      	movs	r4, #12
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 faaf 	bl	8002ad0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b2d      	ldr	r3, [pc, #180]	@ (8000628 <MX_GPIO_Init+0xcc>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <MX_GPIO_Init+0xcc>)
 8000578:	2180      	movs	r1, #128	@ 0x80
 800057a:	0309      	lsls	r1, r1, #12
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b29      	ldr	r3, [pc, #164]	@ (8000628 <MX_GPIO_Init+0xcc>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	@ 0x80
 8000586:	031b      	lsls	r3, r3, #12
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b26      	ldr	r3, [pc, #152]	@ (8000628 <MX_GPIO_Init+0xcc>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <MX_GPIO_Init+0xcc>)
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	03c9      	lsls	r1, r1, #15
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <MX_GPIO_Init+0xcc>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	03db      	lsls	r3, r3, #15
 80005a4:	4013      	ands	r3, r2
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <MX_GPIO_Init+0xcc>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_GPIO_Init+0xcc>)
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	0289      	lsls	r1, r1, #10
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <MX_GPIO_Init+0xcc>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	029b      	lsls	r3, r3, #10
 80005c0:	4013      	ands	r3, r2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c6:	2390      	movs	r3, #144	@ 0x90
 80005c8:	05db      	lsls	r3, r3, #23
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	0018      	movs	r0, r3
 80005d0:	f000 ffa2 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d4:	193b      	adds	r3, r7, r4
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	0192      	lsls	r2, r2, #6
 80005da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2284      	movs	r2, #132	@ 0x84
 80005e0:	0392      	lsls	r2, r2, #14
 80005e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_GPIO_Init+0xd0>)
 80005ee:	0019      	movs	r1, r3
 80005f0:	0010      	movs	r0, r2
 80005f2:	f000 fe19 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2220      	movs	r2, #32
 80005fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2201      	movs	r2, #1
 8000602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000610:	187a      	adds	r2, r7, r1
 8000612:	2390      	movs	r3, #144	@ 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 fe05 	bl	8001228 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b009      	add	sp, #36	@ 0x24
 8000624:	bd90      	pop	{r4, r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	40021000 	.word	0x40021000
 800062c:	48000800 	.word	0x48000800

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	e7fd      	b.n	8000638 <Error_Handler+0x8>

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <HAL_MspInit+0x44>)
 8000644:	699a      	ldr	r2, [r3, #24]
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <HAL_MspInit+0x44>)
 8000648:	2101      	movs	r1, #1
 800064a:	430a      	orrs	r2, r1
 800064c:	619a      	str	r2, [r3, #24]
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_MspInit+0x44>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	2201      	movs	r2, #1
 8000654:	4013      	ands	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <HAL_MspInit+0x44>)
 800065c:	69da      	ldr	r2, [r3, #28]
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <HAL_MspInit+0x44>)
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	0549      	lsls	r1, r1, #21
 8000664:	430a      	orrs	r2, r1
 8000666:	61da      	str	r2, [r3, #28]
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_MspInit+0x44>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	055b      	lsls	r3, r3, #21
 8000670:	4013      	ands	r3, r2
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08b      	sub	sp, #44	@ 0x2c
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	2414      	movs	r4, #20
 800068e:	193b      	adds	r3, r7, r4
 8000690:	0018      	movs	r0, r3
 8000692:	2314      	movs	r3, #20
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f002 fa1a 	bl	8002ad0 <memset>
  if(hadc->Instance==ADC1)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a19      	ldr	r2, [pc, #100]	@ (8000708 <HAL_ADC_MspInit+0x84>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d12b      	bne.n	80006fe <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <HAL_ADC_MspInit+0x88>)
 80006a8:	699a      	ldr	r2, [r3, #24]
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <HAL_ADC_MspInit+0x88>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0089      	lsls	r1, r1, #2
 80006b0:	430a      	orrs	r2, r1
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_ADC_MspInit+0x88>)
 80006b6:	699a      	ldr	r2, [r3, #24]
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4013      	ands	r3, r2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_ADC_MspInit+0x88>)
 80006c4:	695a      	ldr	r2, [r3, #20]
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_ADC_MspInit+0x88>)
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	0289      	lsls	r1, r1, #10
 80006cc:	430a      	orrs	r2, r1
 80006ce:	615a      	str	r2, [r3, #20]
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <HAL_ADC_MspInit+0x88>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	2380      	movs	r3, #128	@ 0x80
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4013      	ands	r3, r2
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2202      	movs	r2, #2
 80006e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2203      	movs	r2, #3
 80006e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	193a      	adds	r2, r7, r4
 80006f2:	2390      	movs	r3, #144	@ 0x90
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fd95 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	b00b      	add	sp, #44	@ 0x2c
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	40012400 	.word	0x40012400
 800070c:	40021000 	.word	0x40021000

08000710 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <HAL_CRC_MspInit+0x34>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10b      	bne.n	800073a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <HAL_CRC_MspInit+0x38>)
 8000724:	695a      	ldr	r2, [r3, #20]
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <HAL_CRC_MspInit+0x38>)
 8000728:	2140      	movs	r1, #64	@ 0x40
 800072a:	430a      	orrs	r2, r1
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <HAL_CRC_MspInit+0x38>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	2240      	movs	r2, #64	@ 0x40
 8000734:	4013      	ands	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b004      	add	sp, #16
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40023000 	.word	0x40023000
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b08d      	sub	sp, #52	@ 0x34
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	241c      	movs	r4, #28
 8000756:	193b      	adds	r3, r7, r4
 8000758:	0018      	movs	r0, r3
 800075a:	2314      	movs	r3, #20
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f002 f9b6 	bl	8002ad0 <memset>
  if(huart->Instance==USART1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a39      	ldr	r2, [pc, #228]	@ (8000850 <HAL_UART_MspInit+0x104>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d134      	bne.n	80007d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800076e:	4b39      	ldr	r3, [pc, #228]	@ (8000854 <HAL_UART_MspInit+0x108>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	4b38      	ldr	r3, [pc, #224]	@ (8000854 <HAL_UART_MspInit+0x108>)
 8000774:	2180      	movs	r1, #128	@ 0x80
 8000776:	01c9      	lsls	r1, r1, #7
 8000778:	430a      	orrs	r2, r1
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	4b35      	ldr	r3, [pc, #212]	@ (8000854 <HAL_UART_MspInit+0x108>)
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	01db      	lsls	r3, r3, #7
 8000784:	4013      	ands	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <HAL_UART_MspInit+0x108>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <HAL_UART_MspInit+0x108>)
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	0289      	lsls	r1, r1, #10
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <HAL_UART_MspInit+0x108>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	029b      	lsls	r3, r3, #10
 80007a0:	4013      	ands	r3, r2
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	22c0      	movs	r2, #192	@ 0xc0
 80007aa:	00d2      	lsls	r2, r2, #3
 80007ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	0021      	movs	r1, r4
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2202      	movs	r2, #2
 80007b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2203      	movs	r2, #3
 80007c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2201      	movs	r2, #1
 80007c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	187a      	adds	r2, r7, r1
 80007ca:	2390      	movs	r3, #144	@ 0x90
 80007cc:	05db      	lsls	r3, r3, #23
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fd29 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d6:	e037      	b.n	8000848 <HAL_UART_MspInit+0xfc>
  else if(huart->Instance==USART2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000858 <HAL_UART_MspInit+0x10c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d132      	bne.n	8000848 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <HAL_UART_MspInit+0x108>)
 80007e4:	69da      	ldr	r2, [r3, #28]
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <HAL_UART_MspInit+0x108>)
 80007e8:	2180      	movs	r1, #128	@ 0x80
 80007ea:	0289      	lsls	r1, r1, #10
 80007ec:	430a      	orrs	r2, r1
 80007ee:	61da      	str	r2, [r3, #28]
 80007f0:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <HAL_UART_MspInit+0x108>)
 80007f2:	69da      	ldr	r2, [r3, #28]
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	029b      	lsls	r3, r3, #10
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_UART_MspInit+0x108>)
 8000800:	695a      	ldr	r2, [r3, #20]
 8000802:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <HAL_UART_MspInit+0x108>)
 8000804:	2180      	movs	r1, #128	@ 0x80
 8000806:	0289      	lsls	r1, r1, #10
 8000808:	430a      	orrs	r2, r1
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <HAL_UART_MspInit+0x108>)
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	029b      	lsls	r3, r3, #10
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800081a:	211c      	movs	r1, #28
 800081c:	187b      	adds	r3, r7, r1
 800081e:	220c      	movs	r2, #12
 8000820:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2202      	movs	r2, #2
 8000826:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2201      	movs	r2, #1
 8000838:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	187a      	adds	r2, r7, r1
 800083c:	2390      	movs	r3, #144	@ 0x90
 800083e:	05db      	lsls	r3, r3, #23
 8000840:	0011      	movs	r1, r2
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fcf0 	bl	8001228 <HAL_GPIO_Init>
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	b00d      	add	sp, #52	@ 0x34
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	40013800 	.word	0x40013800
 8000854:	40021000 	.word	0x40021000
 8000858:	40004400 	.word	0x40004400

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f8b2 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000898:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <_sbrk+0x5c>)
 800089a:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <_sbrk+0x60>)
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <_sbrk+0x64>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <_sbrk+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d207      	bcs.n	80008d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c0:	f002 f90e 	bl	8002ae0 <__errno>
 80008c4:	0003      	movs	r3, r0
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	425b      	negs	r3, r3
 80008ce:	e009      	b.n	80008e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d0:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <_sbrk+0x64>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d6:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	18d2      	adds	r2, r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <_sbrk+0x64>)
 80008e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008e2:	68fb      	ldr	r3, [r7, #12]
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b006      	add	sp, #24
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20004000 	.word	0x20004000
 80008f0:	00000400 	.word	0x00000400
 80008f4:	200001ec 	.word	0x200001ec
 80008f8:	20000340 	.word	0x20000340

080008fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	@ (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800090c:	f7ff fff6 	bl	80008fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000936:	f002 f8d9 	bl	8002aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fca5 	bl	8000288 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800094c:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 8000950:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000954:	2000033c 	.word	0x2000033c

08000958 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_COMP_IRQHandler>
	...

0800095c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <HAL_Init+0x24>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_Init+0x24>)
 8000966:	2110      	movs	r1, #16
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800096c:	2000      	movs	r0, #0
 800096e:	f000 f809 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000972:	f7ff fe63 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <HAL_InitTick+0x5c>)
 800098e:	681c      	ldr	r4, [r3, #0]
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_InitTick+0x60>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	0019      	movs	r1, r3
 8000996:	23fa      	movs	r3, #250	@ 0xfa
 8000998:	0098      	lsls	r0, r3, #2
 800099a:	f7ff fbc7 	bl	800012c <__udivsi3>
 800099e:	0003      	movs	r3, r0
 80009a0:	0019      	movs	r1, r3
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff fbc2 	bl	800012c <__udivsi3>
 80009a8:	0003      	movs	r3, r0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fb53 	bl	8001056 <HAL_SYSTICK_Config>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e00f      	b.n	80009d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d80b      	bhi.n	80009d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	2301      	movs	r3, #1
 80009c2:	425b      	negs	r3, r3
 80009c4:	2200      	movs	r2, #0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fb30 	bl	800102c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_InitTick+0x64>)
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b003      	add	sp, #12
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_IncTick+0x20>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	18d2      	adds	r2, r2, r3
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_IncTick+0x20>)
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200001f0 	.word	0x200001f0

08000a10 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b02      	ldr	r3, [pc, #8]	@ (8000a20 <HAL_GetTick+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	200001f0 	.word	0x200001f0

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fff0 	bl	8000a10 <HAL_GetTick>
 8000a30:	0003      	movs	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <HAL_Delay+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	001a      	movs	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	189b      	adds	r3, r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	f7ff ffe0 	bl	8000a10 <HAL_GetTick>
 8000a50:	0002      	movs	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b004      	add	sp, #16
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e125      	b.n	8000cd6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10a      	bne.n	8000aa8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2234      	movs	r2, #52	@ 0x34
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fdee 	bl	8000684 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aac:	2210      	movs	r2, #16
 8000aae:	4013      	ands	r3, r2
 8000ab0:	d000      	beq.n	8000ab4 <HAL_ADC_Init+0x48>
 8000ab2:	e103      	b.n	8000cbc <HAL_ADC_Init+0x250>
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d000      	beq.n	8000ac0 <HAL_ADC_Init+0x54>
 8000abe:	e0fd      	b.n	8000cbc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000aca:	d000      	beq.n	8000ace <HAL_ADC_Init+0x62>
 8000acc:	e0f6      	b.n	8000cbc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ad2:	4a83      	ldr	r2, [pc, #524]	@ (8000ce0 <HAL_ADC_Init+0x274>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d112      	bne.n	8000b12 <HAL_ADC_Init+0xa6>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d009      	beq.n	8000b0e <HAL_ADC_Init+0xa2>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68da      	ldr	r2, [r3, #12]
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	401a      	ands	r2, r3
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d101      	bne.n	8000b12 <HAL_ADC_Init+0xa6>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_ADC_Init+0xa8>
 8000b12:	2300      	movs	r3, #0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d116      	bne.n	8000b46 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	2218      	movs	r2, #24
 8000b20:	4393      	bics	r3, r2
 8000b22:	0019      	movs	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	0899      	lsrs	r1, r3, #2
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4964      	ldr	r1, [pc, #400]	@ (8000ce4 <HAL_ADC_Init+0x278>)
 8000b52:	400a      	ands	r2, r1
 8000b54:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7e1b      	ldrb	r3, [r3, #24]
 8000b5a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7e5b      	ldrb	r3, [r3, #25]
 8000b60:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b62:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7e9b      	ldrb	r3, [r3, #26]
 8000b68:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d002      	beq.n	8000b7a <HAL_ADC_Init+0x10e>
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	e000      	b.n	8000b7c <HAL_ADC_Init+0x110>
 8000b7a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b7c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000b82:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d101      	bne.n	8000b90 <HAL_ADC_Init+0x124>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	e000      	b.n	8000b92 <HAL_ADC_Init+0x126>
 8000b90:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000b92:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2124      	movs	r1, #36	@ 0x24
 8000b98:	5c5b      	ldrb	r3, [r3, r1]
 8000b9a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000b9c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7edb      	ldrb	r3, [r3, #27]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d115      	bne.n	8000bd8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7e9b      	ldrb	r3, [r3, #26]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d105      	bne.n	8000bc0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2280      	movs	r2, #128	@ 0x80
 8000bb8:	0252      	lsls	r2, r2, #9
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69da      	ldr	r2, [r3, #28]
 8000bdc:	23c2      	movs	r3, #194	@ 0xc2
 8000bde:	33ff      	adds	r3, #255	@ 0xff
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d007      	beq.n	8000bf4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000bec:	4313      	orrs	r3, r2
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68d9      	ldr	r1, [r3, #12]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	055b      	lsls	r3, r3, #21
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d01b      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d017      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d013      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d00f      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d00b      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d007      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d003      	beq.n	8000c48 <HAL_ADC_Init+0x1dc>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d112      	bne.n	8000c6e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2107      	movs	r1, #7
 8000c54:	438a      	bics	r2, r1
 8000c56:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6959      	ldr	r1, [r3, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c62:	2207      	movs	r2, #7
 8000c64:	401a      	ands	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce8 <HAL_ADC_Init+0x27c>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d10b      	bne.n	8000c96 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c88:	2203      	movs	r2, #3
 8000c8a:	4393      	bics	r3, r2
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000c94:	e01c      	b.n	8000cd0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c9a:	2212      	movs	r2, #18
 8000c9c:	4393      	bics	r3, r2
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000caa:	2201      	movs	r2, #1
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cba:	e009      	b.n	8000cd0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cc0:	2210      	movs	r2, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	781b      	ldrb	r3, [r3, #0]
}
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	fffffefd 	.word	0xfffffefd
 8000ce4:	fffe0219 	.word	0xfffe0219
 8000ce8:	833fffe7 	.word	0x833fffe7

08000cec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d06:	2380      	movs	r3, #128	@ 0x80
 8000d08:	055b      	lsls	r3, r3, #21
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d011      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d00d      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d009      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d005      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d001      	beq.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2234      	movs	r2, #52	@ 0x34
 8000d36:	5c9b      	ldrb	r3, [r3, r2]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_ADC_ConfigChannel+0x54>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e0d0      	b.n	8000ee2 <HAL_ADC_ConfigChannel+0x1f6>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2234      	movs	r2, #52	@ 0x34
 8000d44:	2101      	movs	r1, #1
 8000d46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4013      	ands	r3, r2
 8000d52:	d000      	beq.n	8000d56 <HAL_ADC_ConfigChannel+0x6a>
 8000d54:	e0b4      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a64      	ldr	r2, [pc, #400]	@ (8000eec <HAL_ADC_ConfigChannel+0x200>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d100      	bne.n	8000d62 <HAL_ADC_ConfigChannel+0x76>
 8000d60:	e082      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	055b      	lsls	r3, r3, #21
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d037      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d033      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d02f      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d02b      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d027      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	d023      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db0:	2b06      	cmp	r3, #6
 8000db2:	d01f      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db8:	2b07      	cmp	r3, #7
 8000dba:	d01b      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	2107      	movs	r1, #7
 8000dc8:	400b      	ands	r3, r1
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d012      	beq.n	8000df4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2107      	movs	r1, #7
 8000dda:	438a      	bics	r2, r1
 8000ddc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6959      	ldr	r1, [r3, #20]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2207      	movs	r2, #7
 8000dea:	401a      	ands	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	430a      	orrs	r2, r1
 8000df2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b10      	cmp	r3, #16
 8000dfa:	d007      	beq.n	8000e0c <HAL_ADC_ConfigChannel+0x120>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b11      	cmp	r3, #17
 8000e02:	d003      	beq.n	8000e0c <HAL_ADC_ConfigChannel+0x120>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b12      	cmp	r3, #18
 8000e0a:	d163      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e0c:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <HAL_ADC_ConfigChannel+0x204>)
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b10      	cmp	r3, #16
 8000e16:	d009      	beq.n	8000e2c <HAL_ADC_ConfigChannel+0x140>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d102      	bne.n	8000e26 <HAL_ADC_ConfigChannel+0x13a>
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	03db      	lsls	r3, r3, #15
 8000e24:	e004      	b.n	8000e30 <HAL_ADC_ConfigChannel+0x144>
 8000e26:	2380      	movs	r3, #128	@ 0x80
 8000e28:	045b      	lsls	r3, r3, #17
 8000e2a:	e001      	b.n	8000e30 <HAL_ADC_ConfigChannel+0x144>
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	041b      	lsls	r3, r3, #16
 8000e30:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef0 <HAL_ADC_ConfigChannel+0x204>)
 8000e32:	430b      	orrs	r3, r1
 8000e34:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d14a      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_ADC_ConfigChannel+0x208>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	492d      	ldr	r1, [pc, #180]	@ (8000ef8 <HAL_ADC_ConfigChannel+0x20c>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff f971 	bl	800012c <__udivsi3>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	189b      	adds	r3, r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e58:	e002      	b.n	8000e60 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f9      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x16e>
 8000e66:	e035      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2101      	movs	r1, #1
 8000e74:	4099      	lsls	r1, r3
 8000e76:	000b      	movs	r3, r1
 8000e78:	43d9      	mvns	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	400a      	ands	r2, r1
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d007      	beq.n	8000e9a <HAL_ADC_ConfigChannel+0x1ae>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b11      	cmp	r3, #17
 8000e90:	d003      	beq.n	8000e9a <HAL_ADC_ConfigChannel+0x1ae>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d11c      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_ADC_ConfigChannel+0x204>)
 8000e9c:	6819      	ldr	r1, [r3, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b10      	cmp	r3, #16
 8000ea4:	d007      	beq.n	8000eb6 <HAL_ADC_ConfigChannel+0x1ca>
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b11      	cmp	r3, #17
 8000eac:	d101      	bne.n	8000eb2 <HAL_ADC_ConfigChannel+0x1c6>
 8000eae:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <HAL_ADC_ConfigChannel+0x210>)
 8000eb0:	e002      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x1cc>
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_ADC_ConfigChannel+0x214>)
 8000eb4:	e000      	b.n	8000eb8 <HAL_ADC_ConfigChannel+0x1cc>
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <HAL_ADC_ConfigChannel+0x218>)
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <HAL_ADC_ConfigChannel+0x204>)
 8000eba:	400b      	ands	r3, r1
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e009      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2234      	movs	r2, #52	@ 0x34
 8000ed8:	2100      	movs	r1, #0
 8000eda:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	00001001 	.word	0x00001001
 8000ef0:	40012708 	.word	0x40012708
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	000f4240 	.word	0x000f4240
 8000efc:	ffbfffff 	.word	0xffbfffff
 8000f00:	feffffff 	.word	0xfeffffff
 8000f04:	ff7fffff 	.word	0xff7fffff

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f1c:	d828      	bhi.n	8000f70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <__NVIC_SetPriority+0xd4>)
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	33c0      	adds	r3, #192	@ 0xc0
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	589b      	ldr	r3, [r3, r2]
 8000f2e:	1dfa      	adds	r2, r7, #7
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	0011      	movs	r1, r2
 8000f34:	2203      	movs	r2, #3
 8000f36:	400a      	ands	r2, r1
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	21ff      	movs	r1, #255	@ 0xff
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	000a      	movs	r2, r1
 8000f40:	43d2      	mvns	r2, r2
 8000f42:	401a      	ands	r2, r3
 8000f44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	019b      	lsls	r3, r3, #6
 8000f4a:	22ff      	movs	r2, #255	@ 0xff
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	0018      	movs	r0, r3
 8000f54:	2303      	movs	r3, #3
 8000f56:	4003      	ands	r3, r0
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5c:	481f      	ldr	r0, [pc, #124]	@ (8000fdc <__NVIC_SetPriority+0xd4>)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	430a      	orrs	r2, r1
 8000f68:	33c0      	adds	r3, #192	@ 0xc0
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6e:	e031      	b.n	8000fd4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f70:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe0 <__NVIC_SetPriority+0xd8>)
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	0019      	movs	r1, r3
 8000f78:	230f      	movs	r3, #15
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	3b08      	subs	r3, #8
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3306      	adds	r3, #6
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1dfa      	adds	r2, r7, #7
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	0011      	movs	r1, r2
 8000f90:	2203      	movs	r2, #3
 8000f92:	400a      	ands	r2, r1
 8000f94:	00d2      	lsls	r2, r2, #3
 8000f96:	21ff      	movs	r1, #255	@ 0xff
 8000f98:	4091      	lsls	r1, r2
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	43d2      	mvns	r2, r2
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	019b      	lsls	r3, r3, #6
 8000fa6:	22ff      	movs	r2, #255	@ 0xff
 8000fa8:	401a      	ands	r2, r3
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	4003      	ands	r3, r0
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	001c      	movs	r4, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	4023      	ands	r3, r4
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	3306      	adds	r3, #6
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	18c3      	adds	r3, r0, r3
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b003      	add	sp, #12
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	045b      	lsls	r3, r3, #17
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d301      	bcc.n	8000ffc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e010      	b.n	800101e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <SysTick_Config+0x44>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	3a01      	subs	r2, #1
 8001002:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001004:	2301      	movs	r3, #1
 8001006:	425b      	negs	r3, r3
 8001008:	2103      	movs	r1, #3
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff ff7c 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <SysTick_Config+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <SysTick_Config+0x44>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	210f      	movs	r1, #15
 8001038:	187b      	adds	r3, r7, r1
 800103a:	1c02      	adds	r2, r0, #0
 800103c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	187b      	adds	r3, r7, r1
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ffbf 	bl	8000fe4 <SysTick_Config>
 8001066:	0003      	movs	r3, r0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e056      	b.n	8001130 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7f5b      	ldrb	r3, [r3, #29]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d106      	bne.n	800109a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff fb3b 	bl	8000710 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2202      	movs	r2, #2
 800109e:	775a      	strb	r2, [r3, #29]

#if defined(CRC_POL_POL)
  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	791b      	ldrb	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10c      	bne.n	80010c2 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_CRC_Init+0xc8>)
 80010ae:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2118      	movs	r1, #24
 80010bc:	438a      	bics	r2, r1
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e00b      	b.n	80010da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6899      	ldr	r1, [r3, #8]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	0018      	movs	r0, r3
 80010ce:	f000 f835 	bl	800113c <HAL_CRCEx_Polynomial_Set>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e02a      	b.n	8001130 <HAL_CRC_Init+0xc0>
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	795b      	ldrb	r3, [r3, #5]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4252      	negs	r2, r2
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	e004      	b.n	80010f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	6912      	ldr	r2, [r2, #16]
 80010f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2260      	movs	r2, #96	@ 0x60
 8001100:	4393      	bics	r3, r2
 8001102:	0019      	movs	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2280      	movs	r2, #128	@ 0x80
 8001118:	4393      	bics	r3, r2
 800111a:	0019      	movs	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}
 8001138:	04c11db7 	.word	0x04c11db7

0800113c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001148:	2117      	movs	r1, #23
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001150:	231f      	movs	r3, #31
 8001152:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	d103      	bne.n	8001164 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e045      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	613a      	str	r2, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d008      	beq.n	8001182 <HAL_CRCEx_Polynomial_Set+0x46>
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	221f      	movs	r2, #31
 8001174:	4013      	ands	r3, r2
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	40da      	lsrs	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	2201      	movs	r2, #1
 800117e:	4013      	ands	r3, r2
 8001180:	d0f1      	beq.n	8001166 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b18      	cmp	r3, #24
 8001186:	d00f      	beq.n	80011a8 <HAL_CRCEx_Polynomial_Set+0x6c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b18      	cmp	r3, #24
 800118c:	d824      	bhi.n	80011d8 <HAL_CRCEx_Polynomial_Set+0x9c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b10      	cmp	r3, #16
 8001192:	d011      	beq.n	80011b8 <HAL_CRCEx_Polynomial_Set+0x7c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b10      	cmp	r3, #16
 8001198:	d81e      	bhi.n	80011d8 <HAL_CRCEx_Polynomial_Set+0x9c>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_CRCEx_Polynomial_Set+0xa6>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d010      	beq.n	80011c8 <HAL_CRCEx_Polynomial_Set+0x8c>
 80011a6:	e017      	b.n	80011d8 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d91b      	bls.n	80011e6 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 80011ae:	2317      	movs	r3, #23
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80011b6:	e016      	b.n	80011e6 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	d915      	bls.n	80011ea <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 80011be:	2317      	movs	r3, #23
 80011c0:	18fb      	adds	r3, r7, r3
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80011c6:	e010      	b.n	80011ea <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	d90f      	bls.n	80011ee <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80011ce:	2317      	movs	r3, #23
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80011d6:	e00a      	b.n	80011ee <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80011d8:	2317      	movs	r3, #23
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
        break;
 80011e0:	e006      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	e004      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	e002      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	e000      	b.n	80011f0 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80011ee:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 80011f0:	2317      	movs	r3, #23
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10e      	bne.n	8001218 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2218      	movs	r2, #24
 800120a:	4393      	bics	r3, r2
 800120c:	0019      	movs	r1, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	430a      	orrs	r2, r1
 8001216:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001218:	2317      	movs	r3, #23
 800121a:	18fb      	adds	r3, r7, r3
 800121c:	781b      	ldrb	r3, [r3, #0]
}
 800121e:	0018      	movs	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	b006      	add	sp, #24
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e155      	b.n	80014e4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4091      	lsls	r1, r2
 8001242:	000a      	movs	r2, r1
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d100      	bne.n	8001250 <HAL_GPIO_Init+0x28>
 800124e:	e146      	b.n	80014de <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	4013      	ands	r3, r2
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001264:	2b02      	cmp	r3, #2
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	409a      	lsls	r2, r3
 8001276:	0013      	movs	r3, r2
 8001278:	43da      	mvns	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	2201      	movs	r2, #1
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d017      	beq.n	8001306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	4013      	ands	r3, r2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	58d3      	ldr	r3, [r2, r3]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2207      	movs	r2, #7
 8001324:	4013      	ands	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	43da      	mvns	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2107      	movs	r1, #7
 800133e:	400b      	ands	r3, r1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	43da      	mvns	r2, r3
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2203      	movs	r2, #3
 8001378:	401a      	ands	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	23c0      	movs	r3, #192	@ 0xc0
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d100      	bne.n	800139c <HAL_GPIO_Init+0x174>
 800139a:	e0a0      	b.n	80014de <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	4b57      	ldr	r3, [pc, #348]	@ (80014fc <HAL_GPIO_Init+0x2d4>)
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	4b56      	ldr	r3, [pc, #344]	@ (80014fc <HAL_GPIO_Init+0x2d4>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	619a      	str	r2, [r3, #24]
 80013a8:	4b54      	ldr	r3, [pc, #336]	@ (80014fc <HAL_GPIO_Init+0x2d4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013b4:	4a52      	ldr	r2, [pc, #328]	@ (8001500 <HAL_GPIO_Init+0x2d8>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	589b      	ldr	r3, [r3, r2]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2203      	movs	r2, #3
 80013c6:	4013      	ands	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	43da      	mvns	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	2390      	movs	r3, #144	@ 0x90
 80013dc:	05db      	lsls	r3, r3, #23
 80013de:	429a      	cmp	r2, r3
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x1ee>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a47      	ldr	r2, [pc, #284]	@ (8001504 <HAL_GPIO_Init+0x2dc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x1ea>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a46      	ldr	r2, [pc, #280]	@ (8001508 <HAL_GPIO_Init+0x2e0>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x1e6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	@ (800150c <HAL_GPIO_Init+0x2e4>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x1e2>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a44      	ldr	r2, [pc, #272]	@ (8001510 <HAL_GPIO_Init+0x2e8>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x1de>
 8001402:	2304      	movs	r3, #4
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x1f0>
 8001406:	2305      	movs	r3, #5
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x1f0>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x1f0>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x1f0>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x1f0>
 8001416:	2300      	movs	r3, #0
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	2103      	movs	r1, #3
 800141c:	400a      	ands	r2, r1
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001428:	4935      	ldr	r1, [pc, #212]	@ (8001500 <HAL_GPIO_Init+0x2d8>)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	035b      	lsls	r3, r3, #13
 800144e:	4013      	ands	r3, r2
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800145a:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001460:	4b2c      	ldr	r3, [pc, #176]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	43da      	mvns	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	039b      	lsls	r3, r3, #14
 8001478:	4013      	ands	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800148a:	4b22      	ldr	r3, [pc, #136]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	029b      	lsls	r3, r3, #10
 80014a2:	4013      	ands	r3, r2
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	4013      	ands	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_GPIO_Init+0x2ec>)
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3301      	adds	r3, #1
 80014e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	40da      	lsrs	r2, r3
 80014ec:	1e13      	subs	r3, r2, #0
 80014ee:	d000      	beq.n	80014f2 <HAL_GPIO_Init+0x2ca>
 80014f0:	e6a2      	b.n	8001238 <HAL_GPIO_Init+0x10>
  } 
}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b006      	add	sp, #24
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	48000400 	.word	0x48000400
 8001508:	48000800 	.word	0x48000800
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48001000 	.word	0x48001000
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	0008      	movs	r0, r1
 8001522:	0011      	movs	r1, r2
 8001524:	1cbb      	adds	r3, r7, #2
 8001526:	1c02      	adds	r2, r0, #0
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	1c7b      	adds	r3, r7, #1
 800152c:	1c0a      	adds	r2, r1, #0
 800152e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	1c7b      	adds	r3, r7, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001538:	1cbb      	adds	r3, r7, #2
 800153a:	881a      	ldrh	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	f000 fb76 	bl	8001c54 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x20>
 8001572:	e08e      	b.n	8001692 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001574:	4bc5      	ldr	r3, [pc, #788]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	220c      	movs	r2, #12
 800157a:	4013      	ands	r3, r2
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00e      	beq.n	800159e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001580:	4bc2      	ldr	r3, [pc, #776]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	220c      	movs	r2, #12
 8001586:	4013      	ands	r3, r2
 8001588:	2b08      	cmp	r3, #8
 800158a:	d117      	bne.n	80015bc <HAL_RCC_OscConfig+0x68>
 800158c:	4bbf      	ldr	r3, [pc, #764]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	23c0      	movs	r3, #192	@ 0xc0
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	401a      	ands	r2, r3
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	429a      	cmp	r2, r3
 800159c:	d10e      	bne.n	80015bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	4bbb      	ldr	r3, [pc, #748]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	@ 0x80
 80015a4:	029b      	lsls	r3, r3, #10
 80015a6:	4013      	ands	r3, r2
 80015a8:	d100      	bne.n	80015ac <HAL_RCC_OscConfig+0x58>
 80015aa:	e071      	b.n	8001690 <HAL_RCC_OscConfig+0x13c>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d000      	beq.n	80015b6 <HAL_RCC_OscConfig+0x62>
 80015b4:	e06c      	b.n	8001690 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 fb4c 	bl	8001c54 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x80>
 80015c4:	4bb1      	ldr	r3, [pc, #708]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4bb0      	ldr	r3, [pc, #704]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	0249      	lsls	r1, r1, #9
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e02f      	b.n	8001634 <HAL_RCC_OscConfig+0xe0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0xa2>
 80015dc:	4bab      	ldr	r3, [pc, #684]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4baa      	ldr	r3, [pc, #680]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015e2:	49ab      	ldr	r1, [pc, #684]	@ (8001890 <HAL_RCC_OscConfig+0x33c>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	4ba8      	ldr	r3, [pc, #672]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4ba7      	ldr	r3, [pc, #668]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80015ee:	49a9      	ldr	r1, [pc, #676]	@ (8001894 <HAL_RCC_OscConfig+0x340>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e01e      	b.n	8001634 <HAL_RCC_OscConfig+0xe0>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d10e      	bne.n	800161c <HAL_RCC_OscConfig+0xc8>
 80015fe:	4ba3      	ldr	r3, [pc, #652]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4ba2      	ldr	r3, [pc, #648]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001604:	2180      	movs	r1, #128	@ 0x80
 8001606:	02c9      	lsls	r1, r1, #11
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	4b9f      	ldr	r3, [pc, #636]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b9e      	ldr	r3, [pc, #632]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001612:	2180      	movs	r1, #128	@ 0x80
 8001614:	0249      	lsls	r1, r1, #9
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xe0>
 800161c:	4b9b      	ldr	r3, [pc, #620]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b9a      	ldr	r3, [pc, #616]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001622:	499b      	ldr	r1, [pc, #620]	@ (8001890 <HAL_RCC_OscConfig+0x33c>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4b98      	ldr	r3, [pc, #608]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b97      	ldr	r3, [pc, #604]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800162e:	4999      	ldr	r1, [pc, #612]	@ (8001894 <HAL_RCC_OscConfig+0x340>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d014      	beq.n	8001666 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f9e8 	bl	8000a10 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001646:	f7ff f9e3 	bl	8000a10 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	@ 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e2fd      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	4b8c      	ldr	r3, [pc, #560]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0xf2>
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff f9d3 	bl	8000a10 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff f9ce 	bl	8000a10 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e2e8      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b82      	ldr	r3, [pc, #520]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	029b      	lsls	r3, r3, #10
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x11c>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d100      	bne.n	800169e <HAL_RCC_OscConfig+0x14a>
 800169c:	e06c      	b.n	8001778 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800169e:	4b7b      	ldr	r3, [pc, #492]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	220c      	movs	r2, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	d00e      	beq.n	80016c6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016a8:	4b78      	ldr	r3, [pc, #480]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	220c      	movs	r2, #12
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d11f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1a0>
 80016b4:	4b75      	ldr	r3, [pc, #468]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	23c0      	movs	r3, #192	@ 0xc0
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	401a      	ands	r2, r3
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d116      	bne.n	80016f4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c6:	4b71      	ldr	r3, [pc, #452]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2202      	movs	r2, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_OscConfig+0x188>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e2bb      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b6b      	ldr	r3, [pc, #428]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	22f8      	movs	r2, #248	@ 0xf8
 80016e2:	4393      	bics	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00da      	lsls	r2, r3, #3
 80016ec:	4b67      	ldr	r3, [pc, #412]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e041      	b.n	8001778 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d024      	beq.n	8001746 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fc:	4b63      	ldr	r3, [pc, #396]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b62      	ldr	r3, [pc, #392]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff f982 	bl	8000a10 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff f97d 	bl	8000a10 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e297      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b59      	ldr	r3, [pc, #356]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2202      	movs	r2, #2
 800172a:	4013      	ands	r3, r2
 800172c:	d0f1      	beq.n	8001712 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b57      	ldr	r3, [pc, #348]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	22f8      	movs	r2, #248	@ 0xf8
 8001734:	4393      	bics	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	00da      	lsls	r2, r3, #3
 800173e:	4b53      	ldr	r3, [pc, #332]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e018      	b.n	8001778 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b51      	ldr	r3, [pc, #324]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b50      	ldr	r3, [pc, #320]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800174c:	2101      	movs	r1, #1
 800174e:	438a      	bics	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff f95d 	bl	8000a10 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff f958 	bl	8000a10 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e272      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d1f1      	bne.n	800175c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2208      	movs	r2, #8
 800177e:	4013      	ands	r3, r2
 8001780:	d036      	beq.n	80017f0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d019      	beq.n	80017be <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4b40      	ldr	r3, [pc, #256]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800178c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800178e:	4b3f      	ldr	r3, [pc, #252]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001790:	2101      	movs	r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff f93b 	bl	8000a10 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff f936 	bl	8000a10 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e250      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	4b36      	ldr	r3, [pc, #216]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d0f1      	beq.n	80017a0 <HAL_RCC_OscConfig+0x24c>
 80017bc:	e018      	b.n	80017f0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b33      	ldr	r3, [pc, #204]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80017c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017c2:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	438a      	bics	r2, r1
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f921 	bl	8000a10 <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff f91c 	bl	8000a10 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e236      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d1f1      	bne.n	80017d4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2204      	movs	r2, #4
 80017f6:	4013      	ands	r3, r2
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x2a8>
 80017fa:	e0b5      	b.n	8001968 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fc:	201f      	movs	r0, #31
 80017fe:	183b      	adds	r3, r7, r0
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001806:	69da      	ldr	r2, [r3, #28]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	d110      	bne.n	8001832 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001812:	69da      	ldr	r2, [r3, #28]
 8001814:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	0549      	lsls	r1, r1, #21
 800181a:	430a      	orrs	r2, r1
 800181c:	61da      	str	r2, [r3, #28]
 800181e:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	055b      	lsls	r3, r3, #21
 8001826:	4013      	ands	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800182c:	183b      	adds	r3, r7, r0
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_RCC_OscConfig+0x344>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4013      	ands	r3, r2
 800183c:	d11a      	bne.n	8001874 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_RCC_OscConfig+0x344>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_RCC_OscConfig+0x344>)
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184c:	f7ff f8e0 	bl	8000a10 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001856:	f7ff f8db 	bl	8000a10 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	@ 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1f5      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_OscConfig+0x344>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10f      	bne.n	800189c <HAL_RCC_OscConfig+0x348>
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	4b02      	ldr	r3, [pc, #8]	@ (800188c <HAL_RCC_OscConfig+0x338>)
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	e036      	b.n	80018f8 <HAL_RCC_OscConfig+0x3a4>
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	40021000 	.word	0x40021000
 8001890:	fffeffff 	.word	0xfffeffff
 8001894:	fffbffff 	.word	0xfffbffff
 8001898:	40007000 	.word	0x40007000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x36a>
 80018a4:	4bca      	ldr	r3, [pc, #808]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	4bc9      	ldr	r3, [pc, #804]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	438a      	bics	r2, r1
 80018ae:	621a      	str	r2, [r3, #32]
 80018b0:	4bc7      	ldr	r3, [pc, #796]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4bc6      	ldr	r3, [pc, #792]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	2104      	movs	r1, #4
 80018b8:	438a      	bics	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x3a4>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x38c>
 80018c6:	4bc2      	ldr	r3, [pc, #776]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	4bc1      	ldr	r3, [pc, #772]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018cc:	2104      	movs	r1, #4
 80018ce:	430a      	orrs	r2, r1
 80018d0:	621a      	str	r2, [r3, #32]
 80018d2:	4bbf      	ldr	r3, [pc, #764]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	4bbe      	ldr	r3, [pc, #760]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018d8:	2101      	movs	r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	621a      	str	r2, [r3, #32]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x3a4>
 80018e0:	4bbb      	ldr	r3, [pc, #748]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	4bba      	ldr	r3, [pc, #744]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	438a      	bics	r2, r1
 80018ea:	621a      	str	r2, [r3, #32]
 80018ec:	4bb8      	ldr	r3, [pc, #736]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4bb7      	ldr	r3, [pc, #732]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	2104      	movs	r1, #4
 80018f4:	438a      	bics	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d014      	beq.n	800192a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff f886 	bl	8000a10 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	e009      	b.n	800191e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f881 	bl	8000a10 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4aaf      	ldr	r2, [pc, #700]	@ (8001bd4 <HAL_RCC_OscConfig+0x680>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e19a      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4bac      	ldr	r3, [pc, #688]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x3b6>
 8001928:	e013      	b.n	8001952 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff f871 	bl	8000a10 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e009      	b.n	8001948 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff f86c 	bl	8000a10 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	4aa5      	ldr	r2, [pc, #660]	@ (8001bd4 <HAL_RCC_OscConfig+0x680>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e185      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	4ba1      	ldr	r3, [pc, #644]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001952:	231f      	movs	r3, #31
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b9c      	ldr	r3, [pc, #624]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	4b9b      	ldr	r3, [pc, #620]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001962:	499d      	ldr	r1, [pc, #628]	@ (8001bd8 <HAL_RCC_OscConfig+0x684>)
 8001964:	400a      	ands	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2210      	movs	r2, #16
 800196e:	4013      	ands	r3, r2
 8001970:	d063      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d12a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800197a:	4b95      	ldr	r3, [pc, #596]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800197e:	4b94      	ldr	r3, [pc, #592]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001980:	2104      	movs	r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001986:	4b92      	ldr	r3, [pc, #584]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800198a:	4b91      	ldr	r3, [pc, #580]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff f83d 	bl	8000a10 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800199c:	f7ff f838 	bl	8000a10 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e152      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ae:	4b88      	ldr	r3, [pc, #544]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0f1      	beq.n	800199c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019b8:	4b85      	ldr	r3, [pc, #532]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019bc:	22f8      	movs	r2, #248	@ 0xf8
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	00da      	lsls	r2, r3, #3
 80019c8:	4b81      	ldr	r3, [pc, #516]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	430a      	orrs	r2, r1
 80019cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80019ce:	e034      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	3305      	adds	r3, #5
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019d8:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019dc:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019de:	2104      	movs	r1, #4
 80019e0:	438a      	bics	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019e4:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e8:	22f8      	movs	r2, #248	@ 0xf8
 80019ea:	4393      	bics	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	00da      	lsls	r2, r3, #3
 80019f4:	4b76      	ldr	r3, [pc, #472]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019f6:	430a      	orrs	r2, r1
 80019f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80019fa:	e01e      	b.n	8001a3a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019fc:	4b74      	ldr	r3, [pc, #464]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a00:	4b73      	ldr	r3, [pc, #460]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a02:	2104      	movs	r1, #4
 8001a04:	430a      	orrs	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a08:	4b71      	ldr	r3, [pc, #452]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a0c:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	438a      	bics	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7fe fffc 	bl	8000a10 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a1e:	f7fe fff7 	bl	8000a10 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e111      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a30:	4b67      	ldr	r3, [pc, #412]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d1f1      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	4013      	ands	r3, r2
 8001a42:	d05c      	beq.n	8001afe <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a44:	4b62      	ldr	r3, [pc, #392]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d00e      	beq.n	8001a6e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a50:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	220c      	movs	r2, #12
 8001a56:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d114      	bne.n	8001a86 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	23c0      	movs	r3, #192	@ 0xc0
 8001a62:	025b      	lsls	r3, r3, #9
 8001a64:	401a      	ands	r2, r3
 8001a66:	23c0      	movs	r3, #192	@ 0xc0
 8001a68:	025b      	lsls	r3, r3, #9
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d10b      	bne.n	8001a86 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a6e:	4b58      	ldr	r3, [pc, #352]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	029b      	lsls	r3, r3, #10
 8001a76:	4013      	ands	r3, r2
 8001a78:	d040      	beq.n	8001afc <HAL_RCC_OscConfig+0x5a8>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d03c      	beq.n	8001afc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0e6      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d01b      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a8e:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a92:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001a94:	2180      	movs	r1, #128	@ 0x80
 8001a96:	0249      	lsls	r1, r1, #9
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7fe ffb8 	bl	8000a10 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa6:	f7fe ffb3 	bl	8000a10 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0cd      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ab8:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001aba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x552>
 8001ac4:	e01b      	b.n	8001afe <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ac6:	4b42      	ldr	r3, [pc, #264]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aca:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001acc:	4943      	ldr	r1, [pc, #268]	@ (8001bdc <HAL_RCC_OscConfig+0x688>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe ff9d 	bl	8000a10 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001adc:	f7fe ff98 	bl	8000a10 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0b2      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aee:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	4013      	ands	r3, r2
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x588>
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001afc:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d100      	bne.n	8001b08 <HAL_RCC_OscConfig+0x5b4>
 8001b06:	e0a4      	b.n	8001c52 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	220c      	movs	r2, #12
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d100      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5c2>
 8001b14:	e078      	b.n	8001c08 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d14c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b24:	492e      	ldr	r1, [pc, #184]	@ (8001be0 <HAL_RCC_OscConfig+0x68c>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ff71 	bl	8000a10 <HAL_GetTick>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b34:	f7fe ff6c 	bl	8000a10 <HAL_GetTick>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e086      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	049b      	lsls	r3, r3, #18
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b52:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	220f      	movs	r2, #15
 8001b58:	4393      	bics	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b66:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001be4 <HAL_RCC_OscConfig+0x690>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0449      	lsls	r1, r1, #17
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe ff3f 	bl	8000a10 <HAL_GetTick>
 8001b92:	0003      	movs	r3, r0
 8001b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe ff3a 	bl	8000a10 <HAL_GetTick>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e054      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	049b      	lsls	r3, r3, #18
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x644>
 8001bb6:	e04c      	b.n	8001c52 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	4908      	ldr	r1, [pc, #32]	@ (8001be0 <HAL_RCC_OscConfig+0x68c>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe ff24 	bl	8000a10 <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x6a6>
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	00001388 	.word	0x00001388
 8001bd8:	efffffff 	.word	0xefffffff
 8001bdc:	fffeffff 	.word	0xfffeffff
 8001be0:	feffffff 	.word	0xfeffffff
 8001be4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7fe ff12 	bl	8000a10 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e02c      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_RCC_OscConfig+0x708>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	049b      	lsls	r3, r3, #18
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x694>
 8001c06:	e024      	b.n	8001c52 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e01f      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_RCC_OscConfig+0x708>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_RCC_OscConfig+0x708>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	23c0      	movs	r3, #192	@ 0xc0
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	401a      	ands	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d10e      	bne.n	8001c4e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	220f      	movs	r2, #15
 8001c34:	401a      	ands	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	23f0      	movs	r3, #240	@ 0xf0
 8001c42:	039b      	lsls	r3, r3, #14
 8001c44:	401a      	ands	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b008      	add	sp, #32
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0bf      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b61      	ldr	r3, [pc, #388]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d911      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b5e      	ldr	r3, [pc, #376]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4393      	bics	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c94:	4b59      	ldr	r3, [pc, #356]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0a6      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d015      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d006      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cba:	4b51      	ldr	r3, [pc, #324]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001cc0:	21e0      	movs	r1, #224	@ 0xe0
 8001cc2:	00c9      	lsls	r1, r1, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	22f0      	movs	r2, #240	@ 0xf0
 8001cce:	4393      	bics	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d04c      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b44      	ldr	r3, [pc, #272]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d120      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07a      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3e      	ldr	r3, [pc, #248]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	049b      	lsls	r3, r3, #18
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d114      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06e      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d1e:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	029b      	lsls	r3, r3, #10
 8001d26:	4013      	ands	r3, r2
 8001d28:	d108      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e062      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2202      	movs	r2, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e05b      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3c:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7fe fe5e 	bl	8000a10 <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5a:	f7fe fe59 	bl	8000a10 <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a27      	ldr	r2, [pc, #156]	@ (8001e04 <HAL_RCC_ClockConfig+0x1a4>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e042      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	220c      	movs	r2, #12
 8001d74:	401a      	ands	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1ec      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d211      	bcs.n	8001db2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2201      	movs	r2, #1
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_RCC_ClockConfig+0x19c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e020      	b.n	8001df4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	d009      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dbc:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_RCC_ClockConfig+0x1a8>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dd0:	f000 f820 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd4:	0001      	movs	r1, r0
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	220f      	movs	r2, #15
 8001dde:	4013      	ands	r3, r2
 8001de0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <HAL_RCC_ClockConfig+0x1ac>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	000a      	movs	r2, r1
 8001de6:	40da      	lsrs	r2, r3
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b0>)
 8001dea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7fe fdc9 	bl	8000984 <HAL_InitTick>
  
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b004      	add	sp, #16
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	00001388 	.word	0x00001388
 8001e08:	fffff8ff 	.word	0xfffff8ff
 8001e0c:	080033f4 	.word	0x080033f4
 8001e10:	20000000 	.word	0x20000000

08001e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	220c      	movs	r2, #12
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d046      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb8>
 8001e3e:	d848      	bhi.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d002      	beq.n	8001e4a <HAL_RCC_GetSysClockFreq+0x36>
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d003      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x3c>
 8001e48:	e043      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e4c:	613b      	str	r3, [r7, #16]
      break;
 8001e4e:	e043      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	0c9b      	lsrs	r3, r3, #18
 8001e54:	220f      	movs	r2, #15
 8001e56:	4013      	ands	r3, r2
 8001e58:	4a24      	ldr	r2, [pc, #144]	@ (8001eec <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	220f      	movs	r2, #15
 8001e64:	4013      	ands	r3, r2
 8001e66:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	23c0      	movs	r3, #192	@ 0xc0
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	401a      	ands	r2, r3
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	025b      	lsls	r3, r3, #9
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	481a      	ldr	r0, [pc, #104]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e80:	f7fe f954 	bl	800012c <__udivsi3>
 8001e84:	0003      	movs	r3, r0
 8001e86:	001a      	movs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4353      	muls	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	e01a      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	23c0      	movs	r3, #192	@ 0xc0
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	401a      	ands	r2, r3
 8001e98:	23c0      	movs	r3, #192	@ 0xc0
 8001e9a:	025b      	lsls	r3, r3, #9
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d109      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	4814      	ldr	r0, [pc, #80]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ea4:	f7fe f942 	bl	800012c <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	001a      	movs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4353      	muls	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001eb8:	f7fe f938 	bl	800012c <__udivsi3>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4353      	muls	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	613b      	str	r3, [r7, #16]
      break;
 8001eca:	e005      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001ece:	613b      	str	r3, [r7, #16]
      break;
 8001ed0:	e002      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ed4:	613b      	str	r3, [r7, #16]
      break;
 8001ed6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b006      	add	sp, #24
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	007a1200 	.word	0x007a1200
 8001eec:	0800340c 	.word	0x0800340c
 8001ef0:	0800341c 	.word	0x0800341c
 8001ef4:	02dc6c00 	.word	0x02dc6c00

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b02      	ldr	r3, [pc, #8]	@ (8001f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			@ (mov r8, r8)
 8001f08:	20000000 	.word	0x20000000

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f10:	f7ff fff2 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f14:	0001      	movs	r1, r0
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	4013      	ands	r3, r2
 8001f20:	4a04      	ldr	r2, [pc, #16]	@ (8001f34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	40d9      	lsrs	r1, r3
 8001f26:	000b      	movs	r3, r1
}    
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003404 	.word	0x08003404

08001f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	4013      	ands	r3, r2
 8001f52:	d100      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f54:	e08e      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2017      	movs	r0, #23
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	055b      	lsls	r3, r3, #21
 8001f66:	4013      	ands	r3, r2
 8001f68:	d110      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b6b      	ldr	r3, [pc, #428]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	0549      	lsls	r1, r1, #21
 8001f74:	430a      	orrs	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
 8001f78:	4b67      	ldr	r3, [pc, #412]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	055b      	lsls	r3, r3, #21
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	183b      	adds	r3, r7, r0
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b63      	ldr	r3, [pc, #396]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d11a      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f98:	4b60      	ldr	r3, [pc, #384]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f9e:	2180      	movs	r1, #128	@ 0x80
 8001fa0:	0049      	lsls	r1, r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe fd33 	bl	8000a10 <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	e008      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fd2e 	bl	8000a10 <HAL_GetTick>
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	@ 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0a6      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b56      	ldr	r3, [pc, #344]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fce:	4b52      	ldr	r3, [pc, #328]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001fd0:	6a1a      	ldr	r2, [r3, #32]
 8001fd2:	23c0      	movs	r3, #192	@ 0xc0
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d034      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	23c0      	movs	r3, #192	@ 0xc0
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d02c      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ff0:	4b49      	ldr	r3, [pc, #292]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ffa:	4b47      	ldr	r3, [pc, #284]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002000:	2180      	movs	r1, #128	@ 0x80
 8002002:	0249      	lsls	r1, r1, #9
 8002004:	430a      	orrs	r2, r1
 8002006:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002008:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800200a:	6a1a      	ldr	r2, [r3, #32]
 800200c:	4b42      	ldr	r3, [pc, #264]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800200e:	4945      	ldr	r1, [pc, #276]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002010:	400a      	ands	r2, r1
 8002012:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002014:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	4013      	ands	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe fcf5 	bl	8000a10 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	e009      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe fcf0 	bl	8000a10 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	4a3c      	ldr	r2, [pc, #240]	@ (8002128 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e067      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	2202      	movs	r2, #2
 8002046:	4013      	ands	r3, r2
 8002048:	d0f0      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204a:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a34      	ldr	r2, [pc, #208]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002050:	4013      	ands	r3, r2
 8002052:	0019      	movs	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800205a:	430a      	orrs	r2, r1
 800205c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205e:	2317      	movs	r3, #23
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800206a:	69da      	ldr	r2, [r3, #28]
 800206c:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800206e:	492f      	ldr	r1, [pc, #188]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002070:	400a      	ands	r2, r1
 8002072:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	2203      	movs	r2, #3
 8002084:	4393      	bics	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800208e:	430a      	orrs	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800209c:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	0019      	movs	r1, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ba:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	2210      	movs	r2, #16
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	2380      	movs	r3, #128	@ 0x80
 80020d4:	029b      	lsls	r3, r3, #10
 80020d6:	4013      	ands	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	2280      	movs	r2, #128	@ 0x80
 80020e0:	4393      	bics	r3, r2
 80020e2:	0019      	movs	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4013      	ands	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800210a:	430a      	orrs	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b006      	add	sp, #24
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	fffffcff 	.word	0xfffffcff
 8002124:	fffeffff 	.word	0xfffeffff
 8002128:	00001388 	.word	0x00001388
 800212c:	efffffff 	.word	0xefffffff
 8002130:	fffcffff 	.word	0xfffcffff

08002134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e044      	b.n	80021d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2278      	movs	r2, #120	@ 0x78
 8002152:	2100      	movs	r1, #0
 8002154:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f7fe faf7 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2224      	movs	r2, #36	@ 0x24
 8002162:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2101      	movs	r1, #1
 8002170:	438a      	bics	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	0018      	movs	r0, r3
 8002180:	f000 fa54 	bl	800262c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	0018      	movs	r0, r3
 8002188:	f000 f8c8 	bl	800231c <UART_SetConfig>
 800218c:	0003      	movs	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e01c      	b.n	80021d0 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <HAL_UART_Init+0xa4>)
 80021a2:	400a      	ands	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	212a      	movs	r1, #42	@ 0x2a
 80021b2:	438a      	bics	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fae3 	bl	8002794 <UART_CheckIdleState>
 80021ce:	0003      	movs	r3, r0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	ffffb7ff 	.word	0xffffb7ff

080021dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d000      	beq.n	80021f6 <HAL_UART_Transmit+0x1a>
 80021f4:	e08c      	b.n	8002310 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_UART_Transmit+0x28>
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e084      	b.n	8002312 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	015b      	lsls	r3, r3, #5
 8002210:	429a      	cmp	r2, r3
 8002212:	d109      	bne.n	8002228 <HAL_UART_Transmit+0x4c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2201      	movs	r2, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d001      	beq.n	8002228 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e074      	b.n	8002312 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2284      	movs	r2, #132	@ 0x84
 800222c:	2100      	movs	r1, #0
 800222e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2221      	movs	r2, #33	@ 0x21
 8002234:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002236:	f7fe fbeb 	bl	8000a10 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1dba      	adds	r2, r7, #6
 8002242:	2150      	movs	r1, #80	@ 0x50
 8002244:	8812      	ldrh	r2, [r2, #0]
 8002246:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1dba      	adds	r2, r7, #6
 800224c:	2152      	movs	r1, #82	@ 0x52
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	015b      	lsls	r3, r3, #5
 800225a:	429a      	cmp	r2, r3
 800225c:	d108      	bne.n	8002270 <HAL_UART_Transmit+0x94>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d104      	bne.n	8002270 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e003      	b.n	8002278 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002278:	e02f      	b.n	80022da <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	0013      	movs	r3, r2
 8002284:	2200      	movs	r2, #0
 8002286:	2180      	movs	r1, #128	@ 0x80
 8002288:	f000 fb2c 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d004      	beq.n	800229a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e03b      	b.n	8002312 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	05d2      	lsls	r2, r2, #23
 80022aa:	0dd2      	lsrs	r2, r2, #23
 80022ac:	b292      	uxth	r2, r2
 80022ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3302      	adds	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	e007      	b.n	80022c8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2252      	movs	r2, #82	@ 0x52
 80022cc:	5a9b      	ldrh	r3, [r3, r2]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b299      	uxth	r1, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2252      	movs	r2, #82	@ 0x52
 80022d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2252      	movs	r2, #82	@ 0x52
 80022de:	5a9b      	ldrh	r3, [r3, r2]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1c9      	bne.n	800227a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	0013      	movs	r3, r2
 80022f0:	2200      	movs	r2, #0
 80022f2:	2140      	movs	r1, #64	@ 0x40
 80022f4:	f000 faf6 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d004      	beq.n	8002306 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e005      	b.n	8002312 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	e000      	b.n	8002312 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002310:	2302      	movs	r3, #2
  }
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b008      	add	sp, #32
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002324:	231e      	movs	r3, #30
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	4313      	orrs	r3, r2
 8002342:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4aaf      	ldr	r2, [pc, #700]	@ (8002608 <UART_SetConfig+0x2ec>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4aaa      	ldr	r2, [pc, #680]	@ (800260c <UART_SetConfig+0x2f0>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4aa1      	ldr	r2, [pc, #644]	@ (8002610 <UART_SetConfig+0x2f4>)
 800238a:	4013      	ands	r3, r2
 800238c:	0019      	movs	r1, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a9d      	ldr	r2, [pc, #628]	@ (8002614 <UART_SetConfig+0x2f8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d127      	bne.n	80023f2 <UART_SetConfig+0xd6>
 80023a2:	4b9d      	ldr	r3, [pc, #628]	@ (8002618 <UART_SetConfig+0x2fc>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	2203      	movs	r2, #3
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d00d      	beq.n	80023ca <UART_SetConfig+0xae>
 80023ae:	d81b      	bhi.n	80023e8 <UART_SetConfig+0xcc>
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d014      	beq.n	80023de <UART_SetConfig+0xc2>
 80023b4:	d818      	bhi.n	80023e8 <UART_SetConfig+0xcc>
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <UART_SetConfig+0xa4>
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d00a      	beq.n	80023d4 <UART_SetConfig+0xb8>
 80023be:	e013      	b.n	80023e8 <UART_SetConfig+0xcc>
 80023c0:	231f      	movs	r3, #31
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e065      	b.n	8002496 <UART_SetConfig+0x17a>
 80023ca:	231f      	movs	r3, #31
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2202      	movs	r2, #2
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e060      	b.n	8002496 <UART_SetConfig+0x17a>
 80023d4:	231f      	movs	r3, #31
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2204      	movs	r2, #4
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e05b      	b.n	8002496 <UART_SetConfig+0x17a>
 80023de:	231f      	movs	r3, #31
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2208      	movs	r2, #8
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e056      	b.n	8002496 <UART_SetConfig+0x17a>
 80023e8:	231f      	movs	r3, #31
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2210      	movs	r2, #16
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e051      	b.n	8002496 <UART_SetConfig+0x17a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a89      	ldr	r2, [pc, #548]	@ (800261c <UART_SetConfig+0x300>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d134      	bne.n	8002466 <UART_SetConfig+0x14a>
 80023fc:	4b86      	ldr	r3, [pc, #536]	@ (8002618 <UART_SetConfig+0x2fc>)
 80023fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002400:	23c0      	movs	r3, #192	@ 0xc0
 8002402:	029b      	lsls	r3, r3, #10
 8002404:	4013      	ands	r3, r2
 8002406:	22c0      	movs	r2, #192	@ 0xc0
 8002408:	0292      	lsls	r2, r2, #10
 800240a:	4293      	cmp	r3, r2
 800240c:	d017      	beq.n	800243e <UART_SetConfig+0x122>
 800240e:	22c0      	movs	r2, #192	@ 0xc0
 8002410:	0292      	lsls	r2, r2, #10
 8002412:	4293      	cmp	r3, r2
 8002414:	d822      	bhi.n	800245c <UART_SetConfig+0x140>
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	0292      	lsls	r2, r2, #10
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <UART_SetConfig+0x136>
 800241e:	2280      	movs	r2, #128	@ 0x80
 8002420:	0292      	lsls	r2, r2, #10
 8002422:	4293      	cmp	r3, r2
 8002424:	d81a      	bhi.n	800245c <UART_SetConfig+0x140>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <UART_SetConfig+0x118>
 800242a:	2280      	movs	r2, #128	@ 0x80
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4293      	cmp	r3, r2
 8002430:	d00a      	beq.n	8002448 <UART_SetConfig+0x12c>
 8002432:	e013      	b.n	800245c <UART_SetConfig+0x140>
 8002434:	231f      	movs	r3, #31
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e02b      	b.n	8002496 <UART_SetConfig+0x17a>
 800243e:	231f      	movs	r3, #31
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2202      	movs	r2, #2
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	e026      	b.n	8002496 <UART_SetConfig+0x17a>
 8002448:	231f      	movs	r3, #31
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2204      	movs	r2, #4
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e021      	b.n	8002496 <UART_SetConfig+0x17a>
 8002452:	231f      	movs	r3, #31
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2208      	movs	r2, #8
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	e01c      	b.n	8002496 <UART_SetConfig+0x17a>
 800245c:	231f      	movs	r3, #31
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2210      	movs	r2, #16
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e017      	b.n	8002496 <UART_SetConfig+0x17a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6d      	ldr	r2, [pc, #436]	@ (8002620 <UART_SetConfig+0x304>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d104      	bne.n	800247a <UART_SetConfig+0x15e>
 8002470:	231f      	movs	r3, #31
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	e00d      	b.n	8002496 <UART_SetConfig+0x17a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a69      	ldr	r2, [pc, #420]	@ (8002624 <UART_SetConfig+0x308>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d104      	bne.n	800248e <UART_SetConfig+0x172>
 8002484:	231f      	movs	r3, #31
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e003      	b.n	8002496 <UART_SetConfig+0x17a>
 800248e:	231f      	movs	r3, #31
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	2210      	movs	r2, #16
 8002494:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69da      	ldr	r2, [r3, #28]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	429a      	cmp	r2, r3
 80024a0:	d15c      	bne.n	800255c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80024a2:	231f      	movs	r3, #31
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d015      	beq.n	80024d8 <UART_SetConfig+0x1bc>
 80024ac:	dc18      	bgt.n	80024e0 <UART_SetConfig+0x1c4>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d00d      	beq.n	80024ce <UART_SetConfig+0x1b2>
 80024b2:	dc15      	bgt.n	80024e0 <UART_SetConfig+0x1c4>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <UART_SetConfig+0x1a2>
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d005      	beq.n	80024c8 <UART_SetConfig+0x1ac>
 80024bc:	e010      	b.n	80024e0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024be:	f7ff fd25 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 80024c2:	0003      	movs	r3, r0
 80024c4:	61bb      	str	r3, [r7, #24]
        break;
 80024c6:	e012      	b.n	80024ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024c8:	4b57      	ldr	r3, [pc, #348]	@ (8002628 <UART_SetConfig+0x30c>)
 80024ca:	61bb      	str	r3, [r7, #24]
        break;
 80024cc:	e00f      	b.n	80024ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ce:	f7ff fca1 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 80024d2:	0003      	movs	r3, r0
 80024d4:	61bb      	str	r3, [r7, #24]
        break;
 80024d6:	e00a      	b.n	80024ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	61bb      	str	r3, [r7, #24]
        break;
 80024de:	e006      	b.n	80024ee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024e4:	231e      	movs	r3, #30
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
        break;
 80024ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d100      	bne.n	80024f6 <UART_SetConfig+0x1da>
 80024f4:	e07a      	b.n	80025ec <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	005a      	lsls	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	18d2      	adds	r2, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0019      	movs	r1, r3
 8002508:	0010      	movs	r0, r2
 800250a:	f7fd fe0f 	bl	800012c <__udivsi3>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d91c      	bls.n	8002552 <UART_SetConfig+0x236>
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	2380      	movs	r3, #128	@ 0x80
 800251c:	025b      	lsls	r3, r3, #9
 800251e:	429a      	cmp	r2, r3
 8002520:	d217      	bcs.n	8002552 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	b29a      	uxth	r2, r3
 8002526:	200e      	movs	r0, #14
 8002528:	183b      	adds	r3, r7, r0
 800252a:	210f      	movs	r1, #15
 800252c:	438a      	bics	r2, r1
 800252e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	2207      	movs	r2, #7
 8002538:	4013      	ands	r3, r2
 800253a:	b299      	uxth	r1, r3
 800253c:	183b      	adds	r3, r7, r0
 800253e:	183a      	adds	r2, r7, r0
 8002540:	8812      	ldrh	r2, [r2, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	183a      	adds	r2, r7, r0
 800254c:	8812      	ldrh	r2, [r2, #0]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	e04c      	b.n	80025ec <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002552:	231e      	movs	r3, #30
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e047      	b.n	80025ec <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800255c:	231f      	movs	r3, #31
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d015      	beq.n	8002592 <UART_SetConfig+0x276>
 8002566:	dc18      	bgt.n	800259a <UART_SetConfig+0x27e>
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00d      	beq.n	8002588 <UART_SetConfig+0x26c>
 800256c:	dc15      	bgt.n	800259a <UART_SetConfig+0x27e>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <UART_SetConfig+0x25c>
 8002572:	2b02      	cmp	r3, #2
 8002574:	d005      	beq.n	8002582 <UART_SetConfig+0x266>
 8002576:	e010      	b.n	800259a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002578:	f7ff fcc8 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 800257c:	0003      	movs	r3, r0
 800257e:	61bb      	str	r3, [r7, #24]
        break;
 8002580:	e012      	b.n	80025a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002582:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <UART_SetConfig+0x30c>)
 8002584:	61bb      	str	r3, [r7, #24]
        break;
 8002586:	e00f      	b.n	80025a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002588:	f7ff fc44 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 800258c:	0003      	movs	r3, r0
 800258e:	61bb      	str	r3, [r7, #24]
        break;
 8002590:	e00a      	b.n	80025a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	61bb      	str	r3, [r7, #24]
        break;
 8002598:	e006      	b.n	80025a8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800259e:	231e      	movs	r3, #30
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
        break;
 80025a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01e      	beq.n	80025ec <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	085a      	lsrs	r2, r3, #1
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	18d2      	adds	r2, r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0019      	movs	r1, r3
 80025be:	0010      	movs	r0, r2
 80025c0:	f7fd fdb4 	bl	800012c <__udivsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	d90a      	bls.n	80025e4 <UART_SetConfig+0x2c8>
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	025b      	lsls	r3, r3, #9
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d205      	bcs.n	80025e4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	e003      	b.n	80025ec <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80025e4:	231e      	movs	r3, #30
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80025f8:	231e      	movs	r3, #30
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b008      	add	sp, #32
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			@ (mov r8, r8)
 8002608:	efff69f3 	.word	0xefff69f3
 800260c:	ffffcfff 	.word	0xffffcfff
 8002610:	fffff4ff 	.word	0xfffff4ff
 8002614:	40013800 	.word	0x40013800
 8002618:	40021000 	.word	0x40021000
 800261c:	40004400 	.word	0x40004400
 8002620:	40004800 	.word	0x40004800
 8002624:	40004c00 	.word	0x40004c00
 8002628:	007a1200 	.word	0x007a1200

0800262c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	2208      	movs	r2, #8
 800263a:	4013      	ands	r3, r2
 800263c:	d00b      	beq.n	8002656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a4a      	ldr	r2, [pc, #296]	@ (8002770 <UART_AdvFeatureConfig+0x144>)
 8002646:	4013      	ands	r3, r2
 8002648:	0019      	movs	r1, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	2201      	movs	r2, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d00b      	beq.n	8002678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a43      	ldr	r2, [pc, #268]	@ (8002774 <UART_AdvFeatureConfig+0x148>)
 8002668:	4013      	ands	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2202      	movs	r2, #2
 800267e:	4013      	ands	r3, r2
 8002680:	d00b      	beq.n	800269a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4a3b      	ldr	r2, [pc, #236]	@ (8002778 <UART_AdvFeatureConfig+0x14c>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	2204      	movs	r2, #4
 80026a0:	4013      	ands	r3, r2
 80026a2:	d00b      	beq.n	80026bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a34      	ldr	r2, [pc, #208]	@ (800277c <UART_AdvFeatureConfig+0x150>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	0019      	movs	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	2210      	movs	r2, #16
 80026c2:	4013      	ands	r3, r2
 80026c4:	d00b      	beq.n	80026de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <UART_AdvFeatureConfig+0x154>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	2220      	movs	r2, #32
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <UART_AdvFeatureConfig+0x158>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	2240      	movs	r2, #64	@ 0x40
 8002706:	4013      	ands	r3, r2
 8002708:	d01d      	beq.n	8002746 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <UART_AdvFeatureConfig+0x15c>)
 8002712:	4013      	ands	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	035b      	lsls	r3, r3, #13
 800272a:	429a      	cmp	r2, r3
 800272c:	d10b      	bne.n	8002746 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a15      	ldr	r2, [pc, #84]	@ (800278c <UART_AdvFeatureConfig+0x160>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2280      	movs	r2, #128	@ 0x80
 800274c:	4013      	ands	r3, r2
 800274e:	d00b      	beq.n	8002768 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a0e      	ldr	r2, [pc, #56]	@ (8002790 <UART_AdvFeatureConfig+0x164>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
  }
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}
 8002770:	ffff7fff 	.word	0xffff7fff
 8002774:	fffdffff 	.word	0xfffdffff
 8002778:	fffeffff 	.word	0xfffeffff
 800277c:	fffbffff 	.word	0xfffbffff
 8002780:	ffffefff 	.word	0xffffefff
 8002784:	ffffdfff 	.word	0xffffdfff
 8002788:	ffefffff 	.word	0xffefffff
 800278c:	ff9fffff 	.word	0xff9fffff
 8002790:	fff7ffff 	.word	0xfff7ffff

08002794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b092      	sub	sp, #72	@ 0x48
 8002798:	af02      	add	r7, sp, #8
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2284      	movs	r2, #132	@ 0x84
 80027a0:	2100      	movs	r1, #0
 80027a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027a4:	f7fe f934 	bl	8000a10 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2208      	movs	r2, #8
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d12c      	bne.n	8002814 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	0391      	lsls	r1, r2, #14
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4a46      	ldr	r2, [pc, #280]	@ (80028dc <UART_CheckIdleState+0x148>)
 80027c4:	9200      	str	r2, [sp, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f000 f88c 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d021      	beq.n	8002814 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d0:	f3ef 8310 	mrs	r3, PRIMASK
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80027d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027da:	2301      	movs	r3, #1
 80027dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	f383 8810 	msr	PRIMASK, r3
}
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	438a      	bics	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	f383 8810 	msr	PRIMASK, r3
}
 8002800:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2278      	movs	r2, #120	@ 0x78
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e05f      	b.n	80028d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2204      	movs	r2, #4
 800281c:	4013      	ands	r3, r2
 800281e:	2b04      	cmp	r3, #4
 8002820:	d146      	bne.n	80028b0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	03d1      	lsls	r1, r2, #15
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <UART_CheckIdleState+0x148>)
 800282c:	9200      	str	r2, [sp, #0]
 800282e:	2200      	movs	r2, #0
 8002830:	f000 f858 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d03b      	beq.n	80028b0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002838:	f3ef 8310 	mrs	r3, PRIMASK
 800283c:	60fb      	str	r3, [r7, #12]
  return(result);
 800283e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
 8002842:	2301      	movs	r3, #1
 8002844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f383 8810 	msr	PRIMASK, r3
}
 800284c:	46c0      	nop			@ (mov r8, r8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4921      	ldr	r1, [pc, #132]	@ (80028e0 <UART_CheckIdleState+0x14c>)
 800285a:	400a      	ands	r2, r1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f383 8810 	msr	PRIMASK, r3
}
 8002868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800286a:	f3ef 8310 	mrs	r3, PRIMASK
 800286e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002870:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002872:	633b      	str	r3, [r7, #48]	@ 0x30
 8002874:	2301      	movs	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f383 8810 	msr	PRIMASK, r3
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2101      	movs	r1, #1
 800288c:	438a      	bics	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002892:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	f383 8810 	msr	PRIMASK, r3
}
 800289a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	@ 0x80
 80028a0:	2120      	movs	r1, #32
 80028a2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2278      	movs	r2, #120	@ 0x78
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e011      	b.n	80028d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2280      	movs	r2, #128	@ 0x80
 80028ba:	2120      	movs	r1, #32
 80028bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2278      	movs	r2, #120	@ 0x78
 80028ce:	2100      	movs	r1, #0
 80028d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b010      	add	sp, #64	@ 0x40
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	01ffffff 	.word	0x01ffffff
 80028e0:	fffffedf 	.word	0xfffffedf

080028e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f4:	e051      	b.n	800299a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3301      	adds	r3, #1
 80028fa:	d04e      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7fe f888 	bl	8000a10 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	429a      	cmp	r2, r3
 800290a:	d302      	bcc.n	8002912 <UART_WaitOnFlagUntilTimeout+0x2e>
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e051      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	4013      	ands	r3, r2
 8002920:	d03b      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b80      	cmp	r3, #128	@ 0x80
 8002926:	d038      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b40      	cmp	r3, #64	@ 0x40
 800292c:	d035      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	2208      	movs	r2, #8
 8002936:	4013      	ands	r3, r2
 8002938:	2b08      	cmp	r3, #8
 800293a:	d111      	bne.n	8002960 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2208      	movs	r2, #8
 8002942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f83c 	bl	80029c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2284      	movs	r2, #132	@ 0x84
 8002950:	2108      	movs	r1, #8
 8002952:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2278      	movs	r2, #120	@ 0x78
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e02c      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	401a      	ands	r2, r3
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	429a      	cmp	r2, r3
 8002972:	d112      	bne.n	800299a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 f81f 	bl	80029c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2284      	movs	r2, #132	@ 0x84
 800298a:	2120      	movs	r1, #32
 800298c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2278      	movs	r2, #120	@ 0x78
 8002992:	2100      	movs	r1, #0
 8002994:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e00f      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	425a      	negs	r2, r3
 80029aa:	4153      	adcs	r3, r2
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	001a      	movs	r2, r3
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d09e      	beq.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08e      	sub	sp, #56	@ 0x38
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029cc:	f3ef 8310 	mrs	r3, PRIMASK
 80029d0:	617b      	str	r3, [r7, #20]
  return(result);
 80029d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			@ (mov r8, r8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4926      	ldr	r1, [pc, #152]	@ (8002a88 <UART_EndRxTransfer+0xc4>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002a02:	623b      	str	r3, [r7, #32]
  return(result);
 8002a04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a08:	2301      	movs	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	f383 8810 	msr	PRIMASK, r3
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	438a      	bics	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2a:	f383 8810 	msr	PRIMASK, r3
}
 8002a2e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d118      	bne.n	8002a6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a38:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a42:	2301      	movs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2110      	movs	r1, #16
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f383 8810 	msr	PRIMASK, r3
}
 8002a68:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	2120      	movs	r1, #32
 8002a70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b00e      	add	sp, #56	@ 0x38
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	fffffedf 	.word	0xfffffedf

08002a8c <_vsiprintf_r>:
 8002a8c:	b500      	push	{lr}
 8002a8e:	b09b      	sub	sp, #108	@ 0x6c
 8002a90:	9100      	str	r1, [sp, #0]
 8002a92:	9104      	str	r1, [sp, #16]
 8002a94:	4906      	ldr	r1, [pc, #24]	@ (8002ab0 <_vsiprintf_r+0x24>)
 8002a96:	9105      	str	r1, [sp, #20]
 8002a98:	9102      	str	r1, [sp, #8]
 8002a9a:	4906      	ldr	r1, [pc, #24]	@ (8002ab4 <_vsiprintf_r+0x28>)
 8002a9c:	9103      	str	r1, [sp, #12]
 8002a9e:	4669      	mov	r1, sp
 8002aa0:	f000 f9a6 	bl	8002df0 <_svfiprintf_r>
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	9b00      	ldr	r3, [sp, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	b01b      	add	sp, #108	@ 0x6c
 8002aac:	bd00      	pop	{pc}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	7fffffff 	.word	0x7fffffff
 8002ab4:	ffff0208 	.word	0xffff0208

08002ab8 <vsiprintf>:
 8002ab8:	b510      	push	{r4, lr}
 8002aba:	4c04      	ldr	r4, [pc, #16]	@ (8002acc <vsiprintf+0x14>)
 8002abc:	0013      	movs	r3, r2
 8002abe:	000a      	movs	r2, r1
 8002ac0:	0001      	movs	r1, r0
 8002ac2:	6820      	ldr	r0, [r4, #0]
 8002ac4:	f7ff ffe2 	bl	8002a8c <_vsiprintf_r>
 8002ac8:	bd10      	pop	{r4, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	2000000c 	.word	0x2000000c

08002ad0 <memset>:
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	1882      	adds	r2, r0, r2
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d100      	bne.n	8002ada <memset+0xa>
 8002ad8:	4770      	bx	lr
 8002ada:	7019      	strb	r1, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	e7f9      	b.n	8002ad4 <memset+0x4>

08002ae0 <__errno>:
 8002ae0:	4b01      	ldr	r3, [pc, #4]	@ (8002ae8 <__errno+0x8>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	4770      	bx	lr
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	2000000c 	.word	0x2000000c

08002aec <__libc_init_array>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	2600      	movs	r6, #0
 8002af0:	4c0c      	ldr	r4, [pc, #48]	@ (8002b24 <__libc_init_array+0x38>)
 8002af2:	4d0d      	ldr	r5, [pc, #52]	@ (8002b28 <__libc_init_array+0x3c>)
 8002af4:	1b64      	subs	r4, r4, r5
 8002af6:	10a4      	asrs	r4, r4, #2
 8002af8:	42a6      	cmp	r6, r4
 8002afa:	d109      	bne.n	8002b10 <__libc_init_array+0x24>
 8002afc:	2600      	movs	r6, #0
 8002afe:	f000 fc65 	bl	80033cc <_init>
 8002b02:	4c0a      	ldr	r4, [pc, #40]	@ (8002b2c <__libc_init_array+0x40>)
 8002b04:	4d0a      	ldr	r5, [pc, #40]	@ (8002b30 <__libc_init_array+0x44>)
 8002b06:	1b64      	subs	r4, r4, r5
 8002b08:	10a4      	asrs	r4, r4, #2
 8002b0a:	42a6      	cmp	r6, r4
 8002b0c:	d105      	bne.n	8002b1a <__libc_init_array+0x2e>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	00b3      	lsls	r3, r6, #2
 8002b12:	58eb      	ldr	r3, [r5, r3]
 8002b14:	4798      	blx	r3
 8002b16:	3601      	adds	r6, #1
 8002b18:	e7ee      	b.n	8002af8 <__libc_init_array+0xc>
 8002b1a:	00b3      	lsls	r3, r6, #2
 8002b1c:	58eb      	ldr	r3, [r5, r3]
 8002b1e:	4798      	blx	r3
 8002b20:	3601      	adds	r6, #1
 8002b22:	e7f2      	b.n	8002b0a <__libc_init_array+0x1e>
 8002b24:	08003460 	.word	0x08003460
 8002b28:	08003460 	.word	0x08003460
 8002b2c:	08003464 	.word	0x08003464
 8002b30:	08003460 	.word	0x08003460

08002b34 <__retarget_lock_acquire_recursive>:
 8002b34:	4770      	bx	lr

08002b36 <__retarget_lock_release_recursive>:
 8002b36:	4770      	bx	lr

08002b38 <_free_r>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	0005      	movs	r5, r0
 8002b3c:	1e0c      	subs	r4, r1, #0
 8002b3e:	d010      	beq.n	8002b62 <_free_r+0x2a>
 8002b40:	3c04      	subs	r4, #4
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da00      	bge.n	8002b4a <_free_r+0x12>
 8002b48:	18e4      	adds	r4, r4, r3
 8002b4a:	0028      	movs	r0, r5
 8002b4c:	f000 f8e0 	bl	8002d10 <__malloc_lock>
 8002b50:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <_free_r+0x90>)
 8002b52:	6813      	ldr	r3, [r2, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <_free_r+0x2c>
 8002b58:	6063      	str	r3, [r4, #4]
 8002b5a:	6014      	str	r4, [r2, #0]
 8002b5c:	0028      	movs	r0, r5
 8002b5e:	f000 f8df 	bl	8002d20 <__malloc_unlock>
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	d908      	bls.n	8002b7a <_free_r+0x42>
 8002b68:	6820      	ldr	r0, [r4, #0]
 8002b6a:	1821      	adds	r1, r4, r0
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d1f3      	bne.n	8002b58 <_free_r+0x20>
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	1809      	adds	r1, r1, r0
 8002b76:	6021      	str	r1, [r4, #0]
 8002b78:	e7ee      	b.n	8002b58 <_free_r+0x20>
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <_free_r+0x4e>
 8002b82:	42a3      	cmp	r3, r4
 8002b84:	d9f9      	bls.n	8002b7a <_free_r+0x42>
 8002b86:	6811      	ldr	r1, [r2, #0]
 8002b88:	1850      	adds	r0, r2, r1
 8002b8a:	42a0      	cmp	r0, r4
 8002b8c:	d10b      	bne.n	8002ba6 <_free_r+0x6e>
 8002b8e:	6820      	ldr	r0, [r4, #0]
 8002b90:	1809      	adds	r1, r1, r0
 8002b92:	1850      	adds	r0, r2, r1
 8002b94:	6011      	str	r1, [r2, #0]
 8002b96:	4283      	cmp	r3, r0
 8002b98:	d1e0      	bne.n	8002b5c <_free_r+0x24>
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	1841      	adds	r1, r0, r1
 8002ba0:	6011      	str	r1, [r2, #0]
 8002ba2:	6053      	str	r3, [r2, #4]
 8002ba4:	e7da      	b.n	8002b5c <_free_r+0x24>
 8002ba6:	42a0      	cmp	r0, r4
 8002ba8:	d902      	bls.n	8002bb0 <_free_r+0x78>
 8002baa:	230c      	movs	r3, #12
 8002bac:	602b      	str	r3, [r5, #0]
 8002bae:	e7d5      	b.n	8002b5c <_free_r+0x24>
 8002bb0:	6820      	ldr	r0, [r4, #0]
 8002bb2:	1821      	adds	r1, r4, r0
 8002bb4:	428b      	cmp	r3, r1
 8002bb6:	d103      	bne.n	8002bc0 <_free_r+0x88>
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	1809      	adds	r1, r1, r0
 8002bbe:	6021      	str	r1, [r4, #0]
 8002bc0:	6063      	str	r3, [r4, #4]
 8002bc2:	6054      	str	r4, [r2, #4]
 8002bc4:	e7ca      	b.n	8002b5c <_free_r+0x24>
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	20000338 	.word	0x20000338

08002bcc <sbrk_aligned>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4e0f      	ldr	r6, [pc, #60]	@ (8002c0c <sbrk_aligned+0x40>)
 8002bd0:	000d      	movs	r5, r1
 8002bd2:	6831      	ldr	r1, [r6, #0]
 8002bd4:	0004      	movs	r4, r0
 8002bd6:	2900      	cmp	r1, #0
 8002bd8:	d102      	bne.n	8002be0 <sbrk_aligned+0x14>
 8002bda:	f000 fb99 	bl	8003310 <_sbrk_r>
 8002bde:	6030      	str	r0, [r6, #0]
 8002be0:	0029      	movs	r1, r5
 8002be2:	0020      	movs	r0, r4
 8002be4:	f000 fb94 	bl	8003310 <_sbrk_r>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d103      	bne.n	8002bf4 <sbrk_aligned+0x28>
 8002bec:	2501      	movs	r5, #1
 8002bee:	426d      	negs	r5, r5
 8002bf0:	0028      	movs	r0, r5
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	1cc5      	adds	r5, r0, #3
 8002bf8:	439d      	bics	r5, r3
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d0f8      	beq.n	8002bf0 <sbrk_aligned+0x24>
 8002bfe:	1a29      	subs	r1, r5, r0
 8002c00:	0020      	movs	r0, r4
 8002c02:	f000 fb85 	bl	8003310 <_sbrk_r>
 8002c06:	3001      	adds	r0, #1
 8002c08:	d1f2      	bne.n	8002bf0 <sbrk_aligned+0x24>
 8002c0a:	e7ef      	b.n	8002bec <sbrk_aligned+0x20>
 8002c0c:	20000334 	.word	0x20000334

08002c10 <_malloc_r>:
 8002c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c12:	2203      	movs	r2, #3
 8002c14:	1ccb      	adds	r3, r1, #3
 8002c16:	4393      	bics	r3, r2
 8002c18:	3308      	adds	r3, #8
 8002c1a:	0005      	movs	r5, r0
 8002c1c:	001f      	movs	r7, r3
 8002c1e:	2b0c      	cmp	r3, #12
 8002c20:	d234      	bcs.n	8002c8c <_malloc_r+0x7c>
 8002c22:	270c      	movs	r7, #12
 8002c24:	42b9      	cmp	r1, r7
 8002c26:	d833      	bhi.n	8002c90 <_malloc_r+0x80>
 8002c28:	0028      	movs	r0, r5
 8002c2a:	f000 f871 	bl	8002d10 <__malloc_lock>
 8002c2e:	4e37      	ldr	r6, [pc, #220]	@ (8002d0c <_malloc_r+0xfc>)
 8002c30:	6833      	ldr	r3, [r6, #0]
 8002c32:	001c      	movs	r4, r3
 8002c34:	2c00      	cmp	r4, #0
 8002c36:	d12f      	bne.n	8002c98 <_malloc_r+0x88>
 8002c38:	0039      	movs	r1, r7
 8002c3a:	0028      	movs	r0, r5
 8002c3c:	f7ff ffc6 	bl	8002bcc <sbrk_aligned>
 8002c40:	0004      	movs	r4, r0
 8002c42:	1c43      	adds	r3, r0, #1
 8002c44:	d15f      	bne.n	8002d06 <_malloc_r+0xf6>
 8002c46:	6834      	ldr	r4, [r6, #0]
 8002c48:	9400      	str	r4, [sp, #0]
 8002c4a:	9b00      	ldr	r3, [sp, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d14a      	bne.n	8002ce6 <_malloc_r+0xd6>
 8002c50:	2c00      	cmp	r4, #0
 8002c52:	d052      	beq.n	8002cfa <_malloc_r+0xea>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	0028      	movs	r0, r5
 8002c58:	18e3      	adds	r3, r4, r3
 8002c5a:	9900      	ldr	r1, [sp, #0]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	f000 fb57 	bl	8003310 <_sbrk_r>
 8002c62:	9b01      	ldr	r3, [sp, #4]
 8002c64:	4283      	cmp	r3, r0
 8002c66:	d148      	bne.n	8002cfa <_malloc_r+0xea>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	1aff      	subs	r7, r7, r3
 8002c6e:	0039      	movs	r1, r7
 8002c70:	f7ff ffac 	bl	8002bcc <sbrk_aligned>
 8002c74:	3001      	adds	r0, #1
 8002c76:	d040      	beq.n	8002cfa <_malloc_r+0xea>
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	6023      	str	r3, [r4, #0]
 8002c7e:	6833      	ldr	r3, [r6, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2a00      	cmp	r2, #0
 8002c84:	d133      	bne.n	8002cee <_malloc_r+0xde>
 8002c86:	9b00      	ldr	r3, [sp, #0]
 8002c88:	6033      	str	r3, [r6, #0]
 8002c8a:	e019      	b.n	8002cc0 <_malloc_r+0xb0>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	dac9      	bge.n	8002c24 <_malloc_r+0x14>
 8002c90:	230c      	movs	r3, #12
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	2000      	movs	r0, #0
 8002c96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c98:	6821      	ldr	r1, [r4, #0]
 8002c9a:	1bc9      	subs	r1, r1, r7
 8002c9c:	d420      	bmi.n	8002ce0 <_malloc_r+0xd0>
 8002c9e:	290b      	cmp	r1, #11
 8002ca0:	d90a      	bls.n	8002cb8 <_malloc_r+0xa8>
 8002ca2:	19e2      	adds	r2, r4, r7
 8002ca4:	6027      	str	r7, [r4, #0]
 8002ca6:	42a3      	cmp	r3, r4
 8002ca8:	d104      	bne.n	8002cb4 <_malloc_r+0xa4>
 8002caa:	6032      	str	r2, [r6, #0]
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	6011      	str	r1, [r2, #0]
 8002cb0:	6053      	str	r3, [r2, #4]
 8002cb2:	e005      	b.n	8002cc0 <_malloc_r+0xb0>
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	e7f9      	b.n	8002cac <_malloc_r+0x9c>
 8002cb8:	6862      	ldr	r2, [r4, #4]
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	d10e      	bne.n	8002cdc <_malloc_r+0xcc>
 8002cbe:	6032      	str	r2, [r6, #0]
 8002cc0:	0028      	movs	r0, r5
 8002cc2:	f000 f82d 	bl	8002d20 <__malloc_unlock>
 8002cc6:	0020      	movs	r0, r4
 8002cc8:	2207      	movs	r2, #7
 8002cca:	300b      	adds	r0, #11
 8002ccc:	1d23      	adds	r3, r4, #4
 8002cce:	4390      	bics	r0, r2
 8002cd0:	1ac2      	subs	r2, r0, r3
 8002cd2:	4298      	cmp	r0, r3
 8002cd4:	d0df      	beq.n	8002c96 <_malloc_r+0x86>
 8002cd6:	1a1b      	subs	r3, r3, r0
 8002cd8:	50a3      	str	r3, [r4, r2]
 8002cda:	e7dc      	b.n	8002c96 <_malloc_r+0x86>
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e7ef      	b.n	8002cc0 <_malloc_r+0xb0>
 8002ce0:	0023      	movs	r3, r4
 8002ce2:	6864      	ldr	r4, [r4, #4]
 8002ce4:	e7a6      	b.n	8002c34 <_malloc_r+0x24>
 8002ce6:	9c00      	ldr	r4, [sp, #0]
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	e7ad      	b.n	8002c4a <_malloc_r+0x3a>
 8002cee:	001a      	movs	r2, r3
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	42a3      	cmp	r3, r4
 8002cf4:	d1fb      	bne.n	8002cee <_malloc_r+0xde>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e7da      	b.n	8002cb0 <_malloc_r+0xa0>
 8002cfa:	230c      	movs	r3, #12
 8002cfc:	0028      	movs	r0, r5
 8002cfe:	602b      	str	r3, [r5, #0]
 8002d00:	f000 f80e 	bl	8002d20 <__malloc_unlock>
 8002d04:	e7c6      	b.n	8002c94 <_malloc_r+0x84>
 8002d06:	6007      	str	r7, [r0, #0]
 8002d08:	e7da      	b.n	8002cc0 <_malloc_r+0xb0>
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	20000338 	.word	0x20000338

08002d10 <__malloc_lock>:
 8002d10:	b510      	push	{r4, lr}
 8002d12:	4802      	ldr	r0, [pc, #8]	@ (8002d1c <__malloc_lock+0xc>)
 8002d14:	f7ff ff0e 	bl	8002b34 <__retarget_lock_acquire_recursive>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	20000330 	.word	0x20000330

08002d20 <__malloc_unlock>:
 8002d20:	b510      	push	{r4, lr}
 8002d22:	4802      	ldr	r0, [pc, #8]	@ (8002d2c <__malloc_unlock+0xc>)
 8002d24:	f7ff ff07 	bl	8002b36 <__retarget_lock_release_recursive>
 8002d28:	bd10      	pop	{r4, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	20000330 	.word	0x20000330

08002d30 <__ssputs_r>:
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d32:	688e      	ldr	r6, [r1, #8]
 8002d34:	b085      	sub	sp, #20
 8002d36:	001f      	movs	r7, r3
 8002d38:	000c      	movs	r4, r1
 8002d3a:	680b      	ldr	r3, [r1, #0]
 8002d3c:	9002      	str	r0, [sp, #8]
 8002d3e:	9203      	str	r2, [sp, #12]
 8002d40:	42be      	cmp	r6, r7
 8002d42:	d830      	bhi.n	8002da6 <__ssputs_r+0x76>
 8002d44:	210c      	movs	r1, #12
 8002d46:	5e62      	ldrsh	r2, [r4, r1]
 8002d48:	2190      	movs	r1, #144	@ 0x90
 8002d4a:	00c9      	lsls	r1, r1, #3
 8002d4c:	420a      	tst	r2, r1
 8002d4e:	d028      	beq.n	8002da2 <__ssputs_r+0x72>
 8002d50:	2003      	movs	r0, #3
 8002d52:	6921      	ldr	r1, [r4, #16]
 8002d54:	1a5b      	subs	r3, r3, r1
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	6963      	ldr	r3, [r4, #20]
 8002d5a:	4343      	muls	r3, r0
 8002d5c:	9801      	ldr	r0, [sp, #4]
 8002d5e:	0fdd      	lsrs	r5, r3, #31
 8002d60:	18ed      	adds	r5, r5, r3
 8002d62:	1c7b      	adds	r3, r7, #1
 8002d64:	181b      	adds	r3, r3, r0
 8002d66:	106d      	asrs	r5, r5, #1
 8002d68:	42ab      	cmp	r3, r5
 8002d6a:	d900      	bls.n	8002d6e <__ssputs_r+0x3e>
 8002d6c:	001d      	movs	r5, r3
 8002d6e:	0552      	lsls	r2, r2, #21
 8002d70:	d528      	bpl.n	8002dc4 <__ssputs_r+0x94>
 8002d72:	0029      	movs	r1, r5
 8002d74:	9802      	ldr	r0, [sp, #8]
 8002d76:	f7ff ff4b 	bl	8002c10 <_malloc_r>
 8002d7a:	1e06      	subs	r6, r0, #0
 8002d7c:	d02c      	beq.n	8002dd8 <__ssputs_r+0xa8>
 8002d7e:	9a01      	ldr	r2, [sp, #4]
 8002d80:	6921      	ldr	r1, [r4, #16]
 8002d82:	f000 fae2 	bl	800334a <memcpy>
 8002d86:	89a2      	ldrh	r2, [r4, #12]
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <__ssputs_r+0xbc>)
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	81a3      	strh	r3, [r4, #12]
 8002d92:	9b01      	ldr	r3, [sp, #4]
 8002d94:	6126      	str	r6, [r4, #16]
 8002d96:	18f6      	adds	r6, r6, r3
 8002d98:	6026      	str	r6, [r4, #0]
 8002d9a:	003e      	movs	r6, r7
 8002d9c:	6165      	str	r5, [r4, #20]
 8002d9e:	1aed      	subs	r5, r5, r3
 8002da0:	60a5      	str	r5, [r4, #8]
 8002da2:	42be      	cmp	r6, r7
 8002da4:	d900      	bls.n	8002da8 <__ssputs_r+0x78>
 8002da6:	003e      	movs	r6, r7
 8002da8:	0032      	movs	r2, r6
 8002daa:	9903      	ldr	r1, [sp, #12]
 8002dac:	6820      	ldr	r0, [r4, #0]
 8002dae:	f000 fa9b 	bl	80032e8 <memmove>
 8002db2:	2000      	movs	r0, #0
 8002db4:	68a3      	ldr	r3, [r4, #8]
 8002db6:	1b9b      	subs	r3, r3, r6
 8002db8:	60a3      	str	r3, [r4, #8]
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	199b      	adds	r3, r3, r6
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	b005      	add	sp, #20
 8002dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dc4:	002a      	movs	r2, r5
 8002dc6:	9802      	ldr	r0, [sp, #8]
 8002dc8:	f000 fac8 	bl	800335c <_realloc_r>
 8002dcc:	1e06      	subs	r6, r0, #0
 8002dce:	d1e0      	bne.n	8002d92 <__ssputs_r+0x62>
 8002dd0:	6921      	ldr	r1, [r4, #16]
 8002dd2:	9802      	ldr	r0, [sp, #8]
 8002dd4:	f7ff feb0 	bl	8002b38 <_free_r>
 8002dd8:	230c      	movs	r3, #12
 8002dda:	2001      	movs	r0, #1
 8002ddc:	9a02      	ldr	r2, [sp, #8]
 8002dde:	4240      	negs	r0, r0
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	89a2      	ldrh	r2, [r4, #12]
 8002de4:	3334      	adds	r3, #52	@ 0x34
 8002de6:	4313      	orrs	r3, r2
 8002de8:	81a3      	strh	r3, [r4, #12]
 8002dea:	e7e9      	b.n	8002dc0 <__ssputs_r+0x90>
 8002dec:	fffffb7f 	.word	0xfffffb7f

08002df0 <_svfiprintf_r>:
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	b0a1      	sub	sp, #132	@ 0x84
 8002df4:	9003      	str	r0, [sp, #12]
 8002df6:	001d      	movs	r5, r3
 8002df8:	898b      	ldrh	r3, [r1, #12]
 8002dfa:	000f      	movs	r7, r1
 8002dfc:	0016      	movs	r6, r2
 8002dfe:	061b      	lsls	r3, r3, #24
 8002e00:	d511      	bpl.n	8002e26 <_svfiprintf_r+0x36>
 8002e02:	690b      	ldr	r3, [r1, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10e      	bne.n	8002e26 <_svfiprintf_r+0x36>
 8002e08:	2140      	movs	r1, #64	@ 0x40
 8002e0a:	f7ff ff01 	bl	8002c10 <_malloc_r>
 8002e0e:	6038      	str	r0, [r7, #0]
 8002e10:	6138      	str	r0, [r7, #16]
 8002e12:	2800      	cmp	r0, #0
 8002e14:	d105      	bne.n	8002e22 <_svfiprintf_r+0x32>
 8002e16:	230c      	movs	r3, #12
 8002e18:	9a03      	ldr	r2, [sp, #12]
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	4240      	negs	r0, r0
 8002e20:	e0cf      	b.n	8002fc2 <_svfiprintf_r+0x1d2>
 8002e22:	2340      	movs	r3, #64	@ 0x40
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	2300      	movs	r3, #0
 8002e28:	ac08      	add	r4, sp, #32
 8002e2a:	6163      	str	r3, [r4, #20]
 8002e2c:	3320      	adds	r3, #32
 8002e2e:	7663      	strb	r3, [r4, #25]
 8002e30:	3310      	adds	r3, #16
 8002e32:	76a3      	strb	r3, [r4, #26]
 8002e34:	9507      	str	r5, [sp, #28]
 8002e36:	0035      	movs	r5, r6
 8002e38:	782b      	ldrb	r3, [r5, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <_svfiprintf_r+0x52>
 8002e3e:	2b25      	cmp	r3, #37	@ 0x25
 8002e40:	d148      	bne.n	8002ed4 <_svfiprintf_r+0xe4>
 8002e42:	1bab      	subs	r3, r5, r6
 8002e44:	9305      	str	r3, [sp, #20]
 8002e46:	42b5      	cmp	r5, r6
 8002e48:	d00b      	beq.n	8002e62 <_svfiprintf_r+0x72>
 8002e4a:	0032      	movs	r2, r6
 8002e4c:	0039      	movs	r1, r7
 8002e4e:	9803      	ldr	r0, [sp, #12]
 8002e50:	f7ff ff6e 	bl	8002d30 <__ssputs_r>
 8002e54:	3001      	adds	r0, #1
 8002e56:	d100      	bne.n	8002e5a <_svfiprintf_r+0x6a>
 8002e58:	e0ae      	b.n	8002fb8 <_svfiprintf_r+0x1c8>
 8002e5a:	6963      	ldr	r3, [r4, #20]
 8002e5c:	9a05      	ldr	r2, [sp, #20]
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	6163      	str	r3, [r4, #20]
 8002e62:	782b      	ldrb	r3, [r5, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d100      	bne.n	8002e6a <_svfiprintf_r+0x7a>
 8002e68:	e0a6      	b.n	8002fb8 <_svfiprintf_r+0x1c8>
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	4252      	negs	r2, r2
 8002e70:	6062      	str	r2, [r4, #4]
 8002e72:	a904      	add	r1, sp, #16
 8002e74:	3254      	adds	r2, #84	@ 0x54
 8002e76:	1852      	adds	r2, r2, r1
 8002e78:	1c6e      	adds	r6, r5, #1
 8002e7a:	6023      	str	r3, [r4, #0]
 8002e7c:	60e3      	str	r3, [r4, #12]
 8002e7e:	60a3      	str	r3, [r4, #8]
 8002e80:	7013      	strb	r3, [r2, #0]
 8002e82:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e84:	4b54      	ldr	r3, [pc, #336]	@ (8002fd8 <_svfiprintf_r+0x1e8>)
 8002e86:	2205      	movs	r2, #5
 8002e88:	0018      	movs	r0, r3
 8002e8a:	7831      	ldrb	r1, [r6, #0]
 8002e8c:	9305      	str	r3, [sp, #20]
 8002e8e:	f000 fa51 	bl	8003334 <memchr>
 8002e92:	1c75      	adds	r5, r6, #1
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d11f      	bne.n	8002ed8 <_svfiprintf_r+0xe8>
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	06d3      	lsls	r3, r2, #27
 8002e9c:	d504      	bpl.n	8002ea8 <_svfiprintf_r+0xb8>
 8002e9e:	2353      	movs	r3, #83	@ 0x53
 8002ea0:	a904      	add	r1, sp, #16
 8002ea2:	185b      	adds	r3, r3, r1
 8002ea4:	2120      	movs	r1, #32
 8002ea6:	7019      	strb	r1, [r3, #0]
 8002ea8:	0713      	lsls	r3, r2, #28
 8002eaa:	d504      	bpl.n	8002eb6 <_svfiprintf_r+0xc6>
 8002eac:	2353      	movs	r3, #83	@ 0x53
 8002eae:	a904      	add	r1, sp, #16
 8002eb0:	185b      	adds	r3, r3, r1
 8002eb2:	212b      	movs	r1, #43	@ 0x2b
 8002eb4:	7019      	strb	r1, [r3, #0]
 8002eb6:	7833      	ldrb	r3, [r6, #0]
 8002eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eba:	d016      	beq.n	8002eea <_svfiprintf_r+0xfa>
 8002ebc:	0035      	movs	r5, r6
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	200a      	movs	r0, #10
 8002ec2:	68e3      	ldr	r3, [r4, #12]
 8002ec4:	782a      	ldrb	r2, [r5, #0]
 8002ec6:	1c6e      	adds	r6, r5, #1
 8002ec8:	3a30      	subs	r2, #48	@ 0x30
 8002eca:	2a09      	cmp	r2, #9
 8002ecc:	d950      	bls.n	8002f70 <_svfiprintf_r+0x180>
 8002ece:	2900      	cmp	r1, #0
 8002ed0:	d111      	bne.n	8002ef6 <_svfiprintf_r+0x106>
 8002ed2:	e017      	b.n	8002f04 <_svfiprintf_r+0x114>
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	e7af      	b.n	8002e38 <_svfiprintf_r+0x48>
 8002ed8:	9b05      	ldr	r3, [sp, #20]
 8002eda:	6822      	ldr	r2, [r4, #0]
 8002edc:	1ac0      	subs	r0, r0, r3
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4083      	lsls	r3, r0
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	002e      	movs	r6, r5
 8002ee6:	6023      	str	r3, [r4, #0]
 8002ee8:	e7cc      	b.n	8002e84 <_svfiprintf_r+0x94>
 8002eea:	9b07      	ldr	r3, [sp, #28]
 8002eec:	1d19      	adds	r1, r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	9107      	str	r1, [sp, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	db01      	blt.n	8002efa <_svfiprintf_r+0x10a>
 8002ef6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ef8:	e004      	b.n	8002f04 <_svfiprintf_r+0x114>
 8002efa:	425b      	negs	r3, r3
 8002efc:	60e3      	str	r3, [r4, #12]
 8002efe:	2302      	movs	r3, #2
 8002f00:	4313      	orrs	r3, r2
 8002f02:	6023      	str	r3, [r4, #0]
 8002f04:	782b      	ldrb	r3, [r5, #0]
 8002f06:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f08:	d10c      	bne.n	8002f24 <_svfiprintf_r+0x134>
 8002f0a:	786b      	ldrb	r3, [r5, #1]
 8002f0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f0e:	d134      	bne.n	8002f7a <_svfiprintf_r+0x18a>
 8002f10:	9b07      	ldr	r3, [sp, #28]
 8002f12:	3502      	adds	r5, #2
 8002f14:	1d1a      	adds	r2, r3, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	9207      	str	r2, [sp, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da01      	bge.n	8002f22 <_svfiprintf_r+0x132>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	425b      	negs	r3, r3
 8002f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f24:	4e2d      	ldr	r6, [pc, #180]	@ (8002fdc <_svfiprintf_r+0x1ec>)
 8002f26:	2203      	movs	r2, #3
 8002f28:	0030      	movs	r0, r6
 8002f2a:	7829      	ldrb	r1, [r5, #0]
 8002f2c:	f000 fa02 	bl	8003334 <memchr>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d006      	beq.n	8002f42 <_svfiprintf_r+0x152>
 8002f34:	2340      	movs	r3, #64	@ 0x40
 8002f36:	1b80      	subs	r0, r0, r6
 8002f38:	4083      	lsls	r3, r0
 8002f3a:	6822      	ldr	r2, [r4, #0]
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	7829      	ldrb	r1, [r5, #0]
 8002f44:	2206      	movs	r2, #6
 8002f46:	4826      	ldr	r0, [pc, #152]	@ (8002fe0 <_svfiprintf_r+0x1f0>)
 8002f48:	1c6e      	adds	r6, r5, #1
 8002f4a:	7621      	strb	r1, [r4, #24]
 8002f4c:	f000 f9f2 	bl	8003334 <memchr>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d038      	beq.n	8002fc6 <_svfiprintf_r+0x1d6>
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <_svfiprintf_r+0x1f4>)
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d122      	bne.n	8002fa0 <_svfiprintf_r+0x1b0>
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	9b07      	ldr	r3, [sp, #28]
 8002f5e:	3307      	adds	r3, #7
 8002f60:	4393      	bics	r3, r2
 8002f62:	3308      	adds	r3, #8
 8002f64:	9307      	str	r3, [sp, #28]
 8002f66:	6963      	ldr	r3, [r4, #20]
 8002f68:	9a04      	ldr	r2, [sp, #16]
 8002f6a:	189b      	adds	r3, r3, r2
 8002f6c:	6163      	str	r3, [r4, #20]
 8002f6e:	e762      	b.n	8002e36 <_svfiprintf_r+0x46>
 8002f70:	4343      	muls	r3, r0
 8002f72:	0035      	movs	r5, r6
 8002f74:	2101      	movs	r1, #1
 8002f76:	189b      	adds	r3, r3, r2
 8002f78:	e7a4      	b.n	8002ec4 <_svfiprintf_r+0xd4>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	200a      	movs	r0, #10
 8002f7e:	0019      	movs	r1, r3
 8002f80:	3501      	adds	r5, #1
 8002f82:	6063      	str	r3, [r4, #4]
 8002f84:	782a      	ldrb	r2, [r5, #0]
 8002f86:	1c6e      	adds	r6, r5, #1
 8002f88:	3a30      	subs	r2, #48	@ 0x30
 8002f8a:	2a09      	cmp	r2, #9
 8002f8c:	d903      	bls.n	8002f96 <_svfiprintf_r+0x1a6>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0c8      	beq.n	8002f24 <_svfiprintf_r+0x134>
 8002f92:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f94:	e7c6      	b.n	8002f24 <_svfiprintf_r+0x134>
 8002f96:	4341      	muls	r1, r0
 8002f98:	0035      	movs	r5, r6
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	1889      	adds	r1, r1, r2
 8002f9e:	e7f1      	b.n	8002f84 <_svfiprintf_r+0x194>
 8002fa0:	aa07      	add	r2, sp, #28
 8002fa2:	9200      	str	r2, [sp, #0]
 8002fa4:	0021      	movs	r1, r4
 8002fa6:	003a      	movs	r2, r7
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <_svfiprintf_r+0x1f8>)
 8002faa:	9803      	ldr	r0, [sp, #12]
 8002fac:	e000      	b.n	8002fb0 <_svfiprintf_r+0x1c0>
 8002fae:	bf00      	nop
 8002fb0:	9004      	str	r0, [sp, #16]
 8002fb2:	9b04      	ldr	r3, [sp, #16]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	d1d6      	bne.n	8002f66 <_svfiprintf_r+0x176>
 8002fb8:	89bb      	ldrh	r3, [r7, #12]
 8002fba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002fbc:	065b      	lsls	r3, r3, #25
 8002fbe:	d500      	bpl.n	8002fc2 <_svfiprintf_r+0x1d2>
 8002fc0:	e72c      	b.n	8002e1c <_svfiprintf_r+0x2c>
 8002fc2:	b021      	add	sp, #132	@ 0x84
 8002fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc6:	aa07      	add	r2, sp, #28
 8002fc8:	9200      	str	r2, [sp, #0]
 8002fca:	0021      	movs	r1, r4
 8002fcc:	003a      	movs	r2, r7
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <_svfiprintf_r+0x1f8>)
 8002fd0:	9803      	ldr	r0, [sp, #12]
 8002fd2:	f000 f87b 	bl	80030cc <_printf_i>
 8002fd6:	e7eb      	b.n	8002fb0 <_svfiprintf_r+0x1c0>
 8002fd8:	0800342c 	.word	0x0800342c
 8002fdc:	08003432 	.word	0x08003432
 8002fe0:	08003436 	.word	0x08003436
 8002fe4:	00000000 	.word	0x00000000
 8002fe8:	08002d31 	.word	0x08002d31

08002fec <_printf_common>:
 8002fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fee:	0016      	movs	r6, r2
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	688a      	ldr	r2, [r1, #8]
 8002ff4:	690b      	ldr	r3, [r1, #16]
 8002ff6:	000c      	movs	r4, r1
 8002ff8:	9000      	str	r0, [sp, #0]
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	da00      	bge.n	8003000 <_printf_common+0x14>
 8002ffe:	0013      	movs	r3, r2
 8003000:	0022      	movs	r2, r4
 8003002:	6033      	str	r3, [r6, #0]
 8003004:	3243      	adds	r2, #67	@ 0x43
 8003006:	7812      	ldrb	r2, [r2, #0]
 8003008:	2a00      	cmp	r2, #0
 800300a:	d001      	beq.n	8003010 <_printf_common+0x24>
 800300c:	3301      	adds	r3, #1
 800300e:	6033      	str	r3, [r6, #0]
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	069b      	lsls	r3, r3, #26
 8003014:	d502      	bpl.n	800301c <_printf_common+0x30>
 8003016:	6833      	ldr	r3, [r6, #0]
 8003018:	3302      	adds	r3, #2
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	2306      	movs	r3, #6
 8003020:	0015      	movs	r5, r2
 8003022:	401d      	ands	r5, r3
 8003024:	421a      	tst	r2, r3
 8003026:	d027      	beq.n	8003078 <_printf_common+0x8c>
 8003028:	0023      	movs	r3, r4
 800302a:	3343      	adds	r3, #67	@ 0x43
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	1e5a      	subs	r2, r3, #1
 8003030:	4193      	sbcs	r3, r2
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	0692      	lsls	r2, r2, #26
 8003036:	d430      	bmi.n	800309a <_printf_common+0xae>
 8003038:	0022      	movs	r2, r4
 800303a:	9901      	ldr	r1, [sp, #4]
 800303c:	9800      	ldr	r0, [sp, #0]
 800303e:	9d08      	ldr	r5, [sp, #32]
 8003040:	3243      	adds	r2, #67	@ 0x43
 8003042:	47a8      	blx	r5
 8003044:	3001      	adds	r0, #1
 8003046:	d025      	beq.n	8003094 <_printf_common+0xa8>
 8003048:	2206      	movs	r2, #6
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	2500      	movs	r5, #0
 800304e:	4013      	ands	r3, r2
 8003050:	2b04      	cmp	r3, #4
 8003052:	d105      	bne.n	8003060 <_printf_common+0x74>
 8003054:	6833      	ldr	r3, [r6, #0]
 8003056:	68e5      	ldr	r5, [r4, #12]
 8003058:	1aed      	subs	r5, r5, r3
 800305a:	43eb      	mvns	r3, r5
 800305c:	17db      	asrs	r3, r3, #31
 800305e:	401d      	ands	r5, r3
 8003060:	68a3      	ldr	r3, [r4, #8]
 8003062:	6922      	ldr	r2, [r4, #16]
 8003064:	4293      	cmp	r3, r2
 8003066:	dd01      	ble.n	800306c <_printf_common+0x80>
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	18ed      	adds	r5, r5, r3
 800306c:	2600      	movs	r6, #0
 800306e:	42b5      	cmp	r5, r6
 8003070:	d120      	bne.n	80030b4 <_printf_common+0xc8>
 8003072:	2000      	movs	r0, #0
 8003074:	e010      	b.n	8003098 <_printf_common+0xac>
 8003076:	3501      	adds	r5, #1
 8003078:	68e3      	ldr	r3, [r4, #12]
 800307a:	6832      	ldr	r2, [r6, #0]
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	42ab      	cmp	r3, r5
 8003080:	ddd2      	ble.n	8003028 <_printf_common+0x3c>
 8003082:	0022      	movs	r2, r4
 8003084:	2301      	movs	r3, #1
 8003086:	9901      	ldr	r1, [sp, #4]
 8003088:	9800      	ldr	r0, [sp, #0]
 800308a:	9f08      	ldr	r7, [sp, #32]
 800308c:	3219      	adds	r2, #25
 800308e:	47b8      	blx	r7
 8003090:	3001      	adds	r0, #1
 8003092:	d1f0      	bne.n	8003076 <_printf_common+0x8a>
 8003094:	2001      	movs	r0, #1
 8003096:	4240      	negs	r0, r0
 8003098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800309a:	2030      	movs	r0, #48	@ 0x30
 800309c:	18e1      	adds	r1, r4, r3
 800309e:	3143      	adds	r1, #67	@ 0x43
 80030a0:	7008      	strb	r0, [r1, #0]
 80030a2:	0021      	movs	r1, r4
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	3145      	adds	r1, #69	@ 0x45
 80030a8:	7809      	ldrb	r1, [r1, #0]
 80030aa:	18a2      	adds	r2, r4, r2
 80030ac:	3243      	adds	r2, #67	@ 0x43
 80030ae:	3302      	adds	r3, #2
 80030b0:	7011      	strb	r1, [r2, #0]
 80030b2:	e7c1      	b.n	8003038 <_printf_common+0x4c>
 80030b4:	0022      	movs	r2, r4
 80030b6:	2301      	movs	r3, #1
 80030b8:	9901      	ldr	r1, [sp, #4]
 80030ba:	9800      	ldr	r0, [sp, #0]
 80030bc:	9f08      	ldr	r7, [sp, #32]
 80030be:	321a      	adds	r2, #26
 80030c0:	47b8      	blx	r7
 80030c2:	3001      	adds	r0, #1
 80030c4:	d0e6      	beq.n	8003094 <_printf_common+0xa8>
 80030c6:	3601      	adds	r6, #1
 80030c8:	e7d1      	b.n	800306e <_printf_common+0x82>
	...

080030cc <_printf_i>:
 80030cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ce:	b08b      	sub	sp, #44	@ 0x2c
 80030d0:	9206      	str	r2, [sp, #24]
 80030d2:	000a      	movs	r2, r1
 80030d4:	3243      	adds	r2, #67	@ 0x43
 80030d6:	9307      	str	r3, [sp, #28]
 80030d8:	9005      	str	r0, [sp, #20]
 80030da:	9203      	str	r2, [sp, #12]
 80030dc:	7e0a      	ldrb	r2, [r1, #24]
 80030de:	000c      	movs	r4, r1
 80030e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80030e2:	2a78      	cmp	r2, #120	@ 0x78
 80030e4:	d809      	bhi.n	80030fa <_printf_i+0x2e>
 80030e6:	2a62      	cmp	r2, #98	@ 0x62
 80030e8:	d80b      	bhi.n	8003102 <_printf_i+0x36>
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d100      	bne.n	80030f0 <_printf_i+0x24>
 80030ee:	e0bc      	b.n	800326a <_printf_i+0x19e>
 80030f0:	497b      	ldr	r1, [pc, #492]	@ (80032e0 <_printf_i+0x214>)
 80030f2:	9104      	str	r1, [sp, #16]
 80030f4:	2a58      	cmp	r2, #88	@ 0x58
 80030f6:	d100      	bne.n	80030fa <_printf_i+0x2e>
 80030f8:	e090      	b.n	800321c <_printf_i+0x150>
 80030fa:	0025      	movs	r5, r4
 80030fc:	3542      	adds	r5, #66	@ 0x42
 80030fe:	702a      	strb	r2, [r5, #0]
 8003100:	e022      	b.n	8003148 <_printf_i+0x7c>
 8003102:	0010      	movs	r0, r2
 8003104:	3863      	subs	r0, #99	@ 0x63
 8003106:	2815      	cmp	r0, #21
 8003108:	d8f7      	bhi.n	80030fa <_printf_i+0x2e>
 800310a:	f7fd f805 	bl	8000118 <__gnu_thumb1_case_shi>
 800310e:	0016      	.short	0x0016
 8003110:	fff6001f 	.word	0xfff6001f
 8003114:	fff6fff6 	.word	0xfff6fff6
 8003118:	001ffff6 	.word	0x001ffff6
 800311c:	fff6fff6 	.word	0xfff6fff6
 8003120:	fff6fff6 	.word	0xfff6fff6
 8003124:	003600a1 	.word	0x003600a1
 8003128:	fff60080 	.word	0xfff60080
 800312c:	00b2fff6 	.word	0x00b2fff6
 8003130:	0036fff6 	.word	0x0036fff6
 8003134:	fff6fff6 	.word	0xfff6fff6
 8003138:	0084      	.short	0x0084
 800313a:	0025      	movs	r5, r4
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	3542      	adds	r5, #66	@ 0x42
 8003140:	1d11      	adds	r1, r2, #4
 8003142:	6019      	str	r1, [r3, #0]
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	702b      	strb	r3, [r5, #0]
 8003148:	2301      	movs	r3, #1
 800314a:	e0a0      	b.n	800328e <_printf_i+0x1c2>
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	6809      	ldr	r1, [r1, #0]
 8003150:	1d02      	adds	r2, r0, #4
 8003152:	060d      	lsls	r5, r1, #24
 8003154:	d50b      	bpl.n	800316e <_printf_i+0xa2>
 8003156:	6806      	ldr	r6, [r0, #0]
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	2e00      	cmp	r6, #0
 800315c:	da03      	bge.n	8003166 <_printf_i+0x9a>
 800315e:	232d      	movs	r3, #45	@ 0x2d
 8003160:	9a03      	ldr	r2, [sp, #12]
 8003162:	4276      	negs	r6, r6
 8003164:	7013      	strb	r3, [r2, #0]
 8003166:	4b5e      	ldr	r3, [pc, #376]	@ (80032e0 <_printf_i+0x214>)
 8003168:	270a      	movs	r7, #10
 800316a:	9304      	str	r3, [sp, #16]
 800316c:	e018      	b.n	80031a0 <_printf_i+0xd4>
 800316e:	6806      	ldr	r6, [r0, #0]
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	0649      	lsls	r1, r1, #25
 8003174:	d5f1      	bpl.n	800315a <_printf_i+0x8e>
 8003176:	b236      	sxth	r6, r6
 8003178:	e7ef      	b.n	800315a <_printf_i+0x8e>
 800317a:	6808      	ldr	r0, [r1, #0]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	c940      	ldmia	r1!, {r6}
 8003180:	0605      	lsls	r5, r0, #24
 8003182:	d402      	bmi.n	800318a <_printf_i+0xbe>
 8003184:	0640      	lsls	r0, r0, #25
 8003186:	d500      	bpl.n	800318a <_printf_i+0xbe>
 8003188:	b2b6      	uxth	r6, r6
 800318a:	6019      	str	r1, [r3, #0]
 800318c:	4b54      	ldr	r3, [pc, #336]	@ (80032e0 <_printf_i+0x214>)
 800318e:	270a      	movs	r7, #10
 8003190:	9304      	str	r3, [sp, #16]
 8003192:	2a6f      	cmp	r2, #111	@ 0x6f
 8003194:	d100      	bne.n	8003198 <_printf_i+0xcc>
 8003196:	3f02      	subs	r7, #2
 8003198:	0023      	movs	r3, r4
 800319a:	2200      	movs	r2, #0
 800319c:	3343      	adds	r3, #67	@ 0x43
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	60a3      	str	r3, [r4, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db03      	blt.n	80031b0 <_printf_i+0xe4>
 80031a8:	2104      	movs	r1, #4
 80031aa:	6822      	ldr	r2, [r4, #0]
 80031ac:	438a      	bics	r2, r1
 80031ae:	6022      	str	r2, [r4, #0]
 80031b0:	2e00      	cmp	r6, #0
 80031b2:	d102      	bne.n	80031ba <_printf_i+0xee>
 80031b4:	9d03      	ldr	r5, [sp, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00c      	beq.n	80031d4 <_printf_i+0x108>
 80031ba:	9d03      	ldr	r5, [sp, #12]
 80031bc:	0030      	movs	r0, r6
 80031be:	0039      	movs	r1, r7
 80031c0:	f7fd f83a 	bl	8000238 <__aeabi_uidivmod>
 80031c4:	9b04      	ldr	r3, [sp, #16]
 80031c6:	3d01      	subs	r5, #1
 80031c8:	5c5b      	ldrb	r3, [r3, r1]
 80031ca:	702b      	strb	r3, [r5, #0]
 80031cc:	0033      	movs	r3, r6
 80031ce:	0006      	movs	r6, r0
 80031d0:	429f      	cmp	r7, r3
 80031d2:	d9f3      	bls.n	80031bc <_printf_i+0xf0>
 80031d4:	2f08      	cmp	r7, #8
 80031d6:	d109      	bne.n	80031ec <_printf_i+0x120>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	07db      	lsls	r3, r3, #31
 80031dc:	d506      	bpl.n	80031ec <_printf_i+0x120>
 80031de:	6862      	ldr	r2, [r4, #4]
 80031e0:	6923      	ldr	r3, [r4, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	dc02      	bgt.n	80031ec <_printf_i+0x120>
 80031e6:	2330      	movs	r3, #48	@ 0x30
 80031e8:	3d01      	subs	r5, #1
 80031ea:	702b      	strb	r3, [r5, #0]
 80031ec:	9b03      	ldr	r3, [sp, #12]
 80031ee:	1b5b      	subs	r3, r3, r5
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	9b07      	ldr	r3, [sp, #28]
 80031f4:	0021      	movs	r1, r4
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	9805      	ldr	r0, [sp, #20]
 80031fa:	9b06      	ldr	r3, [sp, #24]
 80031fc:	aa09      	add	r2, sp, #36	@ 0x24
 80031fe:	f7ff fef5 	bl	8002fec <_printf_common>
 8003202:	3001      	adds	r0, #1
 8003204:	d148      	bne.n	8003298 <_printf_i+0x1cc>
 8003206:	2001      	movs	r0, #1
 8003208:	4240      	negs	r0, r0
 800320a:	b00b      	add	sp, #44	@ 0x2c
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320e:	2220      	movs	r2, #32
 8003210:	6809      	ldr	r1, [r1, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	6022      	str	r2, [r4, #0]
 8003216:	2278      	movs	r2, #120	@ 0x78
 8003218:	4932      	ldr	r1, [pc, #200]	@ (80032e4 <_printf_i+0x218>)
 800321a:	9104      	str	r1, [sp, #16]
 800321c:	0021      	movs	r1, r4
 800321e:	3145      	adds	r1, #69	@ 0x45
 8003220:	700a      	strb	r2, [r1, #0]
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	c940      	ldmia	r1!, {r6}
 8003228:	0610      	lsls	r0, r2, #24
 800322a:	d402      	bmi.n	8003232 <_printf_i+0x166>
 800322c:	0650      	lsls	r0, r2, #25
 800322e:	d500      	bpl.n	8003232 <_printf_i+0x166>
 8003230:	b2b6      	uxth	r6, r6
 8003232:	6019      	str	r1, [r3, #0]
 8003234:	07d3      	lsls	r3, r2, #31
 8003236:	d502      	bpl.n	800323e <_printf_i+0x172>
 8003238:	2320      	movs	r3, #32
 800323a:	4313      	orrs	r3, r2
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	2e00      	cmp	r6, #0
 8003240:	d001      	beq.n	8003246 <_printf_i+0x17a>
 8003242:	2710      	movs	r7, #16
 8003244:	e7a8      	b.n	8003198 <_printf_i+0xcc>
 8003246:	2220      	movs	r2, #32
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	4393      	bics	r3, r2
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	e7f8      	b.n	8003242 <_printf_i+0x176>
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	680d      	ldr	r5, [r1, #0]
 8003254:	1d10      	adds	r0, r2, #4
 8003256:	6949      	ldr	r1, [r1, #20]
 8003258:	6018      	str	r0, [r3, #0]
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	062e      	lsls	r6, r5, #24
 800325e:	d501      	bpl.n	8003264 <_printf_i+0x198>
 8003260:	6019      	str	r1, [r3, #0]
 8003262:	e002      	b.n	800326a <_printf_i+0x19e>
 8003264:	066d      	lsls	r5, r5, #25
 8003266:	d5fb      	bpl.n	8003260 <_printf_i+0x194>
 8003268:	8019      	strh	r1, [r3, #0]
 800326a:	2300      	movs	r3, #0
 800326c:	9d03      	ldr	r5, [sp, #12]
 800326e:	6123      	str	r3, [r4, #16]
 8003270:	e7bf      	b.n	80031f2 <_printf_i+0x126>
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	1d11      	adds	r1, r2, #4
 8003276:	6019      	str	r1, [r3, #0]
 8003278:	6815      	ldr	r5, [r2, #0]
 800327a:	2100      	movs	r1, #0
 800327c:	0028      	movs	r0, r5
 800327e:	6862      	ldr	r2, [r4, #4]
 8003280:	f000 f858 	bl	8003334 <memchr>
 8003284:	2800      	cmp	r0, #0
 8003286:	d001      	beq.n	800328c <_printf_i+0x1c0>
 8003288:	1b40      	subs	r0, r0, r5
 800328a:	6060      	str	r0, [r4, #4]
 800328c:	6863      	ldr	r3, [r4, #4]
 800328e:	6123      	str	r3, [r4, #16]
 8003290:	2300      	movs	r3, #0
 8003292:	9a03      	ldr	r2, [sp, #12]
 8003294:	7013      	strb	r3, [r2, #0]
 8003296:	e7ac      	b.n	80031f2 <_printf_i+0x126>
 8003298:	002a      	movs	r2, r5
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	9906      	ldr	r1, [sp, #24]
 800329e:	9805      	ldr	r0, [sp, #20]
 80032a0:	9d07      	ldr	r5, [sp, #28]
 80032a2:	47a8      	blx	r5
 80032a4:	3001      	adds	r0, #1
 80032a6:	d0ae      	beq.n	8003206 <_printf_i+0x13a>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	079b      	lsls	r3, r3, #30
 80032ac:	d415      	bmi.n	80032da <_printf_i+0x20e>
 80032ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032b0:	68e0      	ldr	r0, [r4, #12]
 80032b2:	4298      	cmp	r0, r3
 80032b4:	daa9      	bge.n	800320a <_printf_i+0x13e>
 80032b6:	0018      	movs	r0, r3
 80032b8:	e7a7      	b.n	800320a <_printf_i+0x13e>
 80032ba:	0022      	movs	r2, r4
 80032bc:	2301      	movs	r3, #1
 80032be:	9906      	ldr	r1, [sp, #24]
 80032c0:	9805      	ldr	r0, [sp, #20]
 80032c2:	9e07      	ldr	r6, [sp, #28]
 80032c4:	3219      	adds	r2, #25
 80032c6:	47b0      	blx	r6
 80032c8:	3001      	adds	r0, #1
 80032ca:	d09c      	beq.n	8003206 <_printf_i+0x13a>
 80032cc:	3501      	adds	r5, #1
 80032ce:	68e3      	ldr	r3, [r4, #12]
 80032d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	42ab      	cmp	r3, r5
 80032d6:	dcf0      	bgt.n	80032ba <_printf_i+0x1ee>
 80032d8:	e7e9      	b.n	80032ae <_printf_i+0x1e2>
 80032da:	2500      	movs	r5, #0
 80032dc:	e7f7      	b.n	80032ce <_printf_i+0x202>
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	0800343d 	.word	0x0800343d
 80032e4:	0800344e 	.word	0x0800344e

080032e8 <memmove>:
 80032e8:	b510      	push	{r4, lr}
 80032ea:	4288      	cmp	r0, r1
 80032ec:	d806      	bhi.n	80032fc <memmove+0x14>
 80032ee:	2300      	movs	r3, #0
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d008      	beq.n	8003306 <memmove+0x1e>
 80032f4:	5ccc      	ldrb	r4, [r1, r3]
 80032f6:	54c4      	strb	r4, [r0, r3]
 80032f8:	3301      	adds	r3, #1
 80032fa:	e7f9      	b.n	80032f0 <memmove+0x8>
 80032fc:	188b      	adds	r3, r1, r2
 80032fe:	4298      	cmp	r0, r3
 8003300:	d2f5      	bcs.n	80032ee <memmove+0x6>
 8003302:	3a01      	subs	r2, #1
 8003304:	d200      	bcs.n	8003308 <memmove+0x20>
 8003306:	bd10      	pop	{r4, pc}
 8003308:	5c8b      	ldrb	r3, [r1, r2]
 800330a:	5483      	strb	r3, [r0, r2]
 800330c:	e7f9      	b.n	8003302 <memmove+0x1a>
	...

08003310 <_sbrk_r>:
 8003310:	2300      	movs	r3, #0
 8003312:	b570      	push	{r4, r5, r6, lr}
 8003314:	4d06      	ldr	r5, [pc, #24]	@ (8003330 <_sbrk_r+0x20>)
 8003316:	0004      	movs	r4, r0
 8003318:	0008      	movs	r0, r1
 800331a:	602b      	str	r3, [r5, #0]
 800331c:	f7fd fab8 	bl	8000890 <_sbrk>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d103      	bne.n	800332c <_sbrk_r+0x1c>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d000      	beq.n	800332c <_sbrk_r+0x1c>
 800332a:	6023      	str	r3, [r4, #0]
 800332c:	bd70      	pop	{r4, r5, r6, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	2000032c 	.word	0x2000032c

08003334 <memchr>:
 8003334:	b2c9      	uxtb	r1, r1
 8003336:	1882      	adds	r2, r0, r2
 8003338:	4290      	cmp	r0, r2
 800333a:	d101      	bne.n	8003340 <memchr+0xc>
 800333c:	2000      	movs	r0, #0
 800333e:	4770      	bx	lr
 8003340:	7803      	ldrb	r3, [r0, #0]
 8003342:	428b      	cmp	r3, r1
 8003344:	d0fb      	beq.n	800333e <memchr+0xa>
 8003346:	3001      	adds	r0, #1
 8003348:	e7f6      	b.n	8003338 <memchr+0x4>

0800334a <memcpy>:
 800334a:	2300      	movs	r3, #0
 800334c:	b510      	push	{r4, lr}
 800334e:	429a      	cmp	r2, r3
 8003350:	d100      	bne.n	8003354 <memcpy+0xa>
 8003352:	bd10      	pop	{r4, pc}
 8003354:	5ccc      	ldrb	r4, [r1, r3]
 8003356:	54c4      	strb	r4, [r0, r3]
 8003358:	3301      	adds	r3, #1
 800335a:	e7f8      	b.n	800334e <memcpy+0x4>

0800335c <_realloc_r>:
 800335c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800335e:	0006      	movs	r6, r0
 8003360:	000c      	movs	r4, r1
 8003362:	0015      	movs	r5, r2
 8003364:	2900      	cmp	r1, #0
 8003366:	d105      	bne.n	8003374 <_realloc_r+0x18>
 8003368:	0011      	movs	r1, r2
 800336a:	f7ff fc51 	bl	8002c10 <_malloc_r>
 800336e:	0004      	movs	r4, r0
 8003370:	0020      	movs	r0, r4
 8003372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003374:	2a00      	cmp	r2, #0
 8003376:	d103      	bne.n	8003380 <_realloc_r+0x24>
 8003378:	f7ff fbde 	bl	8002b38 <_free_r>
 800337c:	2400      	movs	r4, #0
 800337e:	e7f7      	b.n	8003370 <_realloc_r+0x14>
 8003380:	f000 f81b 	bl	80033ba <_malloc_usable_size_r>
 8003384:	0007      	movs	r7, r0
 8003386:	4285      	cmp	r5, r0
 8003388:	d802      	bhi.n	8003390 <_realloc_r+0x34>
 800338a:	0843      	lsrs	r3, r0, #1
 800338c:	42ab      	cmp	r3, r5
 800338e:	d3ef      	bcc.n	8003370 <_realloc_r+0x14>
 8003390:	0029      	movs	r1, r5
 8003392:	0030      	movs	r0, r6
 8003394:	f7ff fc3c 	bl	8002c10 <_malloc_r>
 8003398:	9001      	str	r0, [sp, #4]
 800339a:	2800      	cmp	r0, #0
 800339c:	d0ee      	beq.n	800337c <_realloc_r+0x20>
 800339e:	002a      	movs	r2, r5
 80033a0:	42bd      	cmp	r5, r7
 80033a2:	d900      	bls.n	80033a6 <_realloc_r+0x4a>
 80033a4:	003a      	movs	r2, r7
 80033a6:	0021      	movs	r1, r4
 80033a8:	9801      	ldr	r0, [sp, #4]
 80033aa:	f7ff ffce 	bl	800334a <memcpy>
 80033ae:	0021      	movs	r1, r4
 80033b0:	0030      	movs	r0, r6
 80033b2:	f7ff fbc1 	bl	8002b38 <_free_r>
 80033b6:	9c01      	ldr	r4, [sp, #4]
 80033b8:	e7da      	b.n	8003370 <_realloc_r+0x14>

080033ba <_malloc_usable_size_r>:
 80033ba:	1f0b      	subs	r3, r1, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1f18      	subs	r0, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da01      	bge.n	80033c8 <_malloc_usable_size_r+0xe>
 80033c4:	580b      	ldr	r3, [r1, r0]
 80033c6:	18c0      	adds	r0, r0, r3
 80033c8:	4770      	bx	lr
	...

080033cc <_init>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr

080033d8 <_fini>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr
